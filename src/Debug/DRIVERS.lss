
DRIVERS.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000704  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .stab         00000804  00000000  00000000  00000758  2**2
                  CONTENTS, READONLY, DEBUGGING
  2 .stabstr      00000924  00000000  00000000  00000f5c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 79 03 	call	0x6f2	; 0x6f2 <main>
  64:	0c 94 80 03 	jmp	0x700	; 0x700 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <TEST_DIO>:
 */
#include "TEST_LOCAL.h"
#include "TEST_CFG.h"

void TEST_DIO(void)
{
  6c:	df 93       	push	r29
  6e:	cf 93       	push	r28
  70:	cd b7       	in	r28, 0x3d	; 61
  72:	de b7       	in	r29, 0x3e	; 62
	if(DIO_u8Init())
  74:	0e 94 5a 00 	call	0xb4	; 0xb4 <DIO_u8Init>
  78:	88 23       	and	r24, r24
  7a:	c9 f0       	breq	.+50     	; 0xae <TEST_DIO+0x42>
	{
		DIO_u8SetPinDir(PORTA_0,OUTPUT);
  7c:	80 e0       	ldi	r24, 0x00	; 0
  7e:	61 e0       	ldi	r22, 0x01	; 1
  80:	0e 94 62 00 	call	0xc4	; 0xc4 <DIO_u8SetPinDir>
		DIO_u8WritePin (PORTA_0,HIGH);
  84:	80 e0       	ldi	r24, 0x00	; 0
  86:	61 e0       	ldi	r22, 0x01	; 1
  88:	0e 94 fe 01 	call	0x3fc	; 0x3fc <DIO_u8WritePin>
		DIO_u8SetPinDir(PORTA_1,INPUT_PULLUP);
  8c:	81 e0       	ldi	r24, 0x01	; 1
  8e:	62 e0       	ldi	r22, 0x02	; 2
  90:	0e 94 62 00 	call	0xc4	; 0xc4 <DIO_u8SetPinDir>
		DIO_u8SetPinDir(PORTA_2,OUTPUT);
  94:	82 e0       	ldi	r24, 0x02	; 2
  96:	61 e0       	ldi	r22, 0x01	; 1
  98:	0e 94 62 00 	call	0xc4	; 0xc4 <DIO_u8SetPinDir>
		while (1)
		DIO_u8WritePin (PORTA_2,DIO_u8ReadPin(PORTA_1));
  9c:	81 e0       	ldi	r24, 0x01	; 1
  9e:	0e 94 ee 02 	call	0x5dc	; 0x5dc <DIO_u8ReadPin>
  a2:	98 2f       	mov	r25, r24
  a4:	82 e0       	ldi	r24, 0x02	; 2
  a6:	69 2f       	mov	r22, r25
  a8:	0e 94 fe 01 	call	0x3fc	; 0x3fc <DIO_u8WritePin>
  ac:	f7 cf       	rjmp	.-18     	; 0x9c <TEST_DIO+0x30>
	}
}
  ae:	cf 91       	pop	r28
  b0:	df 91       	pop	r29
  b2:	08 95       	ret

000000b4 <DIO_u8Init>:


#include "DIO_LOCAL.h"

uint8 DIO_u8Init (void)
{
  b4:	df 93       	push	r29
  b6:	cf 93       	push	r28
  b8:	cd b7       	in	r28, 0x3d	; 61
  ba:	de b7       	in	r29, 0x3e	; 62
	//DIO Initialization function
	return SUCCESS;
  bc:	81 e0       	ldi	r24, 0x01	; 1
}
  be:	cf 91       	pop	r28
  c0:	df 91       	pop	r29
  c2:	08 95       	ret

000000c4 <DIO_u8SetPinDir>:

uint8 DIO_u8SetPinDir (uint8 u8PinNum , uint8 u8Dir)
{
  c4:	df 93       	push	r29
  c6:	cf 93       	push	r28
  c8:	00 d0       	rcall	.+0      	; 0xca <DIO_u8SetPinDir+0x6>
  ca:	00 d0       	rcall	.+0      	; 0xcc <DIO_u8SetPinDir+0x8>
  cc:	0f 92       	push	r0
  ce:	cd b7       	in	r28, 0x3d	; 61
  d0:	de b7       	in	r29, 0x3e	; 62
  d2:	8a 83       	std	Y+2, r24	; 0x02
  d4:	6b 83       	std	Y+3, r22	; 0x03
	 * 		Pin number 		: 	PORTx_n 	n= 	0:7		x=	A:D
	 *		Pin Direction	:	OUTPUT	/	INPUT 	/ INPUT_PULLUP
	 *
	 */
	// initializing the status of the functions
	uint8 u8Status=ERROR;
  d6:	19 82       	std	Y+1, r1	; 0x01
	// checking the inputs of the functions
	if ((u8PinNum<DIO_PINS_MAX)&&(u8Dir<DIO_PIN_DIR_MAX))
  d8:	8a 81       	ldd	r24, Y+2	; 0x02
  da:	80 32       	cpi	r24, 0x20	; 32
  dc:	08 f0       	brcs	.+2      	; 0xe0 <DIO_u8SetPinDir+0x1c>
  de:	85 c1       	rjmp	.+778    	; 0x3ea <DIO_u8SetPinDir+0x326>
  e0:	8b 81       	ldd	r24, Y+3	; 0x03
  e2:	83 30       	cpi	r24, 0x03	; 3
  e4:	08 f0       	brcs	.+2      	; 0xe8 <DIO_u8SetPinDir+0x24>
  e6:	81 c1       	rjmp	.+770    	; 0x3ea <DIO_u8SetPinDir+0x326>
	{
		u8Status = SUCCESS;
  e8:	81 e0       	ldi	r24, 0x01	; 1
  ea:	89 83       	std	Y+1, r24	; 0x01
		// calculating the port no.
		switch(u8PinNum/8)
  ec:	8a 81       	ldd	r24, Y+2	; 0x02
  ee:	86 95       	lsr	r24
  f0:	86 95       	lsr	r24
  f2:	86 95       	lsr	r24
  f4:	28 2f       	mov	r18, r24
  f6:	30 e0       	ldi	r19, 0x00	; 0
  f8:	3d 83       	std	Y+5, r19	; 0x05
  fa:	2c 83       	std	Y+4, r18	; 0x04
  fc:	6c 81       	ldd	r22, Y+4	; 0x04
  fe:	7d 81       	ldd	r23, Y+5	; 0x05
 100:	61 30       	cpi	r22, 0x01	; 1
 102:	71 05       	cpc	r23, r1
 104:	09 f4       	brne	.+2      	; 0x108 <DIO_u8SetPinDir+0x44>
 106:	6e c0       	rjmp	.+220    	; 0x1e4 <DIO_u8SetPinDir+0x120>
 108:	8c 81       	ldd	r24, Y+4	; 0x04
 10a:	9d 81       	ldd	r25, Y+5	; 0x05
 10c:	82 30       	cpi	r24, 0x02	; 2
 10e:	91 05       	cpc	r25, r1
 110:	34 f4       	brge	.+12     	; 0x11e <DIO_u8SetPinDir+0x5a>
 112:	2c 81       	ldd	r18, Y+4	; 0x04
 114:	3d 81       	ldd	r19, Y+5	; 0x05
 116:	21 15       	cp	r18, r1
 118:	31 05       	cpc	r19, r1
 11a:	71 f0       	breq	.+28     	; 0x138 <DIO_u8SetPinDir+0x74>
 11c:	65 c1       	rjmp	.+714    	; 0x3e8 <DIO_u8SetPinDir+0x324>
 11e:	6c 81       	ldd	r22, Y+4	; 0x04
 120:	7d 81       	ldd	r23, Y+5	; 0x05
 122:	62 30       	cpi	r22, 0x02	; 2
 124:	71 05       	cpc	r23, r1
 126:	09 f4       	brne	.+2      	; 0x12a <DIO_u8SetPinDir+0x66>
 128:	b3 c0       	rjmp	.+358    	; 0x290 <DIO_u8SetPinDir+0x1cc>
 12a:	8c 81       	ldd	r24, Y+4	; 0x04
 12c:	9d 81       	ldd	r25, Y+5	; 0x05
 12e:	83 30       	cpi	r24, 0x03	; 3
 130:	91 05       	cpc	r25, r1
 132:	09 f4       	brne	.+2      	; 0x136 <DIO_u8SetPinDir+0x72>
 134:	03 c1       	rjmp	.+518    	; 0x33c <DIO_u8SetPinDir+0x278>
 136:	58 c1       	rjmp	.+688    	; 0x3e8 <DIO_u8SetPinDir+0x324>
		{
		case PORT_A : //PORTA
			// Write pin direction
			Assign_Bit(DDRA ,u8PinNum % 8, Get_Bit(u8Dir,0) );
 138:	aa e3       	ldi	r26, 0x3A	; 58
 13a:	b0 e0       	ldi	r27, 0x00	; 0
 13c:	8a 81       	ldd	r24, Y+2	; 0x02
 13e:	88 2f       	mov	r24, r24
 140:	90 e0       	ldi	r25, 0x00	; 0
 142:	9c 01       	movw	r18, r24
 144:	27 70       	andi	r18, 0x07	; 7
 146:	30 70       	andi	r19, 0x00	; 0
 148:	81 e0       	ldi	r24, 0x01	; 1
 14a:	90 e0       	ldi	r25, 0x00	; 0
 14c:	02 c0       	rjmp	.+4      	; 0x152 <DIO_u8SetPinDir+0x8e>
 14e:	88 0f       	add	r24, r24
 150:	99 1f       	adc	r25, r25
 152:	2a 95       	dec	r18
 154:	e2 f7       	brpl	.-8      	; 0x14e <DIO_u8SetPinDir+0x8a>
 156:	98 2f       	mov	r25, r24
 158:	90 95       	com	r25
 15a:	ea e3       	ldi	r30, 0x3A	; 58
 15c:	f0 e0       	ldi	r31, 0x00	; 0
 15e:	80 81       	ld	r24, Z
 160:	49 2f       	mov	r20, r25
 162:	48 23       	and	r20, r24
 164:	8b 81       	ldd	r24, Y+3	; 0x03
 166:	88 2f       	mov	r24, r24
 168:	90 e0       	ldi	r25, 0x00	; 0
 16a:	9c 01       	movw	r18, r24
 16c:	21 70       	andi	r18, 0x01	; 1
 16e:	30 70       	andi	r19, 0x00	; 0
 170:	8a 81       	ldd	r24, Y+2	; 0x02
 172:	88 2f       	mov	r24, r24
 174:	90 e0       	ldi	r25, 0x00	; 0
 176:	87 70       	andi	r24, 0x07	; 7
 178:	90 70       	andi	r25, 0x00	; 0
 17a:	b9 01       	movw	r22, r18
 17c:	02 c0       	rjmp	.+4      	; 0x182 <DIO_u8SetPinDir+0xbe>
 17e:	66 0f       	add	r22, r22
 180:	77 1f       	adc	r23, r23
 182:	8a 95       	dec	r24
 184:	e2 f7       	brpl	.-8      	; 0x17e <DIO_u8SetPinDir+0xba>
 186:	cb 01       	movw	r24, r22
 188:	84 2b       	or	r24, r20
 18a:	8c 93       	st	X, r24
			// Write pin pullup state
			Assign_Bit(PORTA,u8PinNum % 8, Get_Bit(u8Dir,1) );
 18c:	ab e3       	ldi	r26, 0x3B	; 59
 18e:	b0 e0       	ldi	r27, 0x00	; 0
 190:	8a 81       	ldd	r24, Y+2	; 0x02
 192:	88 2f       	mov	r24, r24
 194:	90 e0       	ldi	r25, 0x00	; 0
 196:	9c 01       	movw	r18, r24
 198:	27 70       	andi	r18, 0x07	; 7
 19a:	30 70       	andi	r19, 0x00	; 0
 19c:	81 e0       	ldi	r24, 0x01	; 1
 19e:	90 e0       	ldi	r25, 0x00	; 0
 1a0:	02 c0       	rjmp	.+4      	; 0x1a6 <DIO_u8SetPinDir+0xe2>
 1a2:	88 0f       	add	r24, r24
 1a4:	99 1f       	adc	r25, r25
 1a6:	2a 95       	dec	r18
 1a8:	e2 f7       	brpl	.-8      	; 0x1a2 <DIO_u8SetPinDir+0xde>
 1aa:	98 2f       	mov	r25, r24
 1ac:	90 95       	com	r25
 1ae:	eb e3       	ldi	r30, 0x3B	; 59
 1b0:	f0 e0       	ldi	r31, 0x00	; 0
 1b2:	80 81       	ld	r24, Z
 1b4:	49 2f       	mov	r20, r25
 1b6:	48 23       	and	r20, r24
 1b8:	8b 81       	ldd	r24, Y+3	; 0x03
 1ba:	86 95       	lsr	r24
 1bc:	88 2f       	mov	r24, r24
 1be:	90 e0       	ldi	r25, 0x00	; 0
 1c0:	9c 01       	movw	r18, r24
 1c2:	21 70       	andi	r18, 0x01	; 1
 1c4:	30 70       	andi	r19, 0x00	; 0
 1c6:	8a 81       	ldd	r24, Y+2	; 0x02
 1c8:	88 2f       	mov	r24, r24
 1ca:	90 e0       	ldi	r25, 0x00	; 0
 1cc:	87 70       	andi	r24, 0x07	; 7
 1ce:	90 70       	andi	r25, 0x00	; 0
 1d0:	b9 01       	movw	r22, r18
 1d2:	02 c0       	rjmp	.+4      	; 0x1d8 <DIO_u8SetPinDir+0x114>
 1d4:	66 0f       	add	r22, r22
 1d6:	77 1f       	adc	r23, r23
 1d8:	8a 95       	dec	r24
 1da:	e2 f7       	brpl	.-8      	; 0x1d4 <DIO_u8SetPinDir+0x110>
 1dc:	cb 01       	movw	r24, r22
 1de:	84 2b       	or	r24, r20
 1e0:	8c 93       	st	X, r24
 1e2:	03 c1       	rjmp	.+518    	; 0x3ea <DIO_u8SetPinDir+0x326>
			break;
		case PORT_B : //PORTB
			// Write pin direction
			Assign_Bit(DDRB ,u8PinNum % 8, Get_Bit(u8Dir,0) );
 1e4:	a7 e3       	ldi	r26, 0x37	; 55
 1e6:	b0 e0       	ldi	r27, 0x00	; 0
 1e8:	8a 81       	ldd	r24, Y+2	; 0x02
 1ea:	88 2f       	mov	r24, r24
 1ec:	90 e0       	ldi	r25, 0x00	; 0
 1ee:	9c 01       	movw	r18, r24
 1f0:	27 70       	andi	r18, 0x07	; 7
 1f2:	30 70       	andi	r19, 0x00	; 0
 1f4:	81 e0       	ldi	r24, 0x01	; 1
 1f6:	90 e0       	ldi	r25, 0x00	; 0
 1f8:	02 c0       	rjmp	.+4      	; 0x1fe <DIO_u8SetPinDir+0x13a>
 1fa:	88 0f       	add	r24, r24
 1fc:	99 1f       	adc	r25, r25
 1fe:	2a 95       	dec	r18
 200:	e2 f7       	brpl	.-8      	; 0x1fa <DIO_u8SetPinDir+0x136>
 202:	98 2f       	mov	r25, r24
 204:	90 95       	com	r25
 206:	e7 e3       	ldi	r30, 0x37	; 55
 208:	f0 e0       	ldi	r31, 0x00	; 0
 20a:	80 81       	ld	r24, Z
 20c:	49 2f       	mov	r20, r25
 20e:	48 23       	and	r20, r24
 210:	8b 81       	ldd	r24, Y+3	; 0x03
 212:	88 2f       	mov	r24, r24
 214:	90 e0       	ldi	r25, 0x00	; 0
 216:	9c 01       	movw	r18, r24
 218:	21 70       	andi	r18, 0x01	; 1
 21a:	30 70       	andi	r19, 0x00	; 0
 21c:	8a 81       	ldd	r24, Y+2	; 0x02
 21e:	88 2f       	mov	r24, r24
 220:	90 e0       	ldi	r25, 0x00	; 0
 222:	87 70       	andi	r24, 0x07	; 7
 224:	90 70       	andi	r25, 0x00	; 0
 226:	b9 01       	movw	r22, r18
 228:	02 c0       	rjmp	.+4      	; 0x22e <DIO_u8SetPinDir+0x16a>
 22a:	66 0f       	add	r22, r22
 22c:	77 1f       	adc	r23, r23
 22e:	8a 95       	dec	r24
 230:	e2 f7       	brpl	.-8      	; 0x22a <DIO_u8SetPinDir+0x166>
 232:	cb 01       	movw	r24, r22
 234:	84 2b       	or	r24, r20
 236:	8c 93       	st	X, r24
			// Write pin pullup state
			Assign_Bit(PORTB,u8PinNum % 8, Get_Bit(u8Dir,1) );
 238:	a8 e3       	ldi	r26, 0x38	; 56
 23a:	b0 e0       	ldi	r27, 0x00	; 0
 23c:	8a 81       	ldd	r24, Y+2	; 0x02
 23e:	88 2f       	mov	r24, r24
 240:	90 e0       	ldi	r25, 0x00	; 0
 242:	9c 01       	movw	r18, r24
 244:	27 70       	andi	r18, 0x07	; 7
 246:	30 70       	andi	r19, 0x00	; 0
 248:	81 e0       	ldi	r24, 0x01	; 1
 24a:	90 e0       	ldi	r25, 0x00	; 0
 24c:	02 c0       	rjmp	.+4      	; 0x252 <DIO_u8SetPinDir+0x18e>
 24e:	88 0f       	add	r24, r24
 250:	99 1f       	adc	r25, r25
 252:	2a 95       	dec	r18
 254:	e2 f7       	brpl	.-8      	; 0x24e <DIO_u8SetPinDir+0x18a>
 256:	98 2f       	mov	r25, r24
 258:	90 95       	com	r25
 25a:	e8 e3       	ldi	r30, 0x38	; 56
 25c:	f0 e0       	ldi	r31, 0x00	; 0
 25e:	80 81       	ld	r24, Z
 260:	49 2f       	mov	r20, r25
 262:	48 23       	and	r20, r24
 264:	8b 81       	ldd	r24, Y+3	; 0x03
 266:	86 95       	lsr	r24
 268:	88 2f       	mov	r24, r24
 26a:	90 e0       	ldi	r25, 0x00	; 0
 26c:	9c 01       	movw	r18, r24
 26e:	21 70       	andi	r18, 0x01	; 1
 270:	30 70       	andi	r19, 0x00	; 0
 272:	8a 81       	ldd	r24, Y+2	; 0x02
 274:	88 2f       	mov	r24, r24
 276:	90 e0       	ldi	r25, 0x00	; 0
 278:	87 70       	andi	r24, 0x07	; 7
 27a:	90 70       	andi	r25, 0x00	; 0
 27c:	b9 01       	movw	r22, r18
 27e:	02 c0       	rjmp	.+4      	; 0x284 <DIO_u8SetPinDir+0x1c0>
 280:	66 0f       	add	r22, r22
 282:	77 1f       	adc	r23, r23
 284:	8a 95       	dec	r24
 286:	e2 f7       	brpl	.-8      	; 0x280 <DIO_u8SetPinDir+0x1bc>
 288:	cb 01       	movw	r24, r22
 28a:	84 2b       	or	r24, r20
 28c:	8c 93       	st	X, r24
 28e:	ad c0       	rjmp	.+346    	; 0x3ea <DIO_u8SetPinDir+0x326>
			break;
		case PORT_C : //PORTC
			// Write pin direction
			Assign_Bit(DDRC ,u8PinNum % 8, Get_Bit(u8Dir,0) );
 290:	a4 e3       	ldi	r26, 0x34	; 52
 292:	b0 e0       	ldi	r27, 0x00	; 0
 294:	8a 81       	ldd	r24, Y+2	; 0x02
 296:	88 2f       	mov	r24, r24
 298:	90 e0       	ldi	r25, 0x00	; 0
 29a:	9c 01       	movw	r18, r24
 29c:	27 70       	andi	r18, 0x07	; 7
 29e:	30 70       	andi	r19, 0x00	; 0
 2a0:	81 e0       	ldi	r24, 0x01	; 1
 2a2:	90 e0       	ldi	r25, 0x00	; 0
 2a4:	02 c0       	rjmp	.+4      	; 0x2aa <DIO_u8SetPinDir+0x1e6>
 2a6:	88 0f       	add	r24, r24
 2a8:	99 1f       	adc	r25, r25
 2aa:	2a 95       	dec	r18
 2ac:	e2 f7       	brpl	.-8      	; 0x2a6 <DIO_u8SetPinDir+0x1e2>
 2ae:	98 2f       	mov	r25, r24
 2b0:	90 95       	com	r25
 2b2:	e4 e3       	ldi	r30, 0x34	; 52
 2b4:	f0 e0       	ldi	r31, 0x00	; 0
 2b6:	80 81       	ld	r24, Z
 2b8:	49 2f       	mov	r20, r25
 2ba:	48 23       	and	r20, r24
 2bc:	8b 81       	ldd	r24, Y+3	; 0x03
 2be:	88 2f       	mov	r24, r24
 2c0:	90 e0       	ldi	r25, 0x00	; 0
 2c2:	9c 01       	movw	r18, r24
 2c4:	21 70       	andi	r18, 0x01	; 1
 2c6:	30 70       	andi	r19, 0x00	; 0
 2c8:	8a 81       	ldd	r24, Y+2	; 0x02
 2ca:	88 2f       	mov	r24, r24
 2cc:	90 e0       	ldi	r25, 0x00	; 0
 2ce:	87 70       	andi	r24, 0x07	; 7
 2d0:	90 70       	andi	r25, 0x00	; 0
 2d2:	b9 01       	movw	r22, r18
 2d4:	02 c0       	rjmp	.+4      	; 0x2da <DIO_u8SetPinDir+0x216>
 2d6:	66 0f       	add	r22, r22
 2d8:	77 1f       	adc	r23, r23
 2da:	8a 95       	dec	r24
 2dc:	e2 f7       	brpl	.-8      	; 0x2d6 <DIO_u8SetPinDir+0x212>
 2de:	cb 01       	movw	r24, r22
 2e0:	84 2b       	or	r24, r20
 2e2:	8c 93       	st	X, r24
			// Write pin pullup state
			Assign_Bit(PORTC,u8PinNum % 8, Get_Bit(u8Dir,1) );
 2e4:	a5 e3       	ldi	r26, 0x35	; 53
 2e6:	b0 e0       	ldi	r27, 0x00	; 0
 2e8:	8a 81       	ldd	r24, Y+2	; 0x02
 2ea:	88 2f       	mov	r24, r24
 2ec:	90 e0       	ldi	r25, 0x00	; 0
 2ee:	9c 01       	movw	r18, r24
 2f0:	27 70       	andi	r18, 0x07	; 7
 2f2:	30 70       	andi	r19, 0x00	; 0
 2f4:	81 e0       	ldi	r24, 0x01	; 1
 2f6:	90 e0       	ldi	r25, 0x00	; 0
 2f8:	02 c0       	rjmp	.+4      	; 0x2fe <DIO_u8SetPinDir+0x23a>
 2fa:	88 0f       	add	r24, r24
 2fc:	99 1f       	adc	r25, r25
 2fe:	2a 95       	dec	r18
 300:	e2 f7       	brpl	.-8      	; 0x2fa <DIO_u8SetPinDir+0x236>
 302:	98 2f       	mov	r25, r24
 304:	90 95       	com	r25
 306:	e5 e3       	ldi	r30, 0x35	; 53
 308:	f0 e0       	ldi	r31, 0x00	; 0
 30a:	80 81       	ld	r24, Z
 30c:	49 2f       	mov	r20, r25
 30e:	48 23       	and	r20, r24
 310:	8b 81       	ldd	r24, Y+3	; 0x03
 312:	86 95       	lsr	r24
 314:	88 2f       	mov	r24, r24
 316:	90 e0       	ldi	r25, 0x00	; 0
 318:	9c 01       	movw	r18, r24
 31a:	21 70       	andi	r18, 0x01	; 1
 31c:	30 70       	andi	r19, 0x00	; 0
 31e:	8a 81       	ldd	r24, Y+2	; 0x02
 320:	88 2f       	mov	r24, r24
 322:	90 e0       	ldi	r25, 0x00	; 0
 324:	87 70       	andi	r24, 0x07	; 7
 326:	90 70       	andi	r25, 0x00	; 0
 328:	b9 01       	movw	r22, r18
 32a:	02 c0       	rjmp	.+4      	; 0x330 <DIO_u8SetPinDir+0x26c>
 32c:	66 0f       	add	r22, r22
 32e:	77 1f       	adc	r23, r23
 330:	8a 95       	dec	r24
 332:	e2 f7       	brpl	.-8      	; 0x32c <DIO_u8SetPinDir+0x268>
 334:	cb 01       	movw	r24, r22
 336:	84 2b       	or	r24, r20
 338:	8c 93       	st	X, r24
 33a:	57 c0       	rjmp	.+174    	; 0x3ea <DIO_u8SetPinDir+0x326>
			break;
		case PORT_D : //PORTD
			// Write pin direction
			Assign_Bit(DDRD ,u8PinNum % 8, Get_Bit(u8Dir,0) );
 33c:	a1 e3       	ldi	r26, 0x31	; 49
 33e:	b0 e0       	ldi	r27, 0x00	; 0
 340:	8a 81       	ldd	r24, Y+2	; 0x02
 342:	88 2f       	mov	r24, r24
 344:	90 e0       	ldi	r25, 0x00	; 0
 346:	9c 01       	movw	r18, r24
 348:	27 70       	andi	r18, 0x07	; 7
 34a:	30 70       	andi	r19, 0x00	; 0
 34c:	81 e0       	ldi	r24, 0x01	; 1
 34e:	90 e0       	ldi	r25, 0x00	; 0
 350:	02 c0       	rjmp	.+4      	; 0x356 <DIO_u8SetPinDir+0x292>
 352:	88 0f       	add	r24, r24
 354:	99 1f       	adc	r25, r25
 356:	2a 95       	dec	r18
 358:	e2 f7       	brpl	.-8      	; 0x352 <DIO_u8SetPinDir+0x28e>
 35a:	98 2f       	mov	r25, r24
 35c:	90 95       	com	r25
 35e:	e1 e3       	ldi	r30, 0x31	; 49
 360:	f0 e0       	ldi	r31, 0x00	; 0
 362:	80 81       	ld	r24, Z
 364:	49 2f       	mov	r20, r25
 366:	48 23       	and	r20, r24
 368:	8b 81       	ldd	r24, Y+3	; 0x03
 36a:	88 2f       	mov	r24, r24
 36c:	90 e0       	ldi	r25, 0x00	; 0
 36e:	9c 01       	movw	r18, r24
 370:	21 70       	andi	r18, 0x01	; 1
 372:	30 70       	andi	r19, 0x00	; 0
 374:	8a 81       	ldd	r24, Y+2	; 0x02
 376:	88 2f       	mov	r24, r24
 378:	90 e0       	ldi	r25, 0x00	; 0
 37a:	87 70       	andi	r24, 0x07	; 7
 37c:	90 70       	andi	r25, 0x00	; 0
 37e:	b9 01       	movw	r22, r18
 380:	02 c0       	rjmp	.+4      	; 0x386 <DIO_u8SetPinDir+0x2c2>
 382:	66 0f       	add	r22, r22
 384:	77 1f       	adc	r23, r23
 386:	8a 95       	dec	r24
 388:	e2 f7       	brpl	.-8      	; 0x382 <DIO_u8SetPinDir+0x2be>
 38a:	cb 01       	movw	r24, r22
 38c:	84 2b       	or	r24, r20
 38e:	8c 93       	st	X, r24
			// Write pin pullup state
			Assign_Bit(PORTD,u8PinNum % 8, Get_Bit(u8Dir,1) );
 390:	a2 e3       	ldi	r26, 0x32	; 50
 392:	b0 e0       	ldi	r27, 0x00	; 0
 394:	8a 81       	ldd	r24, Y+2	; 0x02
 396:	88 2f       	mov	r24, r24
 398:	90 e0       	ldi	r25, 0x00	; 0
 39a:	9c 01       	movw	r18, r24
 39c:	27 70       	andi	r18, 0x07	; 7
 39e:	30 70       	andi	r19, 0x00	; 0
 3a0:	81 e0       	ldi	r24, 0x01	; 1
 3a2:	90 e0       	ldi	r25, 0x00	; 0
 3a4:	02 c0       	rjmp	.+4      	; 0x3aa <DIO_u8SetPinDir+0x2e6>
 3a6:	88 0f       	add	r24, r24
 3a8:	99 1f       	adc	r25, r25
 3aa:	2a 95       	dec	r18
 3ac:	e2 f7       	brpl	.-8      	; 0x3a6 <DIO_u8SetPinDir+0x2e2>
 3ae:	98 2f       	mov	r25, r24
 3b0:	90 95       	com	r25
 3b2:	e2 e3       	ldi	r30, 0x32	; 50
 3b4:	f0 e0       	ldi	r31, 0x00	; 0
 3b6:	80 81       	ld	r24, Z
 3b8:	49 2f       	mov	r20, r25
 3ba:	48 23       	and	r20, r24
 3bc:	8b 81       	ldd	r24, Y+3	; 0x03
 3be:	86 95       	lsr	r24
 3c0:	88 2f       	mov	r24, r24
 3c2:	90 e0       	ldi	r25, 0x00	; 0
 3c4:	9c 01       	movw	r18, r24
 3c6:	21 70       	andi	r18, 0x01	; 1
 3c8:	30 70       	andi	r19, 0x00	; 0
 3ca:	8a 81       	ldd	r24, Y+2	; 0x02
 3cc:	88 2f       	mov	r24, r24
 3ce:	90 e0       	ldi	r25, 0x00	; 0
 3d0:	87 70       	andi	r24, 0x07	; 7
 3d2:	90 70       	andi	r25, 0x00	; 0
 3d4:	b9 01       	movw	r22, r18
 3d6:	02 c0       	rjmp	.+4      	; 0x3dc <DIO_u8SetPinDir+0x318>
 3d8:	66 0f       	add	r22, r22
 3da:	77 1f       	adc	r23, r23
 3dc:	8a 95       	dec	r24
 3de:	e2 f7       	brpl	.-8      	; 0x3d8 <DIO_u8SetPinDir+0x314>
 3e0:	cb 01       	movw	r24, r22
 3e2:	84 2b       	or	r24, r20
 3e4:	8c 93       	st	X, r24
 3e6:	01 c0       	rjmp	.+2      	; 0x3ea <DIO_u8SetPinDir+0x326>
			break;
		default:
			u8Status=ERROR;
 3e8:	19 82       	std	Y+1, r1	; 0x01
			break;
		}

	}
	return u8Status;
 3ea:	89 81       	ldd	r24, Y+1	; 0x01

}
 3ec:	0f 90       	pop	r0
 3ee:	0f 90       	pop	r0
 3f0:	0f 90       	pop	r0
 3f2:	0f 90       	pop	r0
 3f4:	0f 90       	pop	r0
 3f6:	cf 91       	pop	r28
 3f8:	df 91       	pop	r29
 3fa:	08 95       	ret

000003fc <DIO_u8WritePin>:

uint8 DIO_u8WritePin (uint8 u8PinNum , uint8 u8Data)
{
 3fc:	df 93       	push	r29
 3fe:	cf 93       	push	r28
 400:	00 d0       	rcall	.+0      	; 0x402 <DIO_u8WritePin+0x6>
 402:	00 d0       	rcall	.+0      	; 0x404 <DIO_u8WritePin+0x8>
 404:	0f 92       	push	r0
 406:	cd b7       	in	r28, 0x3d	; 61
 408:	de b7       	in	r29, 0x3e	; 62
 40a:	8a 83       	std	Y+2, r24	; 0x02
 40c:	6b 83       	std	Y+3, r22	; 0x03
	 * 		Pin number 		: 	PORTx_n 	n= 	0:7		x=	A:D
	 *		Pin Data		:	HIGH	/	LOW
	 *
	 */
	// initializing the status of the functions
	uint8 u8Status=ERROR;
 40e:	19 82       	std	Y+1, r1	; 0x01
	// checking the inputs of the functions
	if ((u8PinNum<DIO_PINS_MAX)&&(u8Data<DIO_DATA_ERROR))
 410:	8a 81       	ldd	r24, Y+2	; 0x02
 412:	80 32       	cpi	r24, 0x20	; 32
 414:	08 f0       	brcs	.+2      	; 0x418 <DIO_u8WritePin+0x1c>
 416:	d9 c0       	rjmp	.+434    	; 0x5ca <__stack+0x16b>
 418:	8b 81       	ldd	r24, Y+3	; 0x03
 41a:	82 30       	cpi	r24, 0x02	; 2
 41c:	08 f0       	brcs	.+2      	; 0x420 <DIO_u8WritePin+0x24>
 41e:	d5 c0       	rjmp	.+426    	; 0x5ca <__stack+0x16b>
	{
		u8Status=SUCCESS;
 420:	81 e0       	ldi	r24, 0x01	; 1
 422:	89 83       	std	Y+1, r24	; 0x01
		// calculating the port no.
		switch(u8PinNum/8)
 424:	8a 81       	ldd	r24, Y+2	; 0x02
 426:	86 95       	lsr	r24
 428:	86 95       	lsr	r24
 42a:	86 95       	lsr	r24
 42c:	28 2f       	mov	r18, r24
 42e:	30 e0       	ldi	r19, 0x00	; 0
 430:	3d 83       	std	Y+5, r19	; 0x05
 432:	2c 83       	std	Y+4, r18	; 0x04
 434:	6c 81       	ldd	r22, Y+4	; 0x04
 436:	7d 81       	ldd	r23, Y+5	; 0x05
 438:	61 30       	cpi	r22, 0x01	; 1
 43a:	71 05       	cpc	r23, r1
 43c:	09 f4       	brne	.+2      	; 0x440 <DIO_u8WritePin+0x44>
 43e:	43 c0       	rjmp	.+134    	; 0x4c6 <__stack+0x67>
 440:	8c 81       	ldd	r24, Y+4	; 0x04
 442:	9d 81       	ldd	r25, Y+5	; 0x05
 444:	82 30       	cpi	r24, 0x02	; 2
 446:	91 05       	cpc	r25, r1
 448:	34 f4       	brge	.+12     	; 0x456 <DIO_u8WritePin+0x5a>
 44a:	2c 81       	ldd	r18, Y+4	; 0x04
 44c:	3d 81       	ldd	r19, Y+5	; 0x05
 44e:	21 15       	cp	r18, r1
 450:	31 05       	cpc	r19, r1
 452:	71 f0       	breq	.+28     	; 0x470 <__stack+0x11>
 454:	b9 c0       	rjmp	.+370    	; 0x5c8 <__stack+0x169>
 456:	6c 81       	ldd	r22, Y+4	; 0x04
 458:	7d 81       	ldd	r23, Y+5	; 0x05
 45a:	62 30       	cpi	r22, 0x02	; 2
 45c:	71 05       	cpc	r23, r1
 45e:	09 f4       	brne	.+2      	; 0x462 <__stack+0x3>
 460:	5d c0       	rjmp	.+186    	; 0x51c <__stack+0xbd>
 462:	8c 81       	ldd	r24, Y+4	; 0x04
 464:	9d 81       	ldd	r25, Y+5	; 0x05
 466:	83 30       	cpi	r24, 0x03	; 3
 468:	91 05       	cpc	r25, r1
 46a:	09 f4       	brne	.+2      	; 0x46e <__stack+0xf>
 46c:	82 c0       	rjmp	.+260    	; 0x572 <__stack+0x113>
 46e:	ac c0       	rjmp	.+344    	; 0x5c8 <__stack+0x169>
		{
		case PORT_A : //PORTA
			// Write pin values
			Assign_Bit(PORTA ,u8PinNum % 8, u8Data );
 470:	ab e3       	ldi	r26, 0x3B	; 59
 472:	b0 e0       	ldi	r27, 0x00	; 0
 474:	8a 81       	ldd	r24, Y+2	; 0x02
 476:	88 2f       	mov	r24, r24
 478:	90 e0       	ldi	r25, 0x00	; 0
 47a:	9c 01       	movw	r18, r24
 47c:	27 70       	andi	r18, 0x07	; 7
 47e:	30 70       	andi	r19, 0x00	; 0
 480:	81 e0       	ldi	r24, 0x01	; 1
 482:	90 e0       	ldi	r25, 0x00	; 0
 484:	02 c0       	rjmp	.+4      	; 0x48a <__stack+0x2b>
 486:	88 0f       	add	r24, r24
 488:	99 1f       	adc	r25, r25
 48a:	2a 95       	dec	r18
 48c:	e2 f7       	brpl	.-8      	; 0x486 <__stack+0x27>
 48e:	98 2f       	mov	r25, r24
 490:	90 95       	com	r25
 492:	eb e3       	ldi	r30, 0x3B	; 59
 494:	f0 e0       	ldi	r31, 0x00	; 0
 496:	80 81       	ld	r24, Z
 498:	49 2f       	mov	r20, r25
 49a:	48 23       	and	r20, r24
 49c:	8b 81       	ldd	r24, Y+3	; 0x03
 49e:	88 2f       	mov	r24, r24
 4a0:	90 e0       	ldi	r25, 0x00	; 0
 4a2:	9c 01       	movw	r18, r24
 4a4:	21 70       	andi	r18, 0x01	; 1
 4a6:	30 70       	andi	r19, 0x00	; 0
 4a8:	8a 81       	ldd	r24, Y+2	; 0x02
 4aa:	88 2f       	mov	r24, r24
 4ac:	90 e0       	ldi	r25, 0x00	; 0
 4ae:	87 70       	andi	r24, 0x07	; 7
 4b0:	90 70       	andi	r25, 0x00	; 0
 4b2:	b9 01       	movw	r22, r18
 4b4:	02 c0       	rjmp	.+4      	; 0x4ba <__stack+0x5b>
 4b6:	66 0f       	add	r22, r22
 4b8:	77 1f       	adc	r23, r23
 4ba:	8a 95       	dec	r24
 4bc:	e2 f7       	brpl	.-8      	; 0x4b6 <__stack+0x57>
 4be:	cb 01       	movw	r24, r22
 4c0:	84 2b       	or	r24, r20
 4c2:	8c 93       	st	X, r24
 4c4:	82 c0       	rjmp	.+260    	; 0x5ca <__stack+0x16b>
			break;
		case PORT_B : //PORTB
			// Write pin values
			Assign_Bit(PORTB ,u8PinNum % 8, u8Data );
 4c6:	a8 e3       	ldi	r26, 0x38	; 56
 4c8:	b0 e0       	ldi	r27, 0x00	; 0
 4ca:	8a 81       	ldd	r24, Y+2	; 0x02
 4cc:	88 2f       	mov	r24, r24
 4ce:	90 e0       	ldi	r25, 0x00	; 0
 4d0:	9c 01       	movw	r18, r24
 4d2:	27 70       	andi	r18, 0x07	; 7
 4d4:	30 70       	andi	r19, 0x00	; 0
 4d6:	81 e0       	ldi	r24, 0x01	; 1
 4d8:	90 e0       	ldi	r25, 0x00	; 0
 4da:	02 c0       	rjmp	.+4      	; 0x4e0 <__stack+0x81>
 4dc:	88 0f       	add	r24, r24
 4de:	99 1f       	adc	r25, r25
 4e0:	2a 95       	dec	r18
 4e2:	e2 f7       	brpl	.-8      	; 0x4dc <__stack+0x7d>
 4e4:	98 2f       	mov	r25, r24
 4e6:	90 95       	com	r25
 4e8:	e8 e3       	ldi	r30, 0x38	; 56
 4ea:	f0 e0       	ldi	r31, 0x00	; 0
 4ec:	80 81       	ld	r24, Z
 4ee:	49 2f       	mov	r20, r25
 4f0:	48 23       	and	r20, r24
 4f2:	8b 81       	ldd	r24, Y+3	; 0x03
 4f4:	88 2f       	mov	r24, r24
 4f6:	90 e0       	ldi	r25, 0x00	; 0
 4f8:	9c 01       	movw	r18, r24
 4fa:	21 70       	andi	r18, 0x01	; 1
 4fc:	30 70       	andi	r19, 0x00	; 0
 4fe:	8a 81       	ldd	r24, Y+2	; 0x02
 500:	88 2f       	mov	r24, r24
 502:	90 e0       	ldi	r25, 0x00	; 0
 504:	87 70       	andi	r24, 0x07	; 7
 506:	90 70       	andi	r25, 0x00	; 0
 508:	b9 01       	movw	r22, r18
 50a:	02 c0       	rjmp	.+4      	; 0x510 <__stack+0xb1>
 50c:	66 0f       	add	r22, r22
 50e:	77 1f       	adc	r23, r23
 510:	8a 95       	dec	r24
 512:	e2 f7       	brpl	.-8      	; 0x50c <__stack+0xad>
 514:	cb 01       	movw	r24, r22
 516:	84 2b       	or	r24, r20
 518:	8c 93       	st	X, r24
 51a:	57 c0       	rjmp	.+174    	; 0x5ca <__stack+0x16b>
			break;
		case PORT_C : //PORTC
			// Write pin values
			Assign_Bit(PORTC ,u8PinNum % 8, u8Data );
 51c:	a5 e3       	ldi	r26, 0x35	; 53
 51e:	b0 e0       	ldi	r27, 0x00	; 0
 520:	8a 81       	ldd	r24, Y+2	; 0x02
 522:	88 2f       	mov	r24, r24
 524:	90 e0       	ldi	r25, 0x00	; 0
 526:	9c 01       	movw	r18, r24
 528:	27 70       	andi	r18, 0x07	; 7
 52a:	30 70       	andi	r19, 0x00	; 0
 52c:	81 e0       	ldi	r24, 0x01	; 1
 52e:	90 e0       	ldi	r25, 0x00	; 0
 530:	02 c0       	rjmp	.+4      	; 0x536 <__stack+0xd7>
 532:	88 0f       	add	r24, r24
 534:	99 1f       	adc	r25, r25
 536:	2a 95       	dec	r18
 538:	e2 f7       	brpl	.-8      	; 0x532 <__stack+0xd3>
 53a:	98 2f       	mov	r25, r24
 53c:	90 95       	com	r25
 53e:	e5 e3       	ldi	r30, 0x35	; 53
 540:	f0 e0       	ldi	r31, 0x00	; 0
 542:	80 81       	ld	r24, Z
 544:	49 2f       	mov	r20, r25
 546:	48 23       	and	r20, r24
 548:	8b 81       	ldd	r24, Y+3	; 0x03
 54a:	88 2f       	mov	r24, r24
 54c:	90 e0       	ldi	r25, 0x00	; 0
 54e:	9c 01       	movw	r18, r24
 550:	21 70       	andi	r18, 0x01	; 1
 552:	30 70       	andi	r19, 0x00	; 0
 554:	8a 81       	ldd	r24, Y+2	; 0x02
 556:	88 2f       	mov	r24, r24
 558:	90 e0       	ldi	r25, 0x00	; 0
 55a:	87 70       	andi	r24, 0x07	; 7
 55c:	90 70       	andi	r25, 0x00	; 0
 55e:	b9 01       	movw	r22, r18
 560:	02 c0       	rjmp	.+4      	; 0x566 <__stack+0x107>
 562:	66 0f       	add	r22, r22
 564:	77 1f       	adc	r23, r23
 566:	8a 95       	dec	r24
 568:	e2 f7       	brpl	.-8      	; 0x562 <__stack+0x103>
 56a:	cb 01       	movw	r24, r22
 56c:	84 2b       	or	r24, r20
 56e:	8c 93       	st	X, r24
 570:	2c c0       	rjmp	.+88     	; 0x5ca <__stack+0x16b>
			break;
		case PORT_D : //PORTD
			// Write pin values
			Assign_Bit(PORTD ,u8PinNum % 8, u8Data );
 572:	a2 e3       	ldi	r26, 0x32	; 50
 574:	b0 e0       	ldi	r27, 0x00	; 0
 576:	8a 81       	ldd	r24, Y+2	; 0x02
 578:	88 2f       	mov	r24, r24
 57a:	90 e0       	ldi	r25, 0x00	; 0
 57c:	9c 01       	movw	r18, r24
 57e:	27 70       	andi	r18, 0x07	; 7
 580:	30 70       	andi	r19, 0x00	; 0
 582:	81 e0       	ldi	r24, 0x01	; 1
 584:	90 e0       	ldi	r25, 0x00	; 0
 586:	02 c0       	rjmp	.+4      	; 0x58c <__stack+0x12d>
 588:	88 0f       	add	r24, r24
 58a:	99 1f       	adc	r25, r25
 58c:	2a 95       	dec	r18
 58e:	e2 f7       	brpl	.-8      	; 0x588 <__stack+0x129>
 590:	98 2f       	mov	r25, r24
 592:	90 95       	com	r25
 594:	e2 e3       	ldi	r30, 0x32	; 50
 596:	f0 e0       	ldi	r31, 0x00	; 0
 598:	80 81       	ld	r24, Z
 59a:	49 2f       	mov	r20, r25
 59c:	48 23       	and	r20, r24
 59e:	8b 81       	ldd	r24, Y+3	; 0x03
 5a0:	88 2f       	mov	r24, r24
 5a2:	90 e0       	ldi	r25, 0x00	; 0
 5a4:	9c 01       	movw	r18, r24
 5a6:	21 70       	andi	r18, 0x01	; 1
 5a8:	30 70       	andi	r19, 0x00	; 0
 5aa:	8a 81       	ldd	r24, Y+2	; 0x02
 5ac:	88 2f       	mov	r24, r24
 5ae:	90 e0       	ldi	r25, 0x00	; 0
 5b0:	87 70       	andi	r24, 0x07	; 7
 5b2:	90 70       	andi	r25, 0x00	; 0
 5b4:	b9 01       	movw	r22, r18
 5b6:	02 c0       	rjmp	.+4      	; 0x5bc <__stack+0x15d>
 5b8:	66 0f       	add	r22, r22
 5ba:	77 1f       	adc	r23, r23
 5bc:	8a 95       	dec	r24
 5be:	e2 f7       	brpl	.-8      	; 0x5b8 <__stack+0x159>
 5c0:	cb 01       	movw	r24, r22
 5c2:	84 2b       	or	r24, r20
 5c4:	8c 93       	st	X, r24
 5c6:	01 c0       	rjmp	.+2      	; 0x5ca <__stack+0x16b>
			break;
		default:
			u8Status=ERROR;
 5c8:	19 82       	std	Y+1, r1	; 0x01
			break;
		}

	}
	return u8Status;
 5ca:	89 81       	ldd	r24, Y+1	; 0x01
}
 5cc:	0f 90       	pop	r0
 5ce:	0f 90       	pop	r0
 5d0:	0f 90       	pop	r0
 5d2:	0f 90       	pop	r0
 5d4:	0f 90       	pop	r0
 5d6:	cf 91       	pop	r28
 5d8:	df 91       	pop	r29
 5da:	08 95       	ret

000005dc <DIO_u8ReadPin>:

uint8 DIO_u8ReadPin (uint8 u8PinNum )
{
 5dc:	df 93       	push	r29
 5de:	cf 93       	push	r28
 5e0:	00 d0       	rcall	.+0      	; 0x5e2 <DIO_u8ReadPin+0x6>
 5e2:	00 d0       	rcall	.+0      	; 0x5e4 <DIO_u8ReadPin+0x8>
 5e4:	cd b7       	in	r28, 0x3d	; 61
 5e6:	de b7       	in	r29, 0x3e	; 62
 5e8:	8a 83       	std	Y+2, r24	; 0x02
	/*
	 * Reading from pin
	 * 		Pin number 		: 	PORTx_n 	n= 	0:7		x=	A:D
	 */
	// initializing the status of the functions
	uint8 u8Data=DIO_DATA_ERROR;
 5ea:	82 e0       	ldi	r24, 0x02	; 2
 5ec:	89 83       	std	Y+1, r24	; 0x01
	// checking the inputs of the functions
	if (u8PinNum<DIO_PINS_MAX)
 5ee:	8a 81       	ldd	r24, Y+2	; 0x02
 5f0:	80 32       	cpi	r24, 0x20	; 32
 5f2:	08 f0       	brcs	.+2      	; 0x5f6 <DIO_u8ReadPin+0x1a>
 5f4:	76 c0       	rjmp	.+236    	; 0x6e2 <DIO_u8ReadPin+0x106>
	{
		// calculating the port no.
		switch(u8PinNum/8)
 5f6:	8a 81       	ldd	r24, Y+2	; 0x02
 5f8:	86 95       	lsr	r24
 5fa:	86 95       	lsr	r24
 5fc:	86 95       	lsr	r24
 5fe:	28 2f       	mov	r18, r24
 600:	30 e0       	ldi	r19, 0x00	; 0
 602:	3c 83       	std	Y+4, r19	; 0x04
 604:	2b 83       	std	Y+3, r18	; 0x03
 606:	4b 81       	ldd	r20, Y+3	; 0x03
 608:	5c 81       	ldd	r21, Y+4	; 0x04
 60a:	41 30       	cpi	r20, 0x01	; 1
 60c:	51 05       	cpc	r21, r1
 60e:	59 f1       	breq	.+86     	; 0x666 <DIO_u8ReadPin+0x8a>
 610:	8b 81       	ldd	r24, Y+3	; 0x03
 612:	9c 81       	ldd	r25, Y+4	; 0x04
 614:	82 30       	cpi	r24, 0x02	; 2
 616:	91 05       	cpc	r25, r1
 618:	34 f4       	brge	.+12     	; 0x626 <DIO_u8ReadPin+0x4a>
 61a:	2b 81       	ldd	r18, Y+3	; 0x03
 61c:	3c 81       	ldd	r19, Y+4	; 0x04
 61e:	21 15       	cp	r18, r1
 620:	31 05       	cpc	r19, r1
 622:	69 f0       	breq	.+26     	; 0x63e <DIO_u8ReadPin+0x62>
 624:	5c c0       	rjmp	.+184    	; 0x6de <DIO_u8ReadPin+0x102>
 626:	4b 81       	ldd	r20, Y+3	; 0x03
 628:	5c 81       	ldd	r21, Y+4	; 0x04
 62a:	42 30       	cpi	r20, 0x02	; 2
 62c:	51 05       	cpc	r21, r1
 62e:	79 f1       	breq	.+94     	; 0x68e <DIO_u8ReadPin+0xb2>
 630:	8b 81       	ldd	r24, Y+3	; 0x03
 632:	9c 81       	ldd	r25, Y+4	; 0x04
 634:	83 30       	cpi	r24, 0x03	; 3
 636:	91 05       	cpc	r25, r1
 638:	09 f4       	brne	.+2      	; 0x63c <DIO_u8ReadPin+0x60>
 63a:	3d c0       	rjmp	.+122    	; 0x6b6 <DIO_u8ReadPin+0xda>
 63c:	50 c0       	rjmp	.+160    	; 0x6de <DIO_u8ReadPin+0x102>
		{
		case PORT_A : //PORTA
			//Read from pin
			u8Data= Get_Bit(PINA ,u8PinNum % 8);
 63e:	e9 e3       	ldi	r30, 0x39	; 57
 640:	f0 e0       	ldi	r31, 0x00	; 0
 642:	80 81       	ld	r24, Z
 644:	28 2f       	mov	r18, r24
 646:	30 e0       	ldi	r19, 0x00	; 0
 648:	8a 81       	ldd	r24, Y+2	; 0x02
 64a:	88 2f       	mov	r24, r24
 64c:	90 e0       	ldi	r25, 0x00	; 0
 64e:	87 70       	andi	r24, 0x07	; 7
 650:	90 70       	andi	r25, 0x00	; 0
 652:	a9 01       	movw	r20, r18
 654:	02 c0       	rjmp	.+4      	; 0x65a <DIO_u8ReadPin+0x7e>
 656:	55 95       	asr	r21
 658:	47 95       	ror	r20
 65a:	8a 95       	dec	r24
 65c:	e2 f7       	brpl	.-8      	; 0x656 <DIO_u8ReadPin+0x7a>
 65e:	ca 01       	movw	r24, r20
 660:	81 70       	andi	r24, 0x01	; 1
 662:	89 83       	std	Y+1, r24	; 0x01
 664:	3e c0       	rjmp	.+124    	; 0x6e2 <DIO_u8ReadPin+0x106>
			break;
		case PORT_B : //PORTB
			//Read from pin
			u8Data= Get_Bit(PINB ,u8PinNum % 8);
 666:	e6 e3       	ldi	r30, 0x36	; 54
 668:	f0 e0       	ldi	r31, 0x00	; 0
 66a:	80 81       	ld	r24, Z
 66c:	28 2f       	mov	r18, r24
 66e:	30 e0       	ldi	r19, 0x00	; 0
 670:	8a 81       	ldd	r24, Y+2	; 0x02
 672:	88 2f       	mov	r24, r24
 674:	90 e0       	ldi	r25, 0x00	; 0
 676:	87 70       	andi	r24, 0x07	; 7
 678:	90 70       	andi	r25, 0x00	; 0
 67a:	a9 01       	movw	r20, r18
 67c:	02 c0       	rjmp	.+4      	; 0x682 <DIO_u8ReadPin+0xa6>
 67e:	55 95       	asr	r21
 680:	47 95       	ror	r20
 682:	8a 95       	dec	r24
 684:	e2 f7       	brpl	.-8      	; 0x67e <DIO_u8ReadPin+0xa2>
 686:	ca 01       	movw	r24, r20
 688:	81 70       	andi	r24, 0x01	; 1
 68a:	89 83       	std	Y+1, r24	; 0x01
 68c:	2a c0       	rjmp	.+84     	; 0x6e2 <DIO_u8ReadPin+0x106>
			break;
		case PORT_C : //PORTC
			//Read from pin
			u8Data= Get_Bit(PINC ,u8PinNum % 8);
 68e:	e3 e3       	ldi	r30, 0x33	; 51
 690:	f0 e0       	ldi	r31, 0x00	; 0
 692:	80 81       	ld	r24, Z
 694:	28 2f       	mov	r18, r24
 696:	30 e0       	ldi	r19, 0x00	; 0
 698:	8a 81       	ldd	r24, Y+2	; 0x02
 69a:	88 2f       	mov	r24, r24
 69c:	90 e0       	ldi	r25, 0x00	; 0
 69e:	87 70       	andi	r24, 0x07	; 7
 6a0:	90 70       	andi	r25, 0x00	; 0
 6a2:	a9 01       	movw	r20, r18
 6a4:	02 c0       	rjmp	.+4      	; 0x6aa <DIO_u8ReadPin+0xce>
 6a6:	55 95       	asr	r21
 6a8:	47 95       	ror	r20
 6aa:	8a 95       	dec	r24
 6ac:	e2 f7       	brpl	.-8      	; 0x6a6 <DIO_u8ReadPin+0xca>
 6ae:	ca 01       	movw	r24, r20
 6b0:	81 70       	andi	r24, 0x01	; 1
 6b2:	89 83       	std	Y+1, r24	; 0x01
 6b4:	16 c0       	rjmp	.+44     	; 0x6e2 <DIO_u8ReadPin+0x106>
			break;
		case PORT_D : //PORTD
			//Read from pin
			u8Data= Get_Bit(PIND ,u8PinNum % 8);
 6b6:	e0 e3       	ldi	r30, 0x30	; 48
 6b8:	f0 e0       	ldi	r31, 0x00	; 0
 6ba:	80 81       	ld	r24, Z
 6bc:	28 2f       	mov	r18, r24
 6be:	30 e0       	ldi	r19, 0x00	; 0
 6c0:	8a 81       	ldd	r24, Y+2	; 0x02
 6c2:	88 2f       	mov	r24, r24
 6c4:	90 e0       	ldi	r25, 0x00	; 0
 6c6:	87 70       	andi	r24, 0x07	; 7
 6c8:	90 70       	andi	r25, 0x00	; 0
 6ca:	a9 01       	movw	r20, r18
 6cc:	02 c0       	rjmp	.+4      	; 0x6d2 <DIO_u8ReadPin+0xf6>
 6ce:	55 95       	asr	r21
 6d0:	47 95       	ror	r20
 6d2:	8a 95       	dec	r24
 6d4:	e2 f7       	brpl	.-8      	; 0x6ce <DIO_u8ReadPin+0xf2>
 6d6:	ca 01       	movw	r24, r20
 6d8:	81 70       	andi	r24, 0x01	; 1
 6da:	89 83       	std	Y+1, r24	; 0x01
 6dc:	02 c0       	rjmp	.+4      	; 0x6e2 <DIO_u8ReadPin+0x106>
			break;
		default:
			u8Data= DIO_DATA_ERROR;
 6de:	82 e0       	ldi	r24, 0x02	; 2
 6e0:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}
	return u8Data;
 6e2:	89 81       	ldd	r24, Y+1	; 0x01
}
 6e4:	0f 90       	pop	r0
 6e6:	0f 90       	pop	r0
 6e8:	0f 90       	pop	r0
 6ea:	0f 90       	pop	r0
 6ec:	cf 91       	pop	r28
 6ee:	df 91       	pop	r29
 6f0:	08 95       	ret

000006f2 <main>:
 */

#include "TEST/TEST.h"

int main(void)
{
 6f2:	df 93       	push	r29
 6f4:	cf 93       	push	r28
 6f6:	cd b7       	in	r28, 0x3d	; 61
 6f8:	de b7       	in	r29, 0x3e	; 62
	TEST_DIO();
 6fa:	0e 94 36 00 	call	0x6c	; 0x6c <TEST_DIO>
 6fe:	ff cf       	rjmp	.-2      	; 0x6fe <main+0xc>

00000700 <_exit>:
 700:	f8 94       	cli

00000702 <__stop_program>:
 702:	ff cf       	rjmp	.-2      	; 0x702 <__stop_program>
