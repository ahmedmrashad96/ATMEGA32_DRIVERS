
DRIVERS.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000017ec  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000003c  00800060  000017ec  00001880  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000018  0080009c  0080009c  000018bc  2**0
                  ALLOC
  3 .stab         00002514  00000000  00000000  000018bc  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001433  00000000  00000000  00003dd0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 0c 02 	jmp	0x418	; 0x418 <__vector_10>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ec ee       	ldi	r30, 0xEC	; 236
      68:	f7 e1       	ldi	r31, 0x17	; 23
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	ac 39       	cpi	r26, 0x9C	; 156
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	ac e9       	ldi	r26, 0x9C	; 156
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a4 3b       	cpi	r26, 0xB4	; 180
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 cb 0b 	call	0x1796	; 0x1796 <main>
      8a:	0c 94 f4 0b 	jmp	0x17e8	; 0x17e8 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <UART_vidInit>:

#include	"UART_LOCAL.h"

static uint8 UART_INIT =0;
void UART_vidInit(void)
{
      92:	df 93       	push	r29
      94:	cf 93       	push	r28
      96:	00 d0       	rcall	.+0      	; 0x98 <UART_vidInit+0x6>
      98:	cd b7       	in	r28, 0x3d	; 61
      9a:	de b7       	in	r29, 0x3e	; 62
	uint16 	u16Baud;
	if(!UART_INIT)
      9c:	80 91 9c 00 	lds	r24, 0x009C
      a0:	88 23       	and	r24, r24
      a2:	f1 f4       	brne	.+60     	; 0xe0 <UART_vidInit+0x4e>
	{
		UART_INIT =1;
      a4:	81 e0       	ldi	r24, 0x01	; 1
      a6:	80 93 9c 00 	sts	0x009C, r24
		u16Baud =((FREQUENCY/16/UART_BAUDRATE)-1);
      aa:	87 e6       	ldi	r24, 0x67	; 103
      ac:	90 e0       	ldi	r25, 0x00	; 0
      ae:	9a 83       	std	Y+2, r25	; 0x02
      b0:	89 83       	std	Y+1, r24	; 0x01

		UCSRA_R	=(0									<< UCSRA_U2X	)
      b2:	eb e2       	ldi	r30, 0x2B	; 43
      b4:	f0 e0       	ldi	r31, 0x00	; 0
      b6:	10 82       	st	Z, r1
				|(0									<< UCSRA_MPCM   );

		UCSRB_R =(1									<< UCSRB_RXEN   )
      b8:	ea e2       	ldi	r30, 0x2A	; 42
      ba:	f0 e0       	ldi	r31, 0x00	; 0
      bc:	88 e1       	ldi	r24, 0x18	; 24
      be:	80 83       	st	Z, r24
				|( Get_Bit(UART_CHRACTER_LENGTH,2)	<< UCSRB_UCSZ2  )
				|( UART_UDRE_INT					<< UCSRB_UDRIE  )
				|( UART_TXC_INT						<< UCSRB_TXCIE  )
				|( UART_RXC_INT						<< UCSRB_RXCIE  );

		UCSRC_R	=(1									<< UCSRC_URSEL  )
      c0:	e0 e4       	ldi	r30, 0x40	; 64
      c2:	f0 e0       	ldi	r31, 0x00	; 0
      c4:	86 e8       	ldi	r24, 0x86	; 134
      c6:	80 83       	st	Z, r24
				|(0									<< UCSRC_UMSEL  )
				|( UART_PARITY_MODE					<< UCSRC_UPM_S  )
				|( UART_STOP_BITS					<< UCSRC_USBS   )
				|((UART_CHRACTER_LENGTH				<< UCSRC_UCZ_S	)&UCSRC_UCZ_M);

		UBRRL_R	=( u16Baud 	&0xff);
      c8:	e9 e2       	ldi	r30, 0x29	; 41
      ca:	f0 e0       	ldi	r31, 0x00	; 0
      cc:	89 81       	ldd	r24, Y+1	; 0x01
      ce:	80 83       	st	Z, r24
		UBRRH_R	=((u16Baud	>> 8 )& UBRRH_M);
      d0:	e0 e4       	ldi	r30, 0x40	; 64
      d2:	f0 e0       	ldi	r31, 0x00	; 0
      d4:	89 81       	ldd	r24, Y+1	; 0x01
      d6:	9a 81       	ldd	r25, Y+2	; 0x02
      d8:	89 2f       	mov	r24, r25
      da:	99 27       	eor	r25, r25
      dc:	8f 70       	andi	r24, 0x0F	; 15
      de:	80 83       	st	Z, r24
	}
}
      e0:	0f 90       	pop	r0
      e2:	0f 90       	pop	r0
      e4:	cf 91       	pop	r28
      e6:	df 91       	pop	r29
      e8:	08 95       	ret

000000ea <UART_vidSendChar>:
void UART_vidSendChar(uint8 u8Data)
{
      ea:	df 93       	push	r29
      ec:	cf 93       	push	r28
      ee:	0f 92       	push	r0
      f0:	cd b7       	in	r28, 0x3d	; 61
      f2:	de b7       	in	r29, 0x3e	; 62
      f4:	89 83       	std	Y+1, r24	; 0x01
	while (!(UCSRA_R&(1<<UCSRA_UDRE)));
      f6:	eb e2       	ldi	r30, 0x2B	; 43
      f8:	f0 e0       	ldi	r31, 0x00	; 0
      fa:	80 81       	ld	r24, Z
      fc:	88 2f       	mov	r24, r24
      fe:	90 e0       	ldi	r25, 0x00	; 0
     100:	80 72       	andi	r24, 0x20	; 32
     102:	90 70       	andi	r25, 0x00	; 0
     104:	00 97       	sbiw	r24, 0x00	; 0
     106:	b9 f3       	breq	.-18     	; 0xf6 <UART_vidSendChar+0xc>
	UDR_R = u8Data;
     108:	ec e2       	ldi	r30, 0x2C	; 44
     10a:	f0 e0       	ldi	r31, 0x00	; 0
     10c:	89 81       	ldd	r24, Y+1	; 0x01
     10e:	80 83       	st	Z, r24
}
     110:	0f 90       	pop	r0
     112:	cf 91       	pop	r28
     114:	df 91       	pop	r29
     116:	08 95       	ret

00000118 <UART_u8RecieveChar>:

uint8 UART_u8RecieveChar(void)
{
     118:	df 93       	push	r29
     11a:	cf 93       	push	r28
     11c:	cd b7       	in	r28, 0x3d	; 61
     11e:	de b7       	in	r29, 0x3e	; 62
	while (!(UCSRA_R&(1<<UCSRA_RXC)));
     120:	eb e2       	ldi	r30, 0x2B	; 43
     122:	f0 e0       	ldi	r31, 0x00	; 0
     124:	80 81       	ld	r24, Z
     126:	88 23       	and	r24, r24
     128:	dc f7       	brge	.-10     	; 0x120 <UART_u8RecieveChar+0x8>
	return UDR_R ;
     12a:	ec e2       	ldi	r30, 0x2C	; 44
     12c:	f0 e0       	ldi	r31, 0x00	; 0
     12e:	80 81       	ld	r24, Z
}
     130:	cf 91       	pop	r28
     132:	df 91       	pop	r29
     134:	08 95       	ret

00000136 <UART_u8DataReady>:
uint8 UART_u8DataReady()
{
     136:	df 93       	push	r29
     138:	cf 93       	push	r28
     13a:	cd b7       	in	r28, 0x3d	; 61
     13c:	de b7       	in	r29, 0x3e	; 62
	return (UCSRA_R&(1<<UCSRA_RXC));
     13e:	eb e2       	ldi	r30, 0x2B	; 43
     140:	f0 e0       	ldi	r31, 0x00	; 0
     142:	80 81       	ld	r24, Z
     144:	80 78       	andi	r24, 0x80	; 128
}
     146:	cf 91       	pop	r28
     148:	df 91       	pop	r29
     14a:	08 95       	ret

0000014c <UART_u8GetUdr>:
uint8 UART_u8GetUdr()
{
     14c:	df 93       	push	r29
     14e:	cf 93       	push	r28
     150:	cd b7       	in	r28, 0x3d	; 61
     152:	de b7       	in	r29, 0x3e	; 62
	return UDR_R ;
     154:	ec e2       	ldi	r30, 0x2C	; 44
     156:	f0 e0       	ldi	r31, 0x00	; 0
     158:	80 81       	ld	r24, Z
}
     15a:	cf 91       	pop	r28
     15c:	df 91       	pop	r29
     15e:	08 95       	ret

00000160 <UART_vidSendString>:
void UART_vidSendString(uint8 u8Data[], uint8 length)
{
     160:	df 93       	push	r29
     162:	cf 93       	push	r28
     164:	00 d0       	rcall	.+0      	; 0x166 <UART_vidSendString+0x6>
     166:	00 d0       	rcall	.+0      	; 0x168 <UART_vidSendString+0x8>
     168:	cd b7       	in	r28, 0x3d	; 61
     16a:	de b7       	in	r29, 0x3e	; 62
     16c:	9b 83       	std	Y+3, r25	; 0x03
     16e:	8a 83       	std	Y+2, r24	; 0x02
     170:	6c 83       	std	Y+4, r22	; 0x04
	for (uint8 i=0;i< length;i++)
     172:	19 82       	std	Y+1, r1	; 0x01
     174:	0e c0       	rjmp	.+28     	; 0x192 <UART_vidSendString+0x32>
	{
		UART_vidSendChar(u8Data[i]);
     176:	89 81       	ldd	r24, Y+1	; 0x01
     178:	28 2f       	mov	r18, r24
     17a:	30 e0       	ldi	r19, 0x00	; 0
     17c:	8a 81       	ldd	r24, Y+2	; 0x02
     17e:	9b 81       	ldd	r25, Y+3	; 0x03
     180:	fc 01       	movw	r30, r24
     182:	e2 0f       	add	r30, r18
     184:	f3 1f       	adc	r31, r19
     186:	80 81       	ld	r24, Z
     188:	0e 94 75 00 	call	0xea	; 0xea <UART_vidSendChar>
{
	return UDR_R ;
}
void UART_vidSendString(uint8 u8Data[], uint8 length)
{
	for (uint8 i=0;i< length;i++)
     18c:	89 81       	ldd	r24, Y+1	; 0x01
     18e:	8f 5f       	subi	r24, 0xFF	; 255
     190:	89 83       	std	Y+1, r24	; 0x01
     192:	99 81       	ldd	r25, Y+1	; 0x01
     194:	8c 81       	ldd	r24, Y+4	; 0x04
     196:	98 17       	cp	r25, r24
     198:	70 f3       	brcs	.-36     	; 0x176 <UART_vidSendString+0x16>
	{
		UART_vidSendChar(u8Data[i]);
	}
}
     19a:	0f 90       	pop	r0
     19c:	0f 90       	pop	r0
     19e:	0f 90       	pop	r0
     1a0:	0f 90       	pop	r0
     1a2:	cf 91       	pop	r28
     1a4:	df 91       	pop	r29
     1a6:	08 95       	ret

000001a8 <_Debug>:
void _Debug(int8 u8Data[])
{
     1a8:	df 93       	push	r29
     1aa:	cf 93       	push	r28
     1ac:	00 d0       	rcall	.+0      	; 0x1ae <_Debug+0x6>
     1ae:	0f 92       	push	r0
     1b0:	cd b7       	in	r28, 0x3d	; 61
     1b2:	de b7       	in	r29, 0x3e	; 62
     1b4:	9b 83       	std	Y+3, r25	; 0x03
     1b6:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i=0;
     1b8:	19 82       	std	Y+1, r1	; 0x01
	if(!UART_INIT)
     1ba:	80 91 9c 00 	lds	r24, 0x009C
     1be:	88 23       	and	r24, r24
     1c0:	11 f4       	brne	.+4      	; 0x1c6 <_Debug+0x1e>
	{
		UART_vidInit();
     1c2:	0e 94 49 00 	call	0x92	; 0x92 <UART_vidInit>
	}
	do
	{
		UART_vidSendChar(u8Data[i]);
     1c6:	89 81       	ldd	r24, Y+1	; 0x01
     1c8:	28 2f       	mov	r18, r24
     1ca:	30 e0       	ldi	r19, 0x00	; 0
     1cc:	8a 81       	ldd	r24, Y+2	; 0x02
     1ce:	9b 81       	ldd	r25, Y+3	; 0x03
     1d0:	fc 01       	movw	r30, r24
     1d2:	e2 0f       	add	r30, r18
     1d4:	f3 1f       	adc	r31, r19
     1d6:	80 81       	ld	r24, Z
     1d8:	0e 94 75 00 	call	0xea	; 0xea <UART_vidSendChar>
	}
	while (u8Data[++i]);
     1dc:	89 81       	ldd	r24, Y+1	; 0x01
     1de:	8f 5f       	subi	r24, 0xFF	; 255
     1e0:	89 83       	std	Y+1, r24	; 0x01
     1e2:	89 81       	ldd	r24, Y+1	; 0x01
     1e4:	28 2f       	mov	r18, r24
     1e6:	30 e0       	ldi	r19, 0x00	; 0
     1e8:	8a 81       	ldd	r24, Y+2	; 0x02
     1ea:	9b 81       	ldd	r25, Y+3	; 0x03
     1ec:	fc 01       	movw	r30, r24
     1ee:	e2 0f       	add	r30, r18
     1f0:	f3 1f       	adc	r31, r19
     1f2:	80 81       	ld	r24, Z
     1f4:	88 23       	and	r24, r24
     1f6:	39 f7       	brne	.-50     	; 0x1c6 <_Debug+0x1e>
	UART_vidSendChar('\r');
     1f8:	8d e0       	ldi	r24, 0x0D	; 13
     1fa:	0e 94 75 00 	call	0xea	; 0xea <UART_vidSendChar>
}
     1fe:	0f 90       	pop	r0
     200:	0f 90       	pop	r0
     202:	0f 90       	pop	r0
     204:	cf 91       	pop	r28
     206:	df 91       	pop	r29
     208:	08 95       	ret

0000020a <UART_vidRecieveString>:

void UART_vidRecieveString(uint8 u8Data[], uint8* length)
{
     20a:	0f 93       	push	r16
     20c:	1f 93       	push	r17
     20e:	df 93       	push	r29
     210:	cf 93       	push	r28
     212:	00 d0       	rcall	.+0      	; 0x214 <UART_vidRecieveString+0xa>
     214:	00 d0       	rcall	.+0      	; 0x216 <UART_vidRecieveString+0xc>
     216:	cd b7       	in	r28, 0x3d	; 61
     218:	de b7       	in	r29, 0x3e	; 62
     21a:	9a 83       	std	Y+2, r25	; 0x02
     21c:	89 83       	std	Y+1, r24	; 0x01
     21e:	7c 83       	std	Y+4, r23	; 0x04
     220:	6b 83       	std	Y+3, r22	; 0x03
	*length=0;
     222:	eb 81       	ldd	r30, Y+3	; 0x03
     224:	fc 81       	ldd	r31, Y+4	; 0x04
     226:	10 82       	st	Z, r1
	do
	{
		u8Data[*length]=UART_u8RecieveChar();
     228:	eb 81       	ldd	r30, Y+3	; 0x03
     22a:	fc 81       	ldd	r31, Y+4	; 0x04
     22c:	80 81       	ld	r24, Z
     22e:	28 2f       	mov	r18, r24
     230:	30 e0       	ldi	r19, 0x00	; 0
     232:	89 81       	ldd	r24, Y+1	; 0x01
     234:	9a 81       	ldd	r25, Y+2	; 0x02
     236:	8c 01       	movw	r16, r24
     238:	02 0f       	add	r16, r18
     23a:	13 1f       	adc	r17, r19
     23c:	0e 94 8c 00 	call	0x118	; 0x118 <UART_u8RecieveChar>
     240:	f8 01       	movw	r30, r16
     242:	80 83       	st	Z, r24
		(*length)++;
     244:	eb 81       	ldd	r30, Y+3	; 0x03
     246:	fc 81       	ldd	r31, Y+4	; 0x04
     248:	80 81       	ld	r24, Z
     24a:	8f 5f       	subi	r24, 0xFF	; 255
     24c:	eb 81       	ldd	r30, Y+3	; 0x03
     24e:	fc 81       	ldd	r31, Y+4	; 0x04
     250:	80 83       	st	Z, r24
	}
	while(u8Data[(*length)-1]);
     252:	eb 81       	ldd	r30, Y+3	; 0x03
     254:	fc 81       	ldd	r31, Y+4	; 0x04
     256:	80 81       	ld	r24, Z
     258:	88 2f       	mov	r24, r24
     25a:	90 e0       	ldi	r25, 0x00	; 0
     25c:	9c 01       	movw	r18, r24
     25e:	21 50       	subi	r18, 0x01	; 1
     260:	30 40       	sbci	r19, 0x00	; 0
     262:	89 81       	ldd	r24, Y+1	; 0x01
     264:	9a 81       	ldd	r25, Y+2	; 0x02
     266:	fc 01       	movw	r30, r24
     268:	e2 0f       	add	r30, r18
     26a:	f3 1f       	adc	r31, r19
     26c:	80 81       	ld	r24, Z
     26e:	88 23       	and	r24, r24
     270:	d9 f6       	brne	.-74     	; 0x228 <UART_vidRecieveString+0x1e>
}
     272:	0f 90       	pop	r0
     274:	0f 90       	pop	r0
     276:	0f 90       	pop	r0
     278:	0f 90       	pop	r0
     27a:	cf 91       	pop	r28
     27c:	df 91       	pop	r29
     27e:	1f 91       	pop	r17
     280:	0f 91       	pop	r16
     282:	08 95       	ret

00000284 <updatetime>:
#include "TIMER_LOCAL.h"


static uint32 time=0;
void updatetime()
{
     284:	df 93       	push	r29
     286:	cf 93       	push	r28
     288:	cd b7       	in	r28, 0x3d	; 61
     28a:	de b7       	in	r29, 0x3e	; 62
	time++;
     28c:	80 91 9d 00 	lds	r24, 0x009D
     290:	90 91 9e 00 	lds	r25, 0x009E
     294:	a0 91 9f 00 	lds	r26, 0x009F
     298:	b0 91 a0 00 	lds	r27, 0x00A0
     29c:	01 96       	adiw	r24, 0x01	; 1
     29e:	a1 1d       	adc	r26, r1
     2a0:	b1 1d       	adc	r27, r1
     2a2:	80 93 9d 00 	sts	0x009D, r24
     2a6:	90 93 9e 00 	sts	0x009E, r25
     2aa:	a0 93 9f 00 	sts	0x009F, r26
     2ae:	b0 93 a0 00 	sts	0x00A0, r27
}
     2b2:	cf 91       	pop	r28
     2b4:	df 91       	pop	r29
     2b6:	08 95       	ret

000002b8 <millis>:
uint32 millis()
{
     2b8:	df 93       	push	r29
     2ba:	cf 93       	push	r28
     2bc:	cd b7       	in	r28, 0x3d	; 61
     2be:	de b7       	in	r29, 0x3e	; 62
	return time /(TIMER0_TICK_PER_SECOND/1000	);
     2c0:	80 91 9d 00 	lds	r24, 0x009D
     2c4:	90 91 9e 00 	lds	r25, 0x009E
     2c8:	a0 91 9f 00 	lds	r26, 0x009F
     2cc:	b0 91 a0 00 	lds	r27, 0x00A0
     2d0:	2a e0       	ldi	r18, 0x0A	; 10
     2d2:	30 e0       	ldi	r19, 0x00	; 0
     2d4:	40 e0       	ldi	r20, 0x00	; 0
     2d6:	50 e0       	ldi	r21, 0x00	; 0
     2d8:	bc 01       	movw	r22, r24
     2da:	cd 01       	movw	r24, r26
     2dc:	0e 94 d2 0b 	call	0x17a4	; 0x17a4 <__udivmodsi4>
     2e0:	da 01       	movw	r26, r20
     2e2:	c9 01       	movw	r24, r18
}
     2e4:	bc 01       	movw	r22, r24
     2e6:	cd 01       	movw	r24, r26
     2e8:	cf 91       	pop	r28
     2ea:	df 91       	pop	r29
     2ec:	08 95       	ret

000002ee <TIMER_vidInit>:
void TIMER_vidInit()
{
     2ee:	df 93       	push	r29
     2f0:	cf 93       	push	r28
     2f2:	cd b7       	in	r28, 0x3d	; 61
     2f4:	de b7       	in	r29, 0x3e	; 62
	TCCR0_R =(0								<<TCCR0_FOC0_S	)
     2f6:	e3 e5       	ldi	r30, 0x53	; 83
     2f8:	f0 e0       	ldi	r31, 0x00	; 0
     2fa:	8a e0       	ldi	r24, 0x0A	; 10
     2fc:	80 83       	st	Z, r24
			|(Get_Bit(TIMER0_MODE,0)		<<TCCR0_WGM00_S	)
			|(Get_Bit(TIMER0_MODE,1)		<<TCCR0_WGM01_S	)
			|((TIMER0_OC0_MODE				<<TCCR0_COM_S	)&TCCR0_COM_M	)
			|((TIMER0_CLOCK					<<TCCR0_CS_S	)&TCCR0_CS_M	);

	TIMSK_R =(TIMER0_OVERFLOW_INT			<<TIMSK_TOIE0_S	)
     2fe:	e9 e5       	ldi	r30, 0x59	; 89
     300:	f0 e0       	ldi	r31, 0x00	; 0
     302:	82 e0       	ldi	r24, 0x02	; 2
     304:	80 83       	st	Z, r24
			|(TIMER0_OCR_INT				<<TIMSK_OCIE0_S	);

	OCR0_R	= TIMER0_OCR0;
     306:	ec e5       	ldi	r30, 0x5C	; 92
     308:	f0 e0       	ldi	r31, 0x00	; 0
     30a:	87 ec       	ldi	r24, 0xC7	; 199
     30c:	80 83       	st	Z, r24
}
     30e:	cf 91       	pop	r28
     310:	df 91       	pop	r29
     312:	08 95       	ret

00000314 <_delay_ms>:

void _delay_ms(uint16 U16Time)
{
     314:	df 93       	push	r29
     316:	cf 93       	push	r28
     318:	cd b7       	in	r28, 0x3d	; 61
     31a:	de b7       	in	r29, 0x3e	; 62
     31c:	28 97       	sbiw	r28, 0x08	; 8
     31e:	0f b6       	in	r0, 0x3f	; 63
     320:	f8 94       	cli
     322:	de bf       	out	0x3e, r29	; 62
     324:	0f be       	out	0x3f, r0	; 63
     326:	cd bf       	out	0x3d, r28	; 61
     328:	98 87       	std	Y+8, r25	; 0x08
     32a:	8f 83       	std	Y+7, r24	; 0x07
	uint16 U16i;
	uint8 TCT,OCT,TCNT,SS;
	SS = SREG;
     32c:	ef e5       	ldi	r30, 0x5F	; 95
     32e:	f0 e0       	ldi	r31, 0x00	; 0
     330:	80 81       	ld	r24, Z
     332:	89 83       	std	Y+1, r24	; 0x01
	Disable_Global_Interrupt();
     334:	af e5       	ldi	r26, 0x5F	; 95
     336:	b0 e0       	ldi	r27, 0x00	; 0
     338:	ef e5       	ldi	r30, 0x5F	; 95
     33a:	f0 e0       	ldi	r31, 0x00	; 0
     33c:	80 81       	ld	r24, Z
     33e:	8f 77       	andi	r24, 0x7F	; 127
     340:	8c 93       	st	X, r24
	TCT = TCCR0_R;
     342:	e3 e5       	ldi	r30, 0x53	; 83
     344:	f0 e0       	ldi	r31, 0x00	; 0
     346:	80 81       	ld	r24, Z
     348:	8c 83       	std	Y+4, r24	; 0x04
	OCT = OCR0_R;
     34a:	ec e5       	ldi	r30, 0x5C	; 92
     34c:	f0 e0       	ldi	r31, 0x00	; 0
     34e:	80 81       	ld	r24, Z
     350:	8b 83       	std	Y+3, r24	; 0x03
	TCNT=TCNT0_R;
     352:	e2 e5       	ldi	r30, 0x52	; 82
     354:	f0 e0       	ldi	r31, 0x00	; 0
     356:	80 81       	ld	r24, Z
     358:	8a 83       	std	Y+2, r24	; 0x02
	TCCR0_R = (TIMER0_CLOCK_PRESCALAR_256|Get_Bit(TIMER0_MODE_CTC,0)<<TCCR0_WGM00_S|Get_Bit(TIMER0_MODE_CTC,1)<<TCCR0_WGM01_S);
     35a:	e3 e5       	ldi	r30, 0x53	; 83
     35c:	f0 e0       	ldi	r31, 0x00	; 0
     35e:	8c e0       	ldi	r24, 0x0C	; 12
     360:	80 83       	st	Z, r24
	OCR0_R  = 200;
     362:	ec e5       	ldi	r30, 0x5C	; 92
     364:	f0 e0       	ldi	r31, 0x00	; 0
     366:	88 ec       	ldi	r24, 0xC8	; 200
     368:	80 83       	st	Z, r24
	for (U16i=0;U16i<U16Time;U16i++)
     36a:	1e 82       	std	Y+6, r1	; 0x06
     36c:	1d 82       	std	Y+5, r1	; 0x05
     36e:	16 c0       	rjmp	.+44     	; 0x39c <_delay_ms+0x88>
	{
		while(!Get_Bit(TIFR_R,1));
     370:	e8 e5       	ldi	r30, 0x58	; 88
     372:	f0 e0       	ldi	r31, 0x00	; 0
     374:	80 81       	ld	r24, Z
     376:	86 95       	lsr	r24
     378:	88 2f       	mov	r24, r24
     37a:	90 e0       	ldi	r25, 0x00	; 0
     37c:	81 70       	andi	r24, 0x01	; 1
     37e:	90 70       	andi	r25, 0x00	; 0
     380:	00 97       	sbiw	r24, 0x00	; 0
     382:	b1 f3       	breq	.-20     	; 0x370 <_delay_ms+0x5c>
		Set_Bit(TIFR_R,1);
     384:	a8 e5       	ldi	r26, 0x58	; 88
     386:	b0 e0       	ldi	r27, 0x00	; 0
     388:	e8 e5       	ldi	r30, 0x58	; 88
     38a:	f0 e0       	ldi	r31, 0x00	; 0
     38c:	80 81       	ld	r24, Z
     38e:	82 60       	ori	r24, 0x02	; 2
     390:	8c 93       	st	X, r24
	TCT = TCCR0_R;
	OCT = OCR0_R;
	TCNT=TCNT0_R;
	TCCR0_R = (TIMER0_CLOCK_PRESCALAR_256|Get_Bit(TIMER0_MODE_CTC,0)<<TCCR0_WGM00_S|Get_Bit(TIMER0_MODE_CTC,1)<<TCCR0_WGM01_S);
	OCR0_R  = 200;
	for (U16i=0;U16i<U16Time;U16i++)
     392:	8d 81       	ldd	r24, Y+5	; 0x05
     394:	9e 81       	ldd	r25, Y+6	; 0x06
     396:	01 96       	adiw	r24, 0x01	; 1
     398:	9e 83       	std	Y+6, r25	; 0x06
     39a:	8d 83       	std	Y+5, r24	; 0x05
     39c:	2d 81       	ldd	r18, Y+5	; 0x05
     39e:	3e 81       	ldd	r19, Y+6	; 0x06
     3a0:	8f 81       	ldd	r24, Y+7	; 0x07
     3a2:	98 85       	ldd	r25, Y+8	; 0x08
     3a4:	28 17       	cp	r18, r24
     3a6:	39 07       	cpc	r19, r25
     3a8:	18 f3       	brcs	.-58     	; 0x370 <_delay_ms+0x5c>
	{
		while(!Get_Bit(TIFR_R,1));
		Set_Bit(TIFR_R,1);
	}
	TCNT0_R=TCNT;
     3aa:	e2 e5       	ldi	r30, 0x52	; 82
     3ac:	f0 e0       	ldi	r31, 0x00	; 0
     3ae:	8a 81       	ldd	r24, Y+2	; 0x02
     3b0:	80 83       	st	Z, r24
	TCCR0_R = TCT;
     3b2:	e3 e5       	ldi	r30, 0x53	; 83
     3b4:	f0 e0       	ldi	r31, 0x00	; 0
     3b6:	8c 81       	ldd	r24, Y+4	; 0x04
     3b8:	80 83       	st	Z, r24
	OCR0_R = OCT;
     3ba:	ec e5       	ldi	r30, 0x5C	; 92
     3bc:	f0 e0       	ldi	r31, 0x00	; 0
     3be:	8b 81       	ldd	r24, Y+3	; 0x03
     3c0:	80 83       	st	Z, r24
	SREG=SS;
     3c2:	ef e5       	ldi	r30, 0x5F	; 95
     3c4:	f0 e0       	ldi	r31, 0x00	; 0
     3c6:	89 81       	ldd	r24, Y+1	; 0x01
     3c8:	80 83       	st	Z, r24
}
     3ca:	28 96       	adiw	r28, 0x08	; 8
     3cc:	0f b6       	in	r0, 0x3f	; 63
     3ce:	f8 94       	cli
     3d0:	de bf       	out	0x3e, r29	; 62
     3d2:	0f be       	out	0x3f, r0	; 63
     3d4:	cd bf       	out	0x3d, r28	; 61
     3d6:	cf 91       	pop	r28
     3d8:	df 91       	pop	r29
     3da:	08 95       	ret

000003dc <TEST_DIO>:
#include "TEST_LOCAL.h"


#include "../UART/UART.h"
void TEST_DIO(void)
{
     3dc:	df 93       	push	r29
     3de:	cf 93       	push	r28
     3e0:	cd b7       	in	r28, 0x3d	; 61
     3e2:	de b7       	in	r29, 0x3e	; 62
	DIO_vidInit();
     3e4:	0e 94 26 08 	call	0x104c	; 0x104c <DIO_vidInit>
	TIMER_vidInit();
     3e8:	0e 94 77 01 	call	0x2ee	; 0x2ee <TIMER_vidInit>
	Enable_Global_Interrupt();
     3ec:	af e5       	ldi	r26, 0x5F	; 95
     3ee:	b0 e0       	ldi	r27, 0x00	; 0
     3f0:	ef e5       	ldi	r30, 0x5F	; 95
     3f2:	f0 e0       	ldi	r31, 0x00	; 0
     3f4:	80 81       	ld	r24, Z
     3f6:	80 68       	ori	r24, 0x80	; 128
     3f8:	8c 93       	st	X, r24
	LCD_vidInit();
     3fa:	0e 94 bf 07 	call	0xf7e	; 0xf7e <LCD_vidInit>
	SW_vidInit();
     3fe:	0e 94 38 02 	call	0x470	; 0x470 <SW_vidInit>
	_Debug("ana hena");
     402:	80 e6       	ldi	r24, 0x60	; 96
     404:	90 e0       	ldi	r25, 0x00	; 0
     406:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <_Debug>
	_Debug("ana hena tany");
     40a:	89 e6       	ldi	r24, 0x69	; 105
     40c:	90 e0       	ldi	r25, 0x00	; 0
     40e:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <_Debug>
//		case Pushed:
//			LCD_vidString("PUSHED  ");
//			break;
//		}
//	}
}
     412:	cf 91       	pop	r28
     414:	df 91       	pop	r29
     416:	08 95       	ret

00000418 <__vector_10>:

ISR(TIMER0_COMP_VECTOR_NUM)
{
     418:	1f 92       	push	r1
     41a:	0f 92       	push	r0
     41c:	0f b6       	in	r0, 0x3f	; 63
     41e:	0f 92       	push	r0
     420:	11 24       	eor	r1, r1
     422:	2f 93       	push	r18
     424:	3f 93       	push	r19
     426:	4f 93       	push	r20
     428:	5f 93       	push	r21
     42a:	6f 93       	push	r22
     42c:	7f 93       	push	r23
     42e:	8f 93       	push	r24
     430:	9f 93       	push	r25
     432:	af 93       	push	r26
     434:	bf 93       	push	r27
     436:	ef 93       	push	r30
     438:	ff 93       	push	r31
     43a:	df 93       	push	r29
     43c:	cf 93       	push	r28
     43e:	cd b7       	in	r28, 0x3d	; 61
     440:	de b7       	in	r29, 0x3e	; 62
	LCD_vidTask();
     442:	0e 94 da 06 	call	0xdb4	; 0xdb4 <LCD_vidTask>
	SW_vidTask();
     446:	0e 94 88 02 	call	0x510	; 0x510 <SW_vidTask>
}
     44a:	cf 91       	pop	r28
     44c:	df 91       	pop	r29
     44e:	ff 91       	pop	r31
     450:	ef 91       	pop	r30
     452:	bf 91       	pop	r27
     454:	af 91       	pop	r26
     456:	9f 91       	pop	r25
     458:	8f 91       	pop	r24
     45a:	7f 91       	pop	r23
     45c:	6f 91       	pop	r22
     45e:	5f 91       	pop	r21
     460:	4f 91       	pop	r20
     462:	3f 91       	pop	r19
     464:	2f 91       	pop	r18
     466:	0f 90       	pop	r0
     468:	0f be       	out	0x3f, r0	; 63
     46a:	0f 90       	pop	r0
     46c:	1f 90       	pop	r1
     46e:	18 95       	reti

00000470 <SW_vidInit>:
static	uint8 PBN_state[PBN_COUNT] = {SWITCH_STATE_Error};
static	uint8 u8Count=0;


void SW_vidInit(void)
{
     470:	df 93       	push	r29
     472:	cf 93       	push	r28
     474:	cd b7       	in	r28, 0x3d	; 61
     476:	de b7       	in	r29, 0x3e	; 62

}
     478:	cf 91       	pop	r28
     47a:	df 91       	pop	r29
     47c:	08 95       	ret

0000047e <SW_u8AddPBN>:

uint8 SW_u8AddPBN (uint8 u8NewPBN)
{
     47e:	df 93       	push	r29
     480:	cf 93       	push	r28
     482:	00 d0       	rcall	.+0      	; 0x484 <SW_u8AddPBN+0x6>
     484:	00 d0       	rcall	.+0      	; 0x486 <SW_u8AddPBN+0x8>
     486:	cd b7       	in	r28, 0x3d	; 61
     488:	de b7       	in	r29, 0x3e	; 62
     48a:	8b 83       	std	Y+3, r24	; 0x03
	uint8 u8i=0,u8Flag=0;
     48c:	1a 82       	std	Y+2, r1	; 0x02
     48e:	19 82       	std	Y+1, r1	; 0x01
	if (u8Count>=PBN_COUNT)
     490:	80 91 a4 00 	lds	r24, 0x00A4
     494:	83 30       	cpi	r24, 0x03	; 3
     496:	90 f0       	brcs	.+36     	; 0x4bc <SW_u8AddPBN+0x3e>
	{
		u8Flag =1;
     498:	81 e0       	ldi	r24, 0x01	; 1
     49a:	89 83       	std	Y+1, r24	; 0x01
     49c:	0f c0       	rjmp	.+30     	; 0x4bc <SW_u8AddPBN+0x3e>
	}
	for ( ;(u8i<u8Count) && (!u8Flag) ;u8i++)
	{
		if (PBN[u8i]==u8NewPBN)
     49e:	8a 81       	ldd	r24, Y+2	; 0x02
     4a0:	88 2f       	mov	r24, r24
     4a2:	90 e0       	ldi	r25, 0x00	; 0
     4a4:	fc 01       	movw	r30, r24
     4a6:	ef 55       	subi	r30, 0x5F	; 95
     4a8:	ff 4f       	sbci	r31, 0xFF	; 255
     4aa:	90 81       	ld	r25, Z
     4ac:	8b 81       	ldd	r24, Y+3	; 0x03
     4ae:	98 17       	cp	r25, r24
     4b0:	11 f4       	brne	.+4      	; 0x4b6 <SW_u8AddPBN+0x38>
		{
			u8Flag =1;
     4b2:	81 e0       	ldi	r24, 0x01	; 1
     4b4:	89 83       	std	Y+1, r24	; 0x01
	uint8 u8i=0,u8Flag=0;
	if (u8Count>=PBN_COUNT)
	{
		u8Flag =1;
	}
	for ( ;(u8i<u8Count) && (!u8Flag) ;u8i++)
     4b6:	8a 81       	ldd	r24, Y+2	; 0x02
     4b8:	8f 5f       	subi	r24, 0xFF	; 255
     4ba:	8a 83       	std	Y+2, r24	; 0x02
     4bc:	90 91 a4 00 	lds	r25, 0x00A4
     4c0:	8a 81       	ldd	r24, Y+2	; 0x02
     4c2:	89 17       	cp	r24, r25
     4c4:	18 f4       	brcc	.+6      	; 0x4cc <SW_u8AddPBN+0x4e>
     4c6:	89 81       	ldd	r24, Y+1	; 0x01
     4c8:	88 23       	and	r24, r24
     4ca:	49 f3       	breq	.-46     	; 0x49e <SW_u8AddPBN+0x20>
		if (PBN[u8i]==u8NewPBN)
		{
			u8Flag =1;
		}
	}
	if (!u8Flag)
     4cc:	89 81       	ldd	r24, Y+1	; 0x01
     4ce:	88 23       	and	r24, r24
     4d0:	89 f4       	brne	.+34     	; 0x4f4 <SW_u8AddPBN+0x76>
	{
		PBN[u8Count++]=u8NewPBN;
     4d2:	20 91 a4 00 	lds	r18, 0x00A4
     4d6:	82 2f       	mov	r24, r18
     4d8:	90 e0       	ldi	r25, 0x00	; 0
     4da:	fc 01       	movw	r30, r24
     4dc:	ef 55       	subi	r30, 0x5F	; 95
     4de:	ff 4f       	sbci	r31, 0xFF	; 255
     4e0:	8b 81       	ldd	r24, Y+3	; 0x03
     4e2:	80 83       	st	Z, r24
     4e4:	82 2f       	mov	r24, r18
     4e6:	8f 5f       	subi	r24, 0xFF	; 255
     4e8:	80 93 a4 00 	sts	0x00A4, r24
		DIO_u8SetPinDir(u8NewPBN,INPUT_PULLUP);
     4ec:	8b 81       	ldd	r24, Y+3	; 0x03
     4ee:	62 e0       	ldi	r22, 0x02	; 2
     4f0:	0e 94 2d 08 	call	0x105a	; 0x105a <DIO_u8SetPinDir>
	}
	return !u8Flag;
     4f4:	1c 82       	std	Y+4, r1	; 0x04
     4f6:	89 81       	ldd	r24, Y+1	; 0x01
     4f8:	88 23       	and	r24, r24
     4fa:	11 f4       	brne	.+4      	; 0x500 <SW_u8AddPBN+0x82>
     4fc:	81 e0       	ldi	r24, 0x01	; 1
     4fe:	8c 83       	std	Y+4, r24	; 0x04
     500:	8c 81       	ldd	r24, Y+4	; 0x04
}
     502:	0f 90       	pop	r0
     504:	0f 90       	pop	r0
     506:	0f 90       	pop	r0
     508:	0f 90       	pop	r0
     50a:	cf 91       	pop	r28
     50c:	df 91       	pop	r29
     50e:	08 95       	ret

00000510 <SW_vidTask>:

void SW_vidTask(void)
{
     510:	df 93       	push	r29
     512:	cf 93       	push	r28
     514:	00 d0       	rcall	.+0      	; 0x516 <SW_vidTask+0x6>
     516:	cd b7       	in	r28, 0x3d	; 61
     518:	de b7       	in	r29, 0x3e	; 62
	static uint8 counter[PBN_COUNT] = {0},u8i=0;

	if (u8i < u8Count)
     51a:	90 91 a5 00 	lds	r25, 0x00A5
     51e:	80 91 a4 00 	lds	r24, 0x00A4
     522:	98 17       	cp	r25, r24
     524:	08 f0       	brcs	.+2      	; 0x528 <SW_vidTask+0x18>
     526:	ce c0       	rjmp	.+412    	; 0x6c4 <SW_vidTask+0x1b4>
	{
		switch (PBN_state[u8i])
     528:	80 91 a5 00 	lds	r24, 0x00A5
     52c:	88 2f       	mov	r24, r24
     52e:	90 e0       	ldi	r25, 0x00	; 0
     530:	fc 01       	movw	r30, r24
     532:	e9 58       	subi	r30, 0x89	; 137
     534:	ff 4f       	sbci	r31, 0xFF	; 255
     536:	80 81       	ld	r24, Z
     538:	28 2f       	mov	r18, r24
     53a:	30 e0       	ldi	r19, 0x00	; 0
     53c:	3a 83       	std	Y+2, r19	; 0x02
     53e:	29 83       	std	Y+1, r18	; 0x01
     540:	89 81       	ldd	r24, Y+1	; 0x01
     542:	9a 81       	ldd	r25, Y+2	; 0x02
     544:	81 30       	cpi	r24, 0x01	; 1
     546:	91 05       	cpc	r25, r1
     548:	09 f4       	brne	.+2      	; 0x54c <SW_vidTask+0x3c>
     54a:	63 c0       	rjmp	.+198    	; 0x612 <SW_vidTask+0x102>
     54c:	29 81       	ldd	r18, Y+1	; 0x01
     54e:	3a 81       	ldd	r19, Y+2	; 0x02
     550:	22 30       	cpi	r18, 0x02	; 2
     552:	31 05       	cpc	r19, r1
     554:	2c f4       	brge	.+10     	; 0x560 <SW_vidTask+0x50>
     556:	89 81       	ldd	r24, Y+1	; 0x01
     558:	9a 81       	ldd	r25, Y+2	; 0x02
     55a:	00 97       	sbiw	r24, 0x00	; 0
     55c:	69 f0       	breq	.+26     	; 0x578 <SW_vidTask+0x68>
     55e:	a4 c0       	rjmp	.+328    	; 0x6a8 <SW_vidTask+0x198>
     560:	29 81       	ldd	r18, Y+1	; 0x01
     562:	3a 81       	ldd	r19, Y+2	; 0x02
     564:	22 30       	cpi	r18, 0x02	; 2
     566:	31 05       	cpc	r19, r1
     568:	09 f4       	brne	.+2      	; 0x56c <SW_vidTask+0x5c>
     56a:	6a c0       	rjmp	.+212    	; 0x640 <SW_vidTask+0x130>
     56c:	89 81       	ldd	r24, Y+1	; 0x01
     56e:	9a 81       	ldd	r25, Y+2	; 0x02
     570:	83 30       	cpi	r24, 0x03	; 3
     572:	91 05       	cpc	r25, r1
     574:	c1 f0       	breq	.+48     	; 0x5a6 <SW_vidTask+0x96>
     576:	98 c0       	rjmp	.+304    	; 0x6a8 <SW_vidTask+0x198>
		{
		case Released 	:
			if (DIO_u8ReadPin(PBN[u8i])==LOW)
     578:	80 91 a5 00 	lds	r24, 0x00A5
     57c:	88 2f       	mov	r24, r24
     57e:	90 e0       	ldi	r25, 0x00	; 0
     580:	fc 01       	movw	r30, r24
     582:	ef 55       	subi	r30, 0x5F	; 95
     584:	ff 4f       	sbci	r31, 0xFF	; 255
     586:	80 81       	ld	r24, Z
     588:	0e 94 b9 0a 	call	0x1572	; 0x1572 <DIO_u8ReadPin>
     58c:	88 23       	and	r24, r24
     58e:	09 f0       	breq	.+2      	; 0x592 <SW_vidTask+0x82>
     590:	93 c0       	rjmp	.+294    	; 0x6b8 <SW_vidTask+0x1a8>
				PBN_state[u8i] = PrePushed;
     592:	80 91 a5 00 	lds	r24, 0x00A5
     596:	88 2f       	mov	r24, r24
     598:	90 e0       	ldi	r25, 0x00	; 0
     59a:	fc 01       	movw	r30, r24
     59c:	e9 58       	subi	r30, 0x89	; 137
     59e:	ff 4f       	sbci	r31, 0xFF	; 255
     5a0:	83 e0       	ldi	r24, 0x03	; 3
     5a2:	80 83       	st	Z, r24
     5a4:	89 c0       	rjmp	.+274    	; 0x6b8 <SW_vidTask+0x1a8>
			break;
		case PrePushed	:
			if (DIO_u8ReadPin(PBN[u8i])==LOW)
     5a6:	80 91 a5 00 	lds	r24, 0x00A5
     5aa:	88 2f       	mov	r24, r24
     5ac:	90 e0       	ldi	r25, 0x00	; 0
     5ae:	fc 01       	movw	r30, r24
     5b0:	ef 55       	subi	r30, 0x5F	; 95
     5b2:	ff 4f       	sbci	r31, 0xFF	; 255
     5b4:	80 81       	ld	r24, Z
     5b6:	0e 94 b9 0a 	call	0x1572	; 0x1572 <DIO_u8ReadPin>
     5ba:	88 23       	and	r24, r24
     5bc:	69 f4       	brne	.+26     	; 0x5d8 <SW_vidTask+0xc8>
				counter[u8i]++;
     5be:	80 91 a5 00 	lds	r24, 0x00A5
     5c2:	28 2f       	mov	r18, r24
     5c4:	30 e0       	ldi	r19, 0x00	; 0
     5c6:	f9 01       	movw	r30, r18
     5c8:	ea 55       	subi	r30, 0x5A	; 90
     5ca:	ff 4f       	sbci	r31, 0xFF	; 255
     5cc:	80 81       	ld	r24, Z
     5ce:	8f 5f       	subi	r24, 0xFF	; 255
     5d0:	f9 01       	movw	r30, r18
     5d2:	ea 55       	subi	r30, 0x5A	; 90
     5d4:	ff 4f       	sbci	r31, 0xFF	; 255
     5d6:	80 83       	st	Z, r24
			if (counter[u8i]>=SENS_COUNT)
     5d8:	80 91 a5 00 	lds	r24, 0x00A5
     5dc:	88 2f       	mov	r24, r24
     5de:	90 e0       	ldi	r25, 0x00	; 0
     5e0:	fc 01       	movw	r30, r24
     5e2:	ea 55       	subi	r30, 0x5A	; 90
     5e4:	ff 4f       	sbci	r31, 0xFF	; 255
     5e6:	80 81       	ld	r24, Z
     5e8:	83 30       	cpi	r24, 0x03	; 3
     5ea:	08 f4       	brcc	.+2      	; 0x5ee <SW_vidTask+0xde>
     5ec:	65 c0       	rjmp	.+202    	; 0x6b8 <SW_vidTask+0x1a8>
			{
				counter[u8i]=0;
     5ee:	80 91 a5 00 	lds	r24, 0x00A5
     5f2:	88 2f       	mov	r24, r24
     5f4:	90 e0       	ldi	r25, 0x00	; 0
     5f6:	fc 01       	movw	r30, r24
     5f8:	ea 55       	subi	r30, 0x5A	; 90
     5fa:	ff 4f       	sbci	r31, 0xFF	; 255
     5fc:	10 82       	st	Z, r1
				PBN_state[u8i] = Pushed;
     5fe:	80 91 a5 00 	lds	r24, 0x00A5
     602:	88 2f       	mov	r24, r24
     604:	90 e0       	ldi	r25, 0x00	; 0
     606:	fc 01       	movw	r30, r24
     608:	e9 58       	subi	r30, 0x89	; 137
     60a:	ff 4f       	sbci	r31, 0xFF	; 255
     60c:	81 e0       	ldi	r24, 0x01	; 1
     60e:	80 83       	st	Z, r24
     610:	53 c0       	rjmp	.+166    	; 0x6b8 <SW_vidTask+0x1a8>
			}
			break;
		case Pushed		:
			if (DIO_u8ReadPin(PBN[u8i])==HIGH)
     612:	80 91 a5 00 	lds	r24, 0x00A5
     616:	88 2f       	mov	r24, r24
     618:	90 e0       	ldi	r25, 0x00	; 0
     61a:	fc 01       	movw	r30, r24
     61c:	ef 55       	subi	r30, 0x5F	; 95
     61e:	ff 4f       	sbci	r31, 0xFF	; 255
     620:	80 81       	ld	r24, Z
     622:	0e 94 b9 0a 	call	0x1572	; 0x1572 <DIO_u8ReadPin>
     626:	81 30       	cpi	r24, 0x01	; 1
     628:	09 f0       	breq	.+2      	; 0x62c <SW_vidTask+0x11c>
     62a:	46 c0       	rjmp	.+140    	; 0x6b8 <SW_vidTask+0x1a8>
				PBN_state[u8i] = PreReleased;
     62c:	80 91 a5 00 	lds	r24, 0x00A5
     630:	88 2f       	mov	r24, r24
     632:	90 e0       	ldi	r25, 0x00	; 0
     634:	fc 01       	movw	r30, r24
     636:	e9 58       	subi	r30, 0x89	; 137
     638:	ff 4f       	sbci	r31, 0xFF	; 255
     63a:	82 e0       	ldi	r24, 0x02	; 2
     63c:	80 83       	st	Z, r24
     63e:	3c c0       	rjmp	.+120    	; 0x6b8 <SW_vidTask+0x1a8>
			break;
		case PreReleased:
			if (DIO_u8ReadPin(PBN[u8i])==HIGH)
     640:	80 91 a5 00 	lds	r24, 0x00A5
     644:	88 2f       	mov	r24, r24
     646:	90 e0       	ldi	r25, 0x00	; 0
     648:	fc 01       	movw	r30, r24
     64a:	ef 55       	subi	r30, 0x5F	; 95
     64c:	ff 4f       	sbci	r31, 0xFF	; 255
     64e:	80 81       	ld	r24, Z
     650:	0e 94 b9 0a 	call	0x1572	; 0x1572 <DIO_u8ReadPin>
     654:	81 30       	cpi	r24, 0x01	; 1
     656:	69 f4       	brne	.+26     	; 0x672 <SW_vidTask+0x162>
				counter[u8i]++;
     658:	80 91 a5 00 	lds	r24, 0x00A5
     65c:	28 2f       	mov	r18, r24
     65e:	30 e0       	ldi	r19, 0x00	; 0
     660:	f9 01       	movw	r30, r18
     662:	ea 55       	subi	r30, 0x5A	; 90
     664:	ff 4f       	sbci	r31, 0xFF	; 255
     666:	80 81       	ld	r24, Z
     668:	8f 5f       	subi	r24, 0xFF	; 255
     66a:	f9 01       	movw	r30, r18
     66c:	ea 55       	subi	r30, 0x5A	; 90
     66e:	ff 4f       	sbci	r31, 0xFF	; 255
     670:	80 83       	st	Z, r24
			if (counter[u8i]>=SENS_COUNT)
     672:	80 91 a5 00 	lds	r24, 0x00A5
     676:	88 2f       	mov	r24, r24
     678:	90 e0       	ldi	r25, 0x00	; 0
     67a:	fc 01       	movw	r30, r24
     67c:	ea 55       	subi	r30, 0x5A	; 90
     67e:	ff 4f       	sbci	r31, 0xFF	; 255
     680:	80 81       	ld	r24, Z
     682:	83 30       	cpi	r24, 0x03	; 3
     684:	c8 f0       	brcs	.+50     	; 0x6b8 <SW_vidTask+0x1a8>
			{
				counter[u8i]=0;
     686:	80 91 a5 00 	lds	r24, 0x00A5
     68a:	88 2f       	mov	r24, r24
     68c:	90 e0       	ldi	r25, 0x00	; 0
     68e:	fc 01       	movw	r30, r24
     690:	ea 55       	subi	r30, 0x5A	; 90
     692:	ff 4f       	sbci	r31, 0xFF	; 255
     694:	10 82       	st	Z, r1
				PBN_state[u8i] = Released;
     696:	80 91 a5 00 	lds	r24, 0x00A5
     69a:	88 2f       	mov	r24, r24
     69c:	90 e0       	ldi	r25, 0x00	; 0
     69e:	fc 01       	movw	r30, r24
     6a0:	e9 58       	subi	r30, 0x89	; 137
     6a2:	ff 4f       	sbci	r31, 0xFF	; 255
     6a4:	10 82       	st	Z, r1
     6a6:	08 c0       	rjmp	.+16     	; 0x6b8 <SW_vidTask+0x1a8>
			}
			break;
		default:
			PBN_state[u8i] = Released;
     6a8:	80 91 a5 00 	lds	r24, 0x00A5
     6ac:	88 2f       	mov	r24, r24
     6ae:	90 e0       	ldi	r25, 0x00	; 0
     6b0:	fc 01       	movw	r30, r24
     6b2:	e9 58       	subi	r30, 0x89	; 137
     6b4:	ff 4f       	sbci	r31, 0xFF	; 255
     6b6:	10 82       	st	Z, r1
			break;
		}
		u8i++;
     6b8:	80 91 a5 00 	lds	r24, 0x00A5
     6bc:	8f 5f       	subi	r24, 0xFF	; 255
     6be:	80 93 a5 00 	sts	0x00A5, r24
     6c2:	02 c0       	rjmp	.+4      	; 0x6c8 <SW_vidTask+0x1b8>
	}
	else
	{
		u8i=0;
     6c4:	10 92 a5 00 	sts	0x00A5, r1
	}
}
     6c8:	0f 90       	pop	r0
     6ca:	0f 90       	pop	r0
     6cc:	cf 91       	pop	r28
     6ce:	df 91       	pop	r29
     6d0:	08 95       	ret

000006d2 <SW_u8Read>:

uint8 SW_u8Read(uint8 u8PBN)
{
     6d2:	df 93       	push	r29
     6d4:	cf 93       	push	r28
     6d6:	00 d0       	rcall	.+0      	; 0x6d8 <SW_u8Read+0x6>
     6d8:	0f 92       	push	r0
     6da:	cd b7       	in	r28, 0x3d	; 61
     6dc:	de b7       	in	r29, 0x3e	; 62
     6de:	8b 83       	std	Y+3, r24	; 0x03
	uint8 u8i = 0,state=SWITCH_STATE_Error;
     6e0:	1a 82       	std	Y+2, r1	; 0x02
     6e2:	84 e0       	ldi	r24, 0x04	; 4
     6e4:	89 83       	std	Y+1, r24	; 0x01
     6e6:	15 c0       	rjmp	.+42     	; 0x712 <SW_u8Read+0x40>
	for( ;(u8i<u8Count)&&(state==SWITCH_STATE_Error);u8i++)
	{
		if (PBN[u8i]==u8PBN)
     6e8:	8a 81       	ldd	r24, Y+2	; 0x02
     6ea:	88 2f       	mov	r24, r24
     6ec:	90 e0       	ldi	r25, 0x00	; 0
     6ee:	fc 01       	movw	r30, r24
     6f0:	ef 55       	subi	r30, 0x5F	; 95
     6f2:	ff 4f       	sbci	r31, 0xFF	; 255
     6f4:	90 81       	ld	r25, Z
     6f6:	8b 81       	ldd	r24, Y+3	; 0x03
     6f8:	98 17       	cp	r25, r24
     6fa:	41 f4       	brne	.+16     	; 0x70c <SW_u8Read+0x3a>
		{
			state =PBN_state[u8i];
     6fc:	8a 81       	ldd	r24, Y+2	; 0x02
     6fe:	88 2f       	mov	r24, r24
     700:	90 e0       	ldi	r25, 0x00	; 0
     702:	fc 01       	movw	r30, r24
     704:	e9 58       	subi	r30, 0x89	; 137
     706:	ff 4f       	sbci	r31, 0xFF	; 255
     708:	80 81       	ld	r24, Z
     70a:	89 83       	std	Y+1, r24	; 0x01
}

uint8 SW_u8Read(uint8 u8PBN)
{
	uint8 u8i = 0,state=SWITCH_STATE_Error;
	for( ;(u8i<u8Count)&&(state==SWITCH_STATE_Error);u8i++)
     70c:	8a 81       	ldd	r24, Y+2	; 0x02
     70e:	8f 5f       	subi	r24, 0xFF	; 255
     710:	8a 83       	std	Y+2, r24	; 0x02
     712:	90 91 a4 00 	lds	r25, 0x00A4
     716:	8a 81       	ldd	r24, Y+2	; 0x02
     718:	89 17       	cp	r24, r25
     71a:	18 f4       	brcc	.+6      	; 0x722 <SW_u8Read+0x50>
     71c:	89 81       	ldd	r24, Y+1	; 0x01
     71e:	84 30       	cpi	r24, 0x04	; 4
     720:	19 f3       	breq	.-58     	; 0x6e8 <SW_u8Read+0x16>
		if (PBN[u8i]==u8PBN)
		{
			state =PBN_state[u8i];
		}
	}
	return state;
     722:	89 81       	ldd	r24, Y+1	; 0x01
}
     724:	0f 90       	pop	r0
     726:	0f 90       	pop	r0
     728:	0f 90       	pop	r0
     72a:	cf 91       	pop	r28
     72c:	df 91       	pop	r29
     72e:	08 95       	ret

00000730 <LCD_u8WriteCommand>:
static int8 LCD_LINE[2][17]={"                ",
							 "                "};
static uint8 u8x =0,u8y=0,u8LCDState=0;

static uint8 LCD_u8WriteCommand(uint8 u8Command)
{
     730:	df 93       	push	r29
     732:	cf 93       	push	r28
     734:	00 d0       	rcall	.+0      	; 0x736 <LCD_u8WriteCommand+0x6>
     736:	00 d0       	rcall	.+0      	; 0x738 <LCD_u8WriteCommand+0x8>
     738:	cd b7       	in	r28, 0x3d	; 61
     73a:	de b7       	in	r29, 0x3e	; 62
     73c:	89 83       	std	Y+1, r24	; 0x01
	static uint8 u8LCDwritetime=0,LCD_Command_State=0;
	switch(LCD_Command_State)
     73e:	80 91 ac 00 	lds	r24, 0x00AC
     742:	28 2f       	mov	r18, r24
     744:	30 e0       	ldi	r19, 0x00	; 0
     746:	3c 83       	std	Y+4, r19	; 0x04
     748:	2b 83       	std	Y+3, r18	; 0x03
     74a:	8b 81       	ldd	r24, Y+3	; 0x03
     74c:	9c 81       	ldd	r25, Y+4	; 0x04
     74e:	84 30       	cpi	r24, 0x04	; 4
     750:	91 05       	cpc	r25, r1
     752:	09 f4       	brne	.+2      	; 0x756 <LCD_u8WriteCommand+0x26>
     754:	a4 c0       	rjmp	.+328    	; 0x89e <__stack+0x3f>
     756:	2b 81       	ldd	r18, Y+3	; 0x03
     758:	3c 81       	ldd	r19, Y+4	; 0x04
     75a:	25 30       	cpi	r18, 0x05	; 5
     75c:	31 05       	cpc	r19, r1
     75e:	ec f4       	brge	.+58     	; 0x79a <LCD_u8WriteCommand+0x6a>
     760:	8b 81       	ldd	r24, Y+3	; 0x03
     762:	9c 81       	ldd	r25, Y+4	; 0x04
     764:	81 30       	cpi	r24, 0x01	; 1
     766:	91 05       	cpc	r25, r1
     768:	09 f4       	brne	.+2      	; 0x76c <LCD_u8WriteCommand+0x3c>
     76a:	6b c0       	rjmp	.+214    	; 0x842 <LCD_u8WriteCommand+0x112>
     76c:	2b 81       	ldd	r18, Y+3	; 0x03
     76e:	3c 81       	ldd	r19, Y+4	; 0x04
     770:	22 30       	cpi	r18, 0x02	; 2
     772:	31 05       	cpc	r19, r1
     774:	2c f4       	brge	.+10     	; 0x780 <LCD_u8WriteCommand+0x50>
     776:	8b 81       	ldd	r24, Y+3	; 0x03
     778:	9c 81       	ldd	r25, Y+4	; 0x04
     77a:	00 97       	sbiw	r24, 0x00	; 0
     77c:	39 f1       	breq	.+78     	; 0x7cc <LCD_u8WriteCommand+0x9c>
     77e:	f4 c0       	rjmp	.+488    	; 0x968 <__stack+0x109>
     780:	2b 81       	ldd	r18, Y+3	; 0x03
     782:	3c 81       	ldd	r19, Y+4	; 0x04
     784:	22 30       	cpi	r18, 0x02	; 2
     786:	31 05       	cpc	r19, r1
     788:	09 f4       	brne	.+2      	; 0x78c <LCD_u8WriteCommand+0x5c>
     78a:	6d c0       	rjmp	.+218    	; 0x866 <__stack+0x7>
     78c:	8b 81       	ldd	r24, Y+3	; 0x03
     78e:	9c 81       	ldd	r25, Y+4	; 0x04
     790:	83 30       	cpi	r24, 0x03	; 3
     792:	91 05       	cpc	r25, r1
     794:	09 f4       	brne	.+2      	; 0x798 <LCD_u8WriteCommand+0x68>
     796:	71 c0       	rjmp	.+226    	; 0x87a <__stack+0x1b>
     798:	e7 c0       	rjmp	.+462    	; 0x968 <__stack+0x109>
     79a:	2b 81       	ldd	r18, Y+3	; 0x03
     79c:	3c 81       	ldd	r19, Y+4	; 0x04
     79e:	26 30       	cpi	r18, 0x06	; 6
     7a0:	31 05       	cpc	r19, r1
     7a2:	09 f4       	brne	.+2      	; 0x7a6 <LCD_u8WriteCommand+0x76>
     7a4:	b5 c0       	rjmp	.+362    	; 0x910 <__stack+0xb1>
     7a6:	8b 81       	ldd	r24, Y+3	; 0x03
     7a8:	9c 81       	ldd	r25, Y+4	; 0x04
     7aa:	86 30       	cpi	r24, 0x06	; 6
     7ac:	91 05       	cpc	r25, r1
     7ae:	0c f4       	brge	.+2      	; 0x7b2 <LCD_u8WriteCommand+0x82>
     7b0:	83 c0       	rjmp	.+262    	; 0x8b8 <__stack+0x59>
     7b2:	2b 81       	ldd	r18, Y+3	; 0x03
     7b4:	3c 81       	ldd	r19, Y+4	; 0x04
     7b6:	27 30       	cpi	r18, 0x07	; 7
     7b8:	31 05       	cpc	r19, r1
     7ba:	09 f4       	brne	.+2      	; 0x7be <LCD_u8WriteCommand+0x8e>
     7bc:	ba c0       	rjmp	.+372    	; 0x932 <__stack+0xd3>
     7be:	8b 81       	ldd	r24, Y+3	; 0x03
     7c0:	9c 81       	ldd	r25, Y+4	; 0x04
     7c2:	88 30       	cpi	r24, 0x08	; 8
     7c4:	91 05       	cpc	r25, r1
     7c6:	09 f4       	brne	.+2      	; 0x7ca <LCD_u8WriteCommand+0x9a>
     7c8:	be c0       	rjmp	.+380    	; 0x946 <__stack+0xe7>
     7ca:	ce c0       	rjmp	.+412    	; 0x968 <__stack+0x109>
	{
	case 0:
		//RS 	= 0
		DIO_u8WritePin(LCD_RS,LOW);
     7cc:	89 e0       	ldi	r24, 0x09	; 9
     7ce:	60 e0       	ldi	r22, 0x00	; 0
     7d0:	0e 94 c9 09 	call	0x1392	; 0x1392 <DIO_u8WritePin>
		//R/W 	= 0
		DIO_u8WritePin(LCD_RW,LOW);
     7d4:	8a e0       	ldi	r24, 0x0A	; 10
     7d6:	60 e0       	ldi	r22, 0x00	; 0
     7d8:	0e 94 c9 09 	call	0x1392	; 0x1392 <DIO_u8WritePin>
		//Send data

		//Write high Niple
		DIO_u8WritePin(LCD_D7,Get_Bit(u8Command,7));
     7dc:	89 81       	ldd	r24, Y+1	; 0x01
     7de:	98 2f       	mov	r25, r24
     7e0:	99 1f       	adc	r25, r25
     7e2:	99 27       	eor	r25, r25
     7e4:	99 1f       	adc	r25, r25
     7e6:	87 e0       	ldi	r24, 0x07	; 7
     7e8:	69 2f       	mov	r22, r25
     7ea:	0e 94 c9 09 	call	0x1392	; 0x1392 <DIO_u8WritePin>
		DIO_u8WritePin(LCD_D6,Get_Bit(u8Command,6));
     7ee:	89 81       	ldd	r24, Y+1	; 0x01
     7f0:	82 95       	swap	r24
     7f2:	86 95       	lsr	r24
     7f4:	86 95       	lsr	r24
     7f6:	83 70       	andi	r24, 0x03	; 3
     7f8:	98 2f       	mov	r25, r24
     7fa:	91 70       	andi	r25, 0x01	; 1
     7fc:	86 e0       	ldi	r24, 0x06	; 6
     7fe:	69 2f       	mov	r22, r25
     800:	0e 94 c9 09 	call	0x1392	; 0x1392 <DIO_u8WritePin>
		DIO_u8WritePin(LCD_D5,Get_Bit(u8Command,5));
     804:	89 81       	ldd	r24, Y+1	; 0x01
     806:	82 95       	swap	r24
     808:	86 95       	lsr	r24
     80a:	87 70       	andi	r24, 0x07	; 7
     80c:	98 2f       	mov	r25, r24
     80e:	91 70       	andi	r25, 0x01	; 1
     810:	85 e0       	ldi	r24, 0x05	; 5
     812:	69 2f       	mov	r22, r25
     814:	0e 94 c9 09 	call	0x1392	; 0x1392 <DIO_u8WritePin>
		DIO_u8WritePin(LCD_D4,Get_Bit(u8Command,4));
     818:	89 81       	ldd	r24, Y+1	; 0x01
     81a:	82 95       	swap	r24
     81c:	8f 70       	andi	r24, 0x0F	; 15
     81e:	98 2f       	mov	r25, r24
     820:	91 70       	andi	r25, 0x01	; 1
     822:	84 e0       	ldi	r24, 0x04	; 4
     824:	69 2f       	mov	r22, r25
     826:	0e 94 c9 09 	call	0x1392	; 0x1392 <DIO_u8WritePin>

		//set enable
		DIO_u8WritePin(LCD_E,HIGH);
     82a:	8b e0       	ldi	r24, 0x0B	; 11
     82c:	61 e0       	ldi	r22, 0x01	; 1
     82e:	0e 94 c9 09 	call	0x1392	; 0x1392 <DIO_u8WritePin>
		//Next State
		LCD_Command_State++;
     832:	80 91 ac 00 	lds	r24, 0x00AC
     836:	8f 5f       	subi	r24, 0xFF	; 255
     838:	80 93 ac 00 	sts	0x00AC, r24
		u8LCDwritetime = 0;
     83c:	10 92 ad 00 	sts	0x00AD, r1
     840:	95 c0       	rjmp	.+298    	; 0x96c <__stack+0x10d>
		break;
	case 1:
		//delay 5 ms
		if(++u8LCDwritetime>5)
     842:	80 91 ad 00 	lds	r24, 0x00AD
     846:	8f 5f       	subi	r24, 0xFF	; 255
     848:	80 93 ad 00 	sts	0x00AD, r24
     84c:	80 91 ad 00 	lds	r24, 0x00AD
     850:	86 30       	cpi	r24, 0x06	; 6
     852:	08 f4       	brcc	.+2      	; 0x856 <LCD_u8WriteCommand+0x126>
     854:	8b c0       	rjmp	.+278    	; 0x96c <__stack+0x10d>
		{
			u8LCDwritetime=0;
     856:	10 92 ad 00 	sts	0x00AD, r1
			LCD_Command_State++;
     85a:	80 91 ac 00 	lds	r24, 0x00AC
     85e:	8f 5f       	subi	r24, 0xFF	; 255
     860:	80 93 ac 00 	sts	0x00AC, r24
     864:	83 c0       	rjmp	.+262    	; 0x96c <__stack+0x10d>
		}
		break;
	case 2:
		//clear enable
		DIO_u8WritePin(LCD_E,LOW);
     866:	8b e0       	ldi	r24, 0x0B	; 11
     868:	60 e0       	ldi	r22, 0x00	; 0
     86a:	0e 94 c9 09 	call	0x1392	; 0x1392 <DIO_u8WritePin>
		//Next State
		LCD_Command_State++;
     86e:	80 91 ac 00 	lds	r24, 0x00AC
     872:	8f 5f       	subi	r24, 0xFF	; 255
     874:	80 93 ac 00 	sts	0x00AC, r24
     878:	79 c0       	rjmp	.+242    	; 0x96c <__stack+0x10d>
		break;
	case 3:
		//delay 5ms
		if(++u8LCDwritetime>5)
     87a:	80 91 ad 00 	lds	r24, 0x00AD
     87e:	8f 5f       	subi	r24, 0xFF	; 255
     880:	80 93 ad 00 	sts	0x00AD, r24
     884:	80 91 ad 00 	lds	r24, 0x00AD
     888:	86 30       	cpi	r24, 0x06	; 6
     88a:	08 f4       	brcc	.+2      	; 0x88e <__stack+0x2f>
     88c:	6f c0       	rjmp	.+222    	; 0x96c <__stack+0x10d>
		{
			u8LCDwritetime=0;
     88e:	10 92 ad 00 	sts	0x00AD, r1
			LCD_Command_State++;
     892:	80 91 ac 00 	lds	r24, 0x00AC
     896:	8f 5f       	subi	r24, 0xFF	; 255
     898:	80 93 ac 00 	sts	0x00AC, r24
     89c:	67 c0       	rjmp	.+206    	; 0x96c <__stack+0x10d>
		}
		break;
	case 4:
		if(u8Command!=0x20)
     89e:	89 81       	ldd	r24, Y+1	; 0x01
     8a0:	80 32       	cpi	r24, 0x20	; 32
     8a2:	31 f0       	breq	.+12     	; 0x8b0 <__stack+0x51>
		{
			//Next State
			LCD_Command_State++;
     8a4:	80 91 ac 00 	lds	r24, 0x00AC
     8a8:	8f 5f       	subi	r24, 0xFF	; 255
     8aa:	80 93 ac 00 	sts	0x00AC, r24
     8ae:	5e c0       	rjmp	.+188    	; 0x96c <__stack+0x10d>
		}
		else
		{
			LCD_Command_State=9;
     8b0:	89 e0       	ldi	r24, 0x09	; 9
     8b2:	80 93 ac 00 	sts	0x00AC, r24
     8b6:	5a c0       	rjmp	.+180    	; 0x96c <__stack+0x10d>
		}
		break;
	case 5:

		//Write Low Niple
		DIO_u8WritePin(LCD_D7,Get_Bit(u8Command,3));
     8b8:	89 81       	ldd	r24, Y+1	; 0x01
     8ba:	86 95       	lsr	r24
     8bc:	86 95       	lsr	r24
     8be:	86 95       	lsr	r24
     8c0:	98 2f       	mov	r25, r24
     8c2:	91 70       	andi	r25, 0x01	; 1
     8c4:	87 e0       	ldi	r24, 0x07	; 7
     8c6:	69 2f       	mov	r22, r25
     8c8:	0e 94 c9 09 	call	0x1392	; 0x1392 <DIO_u8WritePin>
		DIO_u8WritePin(LCD_D6,Get_Bit(u8Command,2));
     8cc:	89 81       	ldd	r24, Y+1	; 0x01
     8ce:	86 95       	lsr	r24
     8d0:	86 95       	lsr	r24
     8d2:	98 2f       	mov	r25, r24
     8d4:	91 70       	andi	r25, 0x01	; 1
     8d6:	86 e0       	ldi	r24, 0x06	; 6
     8d8:	69 2f       	mov	r22, r25
     8da:	0e 94 c9 09 	call	0x1392	; 0x1392 <DIO_u8WritePin>
		DIO_u8WritePin(LCD_D5,Get_Bit(u8Command,1));
     8de:	89 81       	ldd	r24, Y+1	; 0x01
     8e0:	86 95       	lsr	r24
     8e2:	98 2f       	mov	r25, r24
     8e4:	91 70       	andi	r25, 0x01	; 1
     8e6:	85 e0       	ldi	r24, 0x05	; 5
     8e8:	69 2f       	mov	r22, r25
     8ea:	0e 94 c9 09 	call	0x1392	; 0x1392 <DIO_u8WritePin>
		DIO_u8WritePin(LCD_D4,Get_Bit(u8Command,0));
     8ee:	89 81       	ldd	r24, Y+1	; 0x01
     8f0:	98 2f       	mov	r25, r24
     8f2:	91 70       	andi	r25, 0x01	; 1
     8f4:	84 e0       	ldi	r24, 0x04	; 4
     8f6:	69 2f       	mov	r22, r25
     8f8:	0e 94 c9 09 	call	0x1392	; 0x1392 <DIO_u8WritePin>

		//E		: Falling edge
		DIO_u8WritePin(LCD_E,HIGH);
     8fc:	8b e0       	ldi	r24, 0x0B	; 11
     8fe:	61 e0       	ldi	r22, 0x01	; 1
     900:	0e 94 c9 09 	call	0x1392	; 0x1392 <DIO_u8WritePin>

		LCD_Command_State++;
     904:	80 91 ac 00 	lds	r24, 0x00AC
     908:	8f 5f       	subi	r24, 0xFF	; 255
     90a:	80 93 ac 00 	sts	0x00AC, r24
     90e:	2e c0       	rjmp	.+92     	; 0x96c <__stack+0x10d>

		break;

	case 6:
		if(++u8LCDwritetime>5)
     910:	80 91 ad 00 	lds	r24, 0x00AD
     914:	8f 5f       	subi	r24, 0xFF	; 255
     916:	80 93 ad 00 	sts	0x00AD, r24
     91a:	80 91 ad 00 	lds	r24, 0x00AD
     91e:	86 30       	cpi	r24, 0x06	; 6
     920:	28 f1       	brcs	.+74     	; 0x96c <__stack+0x10d>
		{
			u8LCDwritetime=0;
     922:	10 92 ad 00 	sts	0x00AD, r1
			LCD_Command_State++;
     926:	80 91 ac 00 	lds	r24, 0x00AC
     92a:	8f 5f       	subi	r24, 0xFF	; 255
     92c:	80 93 ac 00 	sts	0x00AC, r24
     930:	1d c0       	rjmp	.+58     	; 0x96c <__stack+0x10d>
		}
		break;
	case 7:
		DIO_u8WritePin(LCD_E,LOW);
     932:	8b e0       	ldi	r24, 0x0B	; 11
     934:	60 e0       	ldi	r22, 0x00	; 0
     936:	0e 94 c9 09 	call	0x1392	; 0x1392 <DIO_u8WritePin>
		LCD_Command_State++;
     93a:	80 91 ac 00 	lds	r24, 0x00AC
     93e:	8f 5f       	subi	r24, 0xFF	; 255
     940:	80 93 ac 00 	sts	0x00AC, r24
     944:	13 c0       	rjmp	.+38     	; 0x96c <__stack+0x10d>
		break;
	case 8:
		if(++u8LCDwritetime>5)
     946:	80 91 ad 00 	lds	r24, 0x00AD
     94a:	8f 5f       	subi	r24, 0xFF	; 255
     94c:	80 93 ad 00 	sts	0x00AD, r24
     950:	80 91 ad 00 	lds	r24, 0x00AD
     954:	86 30       	cpi	r24, 0x06	; 6
     956:	50 f0       	brcs	.+20     	; 0x96c <__stack+0x10d>
		{
			u8LCDwritetime=0;
     958:	10 92 ad 00 	sts	0x00AD, r1
			LCD_Command_State++;
     95c:	80 91 ac 00 	lds	r24, 0x00AC
     960:	8f 5f       	subi	r24, 0xFF	; 255
     962:	80 93 ac 00 	sts	0x00AC, r24
     966:	02 c0       	rjmp	.+4      	; 0x96c <__stack+0x10d>
		}
		break;
	default:
		LCD_Command_State = 0;
     968:	10 92 ac 00 	sts	0x00AC, r1
		break;
	}
	return (LCD_Command_State==0);
     96c:	80 91 ac 00 	lds	r24, 0x00AC
     970:	1a 82       	std	Y+2, r1	; 0x02
     972:	88 23       	and	r24, r24
     974:	11 f4       	brne	.+4      	; 0x97a <__stack+0x11b>
     976:	91 e0       	ldi	r25, 0x01	; 1
     978:	9a 83       	std	Y+2, r25	; 0x02
     97a:	8a 81       	ldd	r24, Y+2	; 0x02
}
     97c:	0f 90       	pop	r0
     97e:	0f 90       	pop	r0
     980:	0f 90       	pop	r0
     982:	0f 90       	pop	r0
     984:	cf 91       	pop	r28
     986:	df 91       	pop	r29
     988:	08 95       	ret

0000098a <LCD_u8Init>:


static uint8 LCD_u8Init(void)
{
     98a:	df 93       	push	r29
     98c:	cf 93       	push	r28
     98e:	00 d0       	rcall	.+0      	; 0x990 <LCD_u8Init+0x6>
     990:	0f 92       	push	r0
     992:	cd b7       	in	r28, 0x3d	; 61
     994:	de b7       	in	r29, 0x3e	; 62
	static uint8 u8LCD_init_state=0,u8LCDinittime=0;
	switch (u8LCD_init_state)
     996:	80 91 af 00 	lds	r24, 0x00AF
     99a:	28 2f       	mov	r18, r24
     99c:	30 e0       	ldi	r19, 0x00	; 0
     99e:	3b 83       	std	Y+3, r19	; 0x03
     9a0:	2a 83       	std	Y+2, r18	; 0x02
     9a2:	8a 81       	ldd	r24, Y+2	; 0x02
     9a4:	9b 81       	ldd	r25, Y+3	; 0x03
     9a6:	84 30       	cpi	r24, 0x04	; 4
     9a8:	91 05       	cpc	r25, r1
     9aa:	09 f4       	brne	.+2      	; 0x9ae <LCD_u8Init+0x24>
     9ac:	99 c0       	rjmp	.+306    	; 0xae0 <LCD_u8Init+0x156>
     9ae:	2a 81       	ldd	r18, Y+2	; 0x02
     9b0:	3b 81       	ldd	r19, Y+3	; 0x03
     9b2:	25 30       	cpi	r18, 0x05	; 5
     9b4:	31 05       	cpc	r19, r1
     9b6:	ec f4       	brge	.+58     	; 0x9f2 <LCD_u8Init+0x68>
     9b8:	8a 81       	ldd	r24, Y+2	; 0x02
     9ba:	9b 81       	ldd	r25, Y+3	; 0x03
     9bc:	81 30       	cpi	r24, 0x01	; 1
     9be:	91 05       	cpc	r25, r1
     9c0:	09 f4       	brne	.+2      	; 0x9c4 <LCD_u8Init+0x3a>
     9c2:	5e c0       	rjmp	.+188    	; 0xa80 <LCD_u8Init+0xf6>
     9c4:	2a 81       	ldd	r18, Y+2	; 0x02
     9c6:	3b 81       	ldd	r19, Y+3	; 0x03
     9c8:	22 30       	cpi	r18, 0x02	; 2
     9ca:	31 05       	cpc	r19, r1
     9cc:	2c f4       	brge	.+10     	; 0x9d8 <LCD_u8Init+0x4e>
     9ce:	8a 81       	ldd	r24, Y+2	; 0x02
     9d0:	9b 81       	ldd	r25, Y+3	; 0x03
     9d2:	00 97       	sbiw	r24, 0x00	; 0
     9d4:	99 f1       	breq	.+102    	; 0xa3c <LCD_u8Init+0xb2>
     9d6:	da c0       	rjmp	.+436    	; 0xb8c <LCD_u8Init+0x202>
     9d8:	2a 81       	ldd	r18, Y+2	; 0x02
     9da:	3b 81       	ldd	r19, Y+3	; 0x03
     9dc:	22 30       	cpi	r18, 0x02	; 2
     9de:	31 05       	cpc	r19, r1
     9e0:	09 f4       	brne	.+2      	; 0x9e4 <LCD_u8Init+0x5a>
     9e2:	60 c0       	rjmp	.+192    	; 0xaa4 <LCD_u8Init+0x11a>
     9e4:	8a 81       	ldd	r24, Y+2	; 0x02
     9e6:	9b 81       	ldd	r25, Y+3	; 0x03
     9e8:	83 30       	cpi	r24, 0x03	; 3
     9ea:	91 05       	cpc	r25, r1
     9ec:	09 f4       	brne	.+2      	; 0x9f0 <LCD_u8Init+0x66>
     9ee:	66 c0       	rjmp	.+204    	; 0xabc <LCD_u8Init+0x132>
     9f0:	cd c0       	rjmp	.+410    	; 0xb8c <LCD_u8Init+0x202>
     9f2:	2a 81       	ldd	r18, Y+2	; 0x02
     9f4:	3b 81       	ldd	r19, Y+3	; 0x03
     9f6:	27 30       	cpi	r18, 0x07	; 7
     9f8:	31 05       	cpc	r19, r1
     9fa:	09 f4       	brne	.+2      	; 0x9fe <LCD_u8Init+0x74>
     9fc:	9a c0       	rjmp	.+308    	; 0xb32 <LCD_u8Init+0x1a8>
     9fe:	8a 81       	ldd	r24, Y+2	; 0x02
     a00:	9b 81       	ldd	r25, Y+3	; 0x03
     a02:	88 30       	cpi	r24, 0x08	; 8
     a04:	91 05       	cpc	r25, r1
     a06:	6c f4       	brge	.+26     	; 0xa22 <LCD_u8Init+0x98>
     a08:	2a 81       	ldd	r18, Y+2	; 0x02
     a0a:	3b 81       	ldd	r19, Y+3	; 0x03
     a0c:	25 30       	cpi	r18, 0x05	; 5
     a0e:	31 05       	cpc	r19, r1
     a10:	09 f4       	brne	.+2      	; 0xa14 <LCD_u8Init+0x8a>
     a12:	72 c0       	rjmp	.+228    	; 0xaf8 <LCD_u8Init+0x16e>
     a14:	8a 81       	ldd	r24, Y+2	; 0x02
     a16:	9b 81       	ldd	r25, Y+3	; 0x03
     a18:	86 30       	cpi	r24, 0x06	; 6
     a1a:	91 05       	cpc	r25, r1
     a1c:	09 f4       	brne	.+2      	; 0xa20 <LCD_u8Init+0x96>
     a1e:	7e c0       	rjmp	.+252    	; 0xb1c <LCD_u8Init+0x192>
     a20:	b5 c0       	rjmp	.+362    	; 0xb8c <LCD_u8Init+0x202>
     a22:	2a 81       	ldd	r18, Y+2	; 0x02
     a24:	3b 81       	ldd	r19, Y+3	; 0x03
     a26:	28 30       	cpi	r18, 0x08	; 8
     a28:	31 05       	cpc	r19, r1
     a2a:	09 f4       	brne	.+2      	; 0xa2e <LCD_u8Init+0xa4>
     a2c:	93 c0       	rjmp	.+294    	; 0xb54 <LCD_u8Init+0x1ca>
     a2e:	8a 81       	ldd	r24, Y+2	; 0x02
     a30:	9b 81       	ldd	r25, Y+3	; 0x03
     a32:	89 30       	cpi	r24, 0x09	; 9
     a34:	91 05       	cpc	r25, r1
     a36:	09 f4       	brne	.+2      	; 0xa3a <LCD_u8Init+0xb0>
     a38:	98 c0       	rjmp	.+304    	; 0xb6a <LCD_u8Init+0x1e0>
     a3a:	a8 c0       	rjmp	.+336    	; 0xb8c <LCD_u8Init+0x202>
	{
	case 0:
		DIO_u8SetPinDir(LCD_E ,OUTPUT);
     a3c:	8b e0       	ldi	r24, 0x0B	; 11
     a3e:	61 e0       	ldi	r22, 0x01	; 1
     a40:	0e 94 2d 08 	call	0x105a	; 0x105a <DIO_u8SetPinDir>
		DIO_u8SetPinDir(LCD_RW,OUTPUT);
     a44:	8a e0       	ldi	r24, 0x0A	; 10
     a46:	61 e0       	ldi	r22, 0x01	; 1
     a48:	0e 94 2d 08 	call	0x105a	; 0x105a <DIO_u8SetPinDir>
		DIO_u8SetPinDir(LCD_RS,OUTPUT);
     a4c:	89 e0       	ldi	r24, 0x09	; 9
     a4e:	61 e0       	ldi	r22, 0x01	; 1
     a50:	0e 94 2d 08 	call	0x105a	; 0x105a <DIO_u8SetPinDir>

		DIO_u8SetPinDir(LCD_D7,OUTPUT);
     a54:	87 e0       	ldi	r24, 0x07	; 7
     a56:	61 e0       	ldi	r22, 0x01	; 1
     a58:	0e 94 2d 08 	call	0x105a	; 0x105a <DIO_u8SetPinDir>
		DIO_u8SetPinDir(LCD_D6,OUTPUT);
     a5c:	86 e0       	ldi	r24, 0x06	; 6
     a5e:	61 e0       	ldi	r22, 0x01	; 1
     a60:	0e 94 2d 08 	call	0x105a	; 0x105a <DIO_u8SetPinDir>
		DIO_u8SetPinDir(LCD_D5,OUTPUT);
     a64:	85 e0       	ldi	r24, 0x05	; 5
     a66:	61 e0       	ldi	r22, 0x01	; 1
     a68:	0e 94 2d 08 	call	0x105a	; 0x105a <DIO_u8SetPinDir>
		DIO_u8SetPinDir(LCD_D4,OUTPUT);
     a6c:	84 e0       	ldi	r24, 0x04	; 4
     a6e:	61 e0       	ldi	r22, 0x01	; 1
     a70:	0e 94 2d 08 	call	0x105a	; 0x105a <DIO_u8SetPinDir>
		u8LCD_init_state++;
     a74:	80 91 af 00 	lds	r24, 0x00AF
     a78:	8f 5f       	subi	r24, 0xFF	; 255
     a7a:	80 93 af 00 	sts	0x00AF, r24
     a7e:	88 c0       	rjmp	.+272    	; 0xb90 <LCD_u8Init+0x206>

		break;
	case 1:								//Delay 30 ms
		if (++u8LCDinittime > 40)
     a80:	80 91 ae 00 	lds	r24, 0x00AE
     a84:	8f 5f       	subi	r24, 0xFF	; 255
     a86:	80 93 ae 00 	sts	0x00AE, r24
     a8a:	80 91 ae 00 	lds	r24, 0x00AE
     a8e:	89 32       	cpi	r24, 0x29	; 41
     a90:	08 f4       	brcc	.+2      	; 0xa94 <LCD_u8Init+0x10a>
     a92:	7e c0       	rjmp	.+252    	; 0xb90 <LCD_u8Init+0x206>
		{
			u8LCDinittime=0;
     a94:	10 92 ae 00 	sts	0x00AE, r1
			u8LCD_init_state++;
     a98:	80 91 af 00 	lds	r24, 0x00AF
     a9c:	8f 5f       	subi	r24, 0xFF	; 255
     a9e:	80 93 af 00 	sts	0x00AF, r24
     aa2:	76 c0       	rjmp	.+236    	; 0xb90 <LCD_u8Init+0x206>
		}
		break;
	case 2:


		if ( LCD_u8WriteCommand(0x20) )
     aa4:	80 e2       	ldi	r24, 0x20	; 32
     aa6:	0e 94 98 03 	call	0x730	; 0x730 <LCD_u8WriteCommand>
     aaa:	88 23       	and	r24, r24
     aac:	09 f4       	brne	.+2      	; 0xab0 <LCD_u8Init+0x126>
     aae:	70 c0       	rjmp	.+224    	; 0xb90 <LCD_u8Init+0x206>
		{
		u8LCD_init_state++;
     ab0:	80 91 af 00 	lds	r24, 0x00AF
     ab4:	8f 5f       	subi	r24, 0xFF	; 255
     ab6:	80 93 af 00 	sts	0x00AF, r24
     aba:	6a c0       	rjmp	.+212    	; 0xb90 <LCD_u8Init+0x206>
		}
		break;
	case 3:								//Delay 5 ms
		if (++u8LCDinittime > 5)
     abc:	80 91 ae 00 	lds	r24, 0x00AE
     ac0:	8f 5f       	subi	r24, 0xFF	; 255
     ac2:	80 93 ae 00 	sts	0x00AE, r24
     ac6:	80 91 ae 00 	lds	r24, 0x00AE
     aca:	86 30       	cpi	r24, 0x06	; 6
     acc:	08 f4       	brcc	.+2      	; 0xad0 <LCD_u8Init+0x146>
     ace:	60 c0       	rjmp	.+192    	; 0xb90 <LCD_u8Init+0x206>
		{
			u8LCDinittime=0;
     ad0:	10 92 ae 00 	sts	0x00AE, r1
			u8LCD_init_state++;
     ad4:	80 91 af 00 	lds	r24, 0x00AF
     ad8:	8f 5f       	subi	r24, 0xFF	; 255
     ada:	80 93 af 00 	sts	0x00AF, r24
     ade:	58 c0       	rjmp	.+176    	; 0xb90 <LCD_u8Init+0x206>
		}
		break;
	case 4:								//Function Set 		0011NFxx N:number of lines 1/2 F: font 5*8/5*11
		if ( LCD_u8WriteCommand(0x2c) )
     ae0:	8c e2       	ldi	r24, 0x2C	; 44
     ae2:	0e 94 98 03 	call	0x730	; 0x730 <LCD_u8WriteCommand>
     ae6:	88 23       	and	r24, r24
     ae8:	09 f4       	brne	.+2      	; 0xaec <LCD_u8Init+0x162>
     aea:	52 c0       	rjmp	.+164    	; 0xb90 <LCD_u8Init+0x206>
		{
		u8LCD_init_state++;
     aec:	80 91 af 00 	lds	r24, 0x00AF
     af0:	8f 5f       	subi	r24, 0xFF	; 255
     af2:	80 93 af 00 	sts	0x00AF, r24
     af6:	4c c0       	rjmp	.+152    	; 0xb90 <LCD_u8Init+0x206>
		}
		break;
	case 5:								//Delay 3 ms
		if (++u8LCDinittime > 3)
     af8:	80 91 ae 00 	lds	r24, 0x00AE
     afc:	8f 5f       	subi	r24, 0xFF	; 255
     afe:	80 93 ae 00 	sts	0x00AE, r24
     b02:	80 91 ae 00 	lds	r24, 0x00AE
     b06:	84 30       	cpi	r24, 0x04	; 4
     b08:	08 f4       	brcc	.+2      	; 0xb0c <LCD_u8Init+0x182>
     b0a:	42 c0       	rjmp	.+132    	; 0xb90 <LCD_u8Init+0x206>
		{
			u8LCDinittime=0;
     b0c:	10 92 ae 00 	sts	0x00AE, r1
			u8LCD_init_state++;
     b10:	80 91 af 00 	lds	r24, 0x00AF
     b14:	8f 5f       	subi	r24, 0xFF	; 255
     b16:	80 93 af 00 	sts	0x00AF, r24
     b1a:	3a c0       	rjmp	.+116    	; 0xb90 <LCD_u8Init+0x206>
		}
		break;
	case 6:
		if (LCD_u8WriteCommand(0x0c))
     b1c:	8c e0       	ldi	r24, 0x0C	; 12
     b1e:	0e 94 98 03 	call	0x730	; 0x730 <LCD_u8WriteCommand>
     b22:	88 23       	and	r24, r24
     b24:	a9 f1       	breq	.+106    	; 0xb90 <LCD_u8Init+0x206>
		{
		u8LCD_init_state++;
     b26:	80 91 af 00 	lds	r24, 0x00AF
     b2a:	8f 5f       	subi	r24, 0xFF	; 255
     b2c:	80 93 af 00 	sts	0x00AF, r24
     b30:	2f c0       	rjmp	.+94     	; 0xb90 <LCD_u8Init+0x206>
		}
		break;
	case 7:								//Delay 3 ms
		if (++u8LCDinittime > 3)
     b32:	80 91 ae 00 	lds	r24, 0x00AE
     b36:	8f 5f       	subi	r24, 0xFF	; 255
     b38:	80 93 ae 00 	sts	0x00AE, r24
     b3c:	80 91 ae 00 	lds	r24, 0x00AE
     b40:	84 30       	cpi	r24, 0x04	; 4
     b42:	30 f1       	brcs	.+76     	; 0xb90 <LCD_u8Init+0x206>
		{
			u8LCDinittime=0;
     b44:	10 92 ae 00 	sts	0x00AE, r1
			u8LCD_init_state++;
     b48:	80 91 af 00 	lds	r24, 0x00AF
     b4c:	8f 5f       	subi	r24, 0xFF	; 255
     b4e:	80 93 af 00 	sts	0x00AF, r24
     b52:	1e c0       	rjmp	.+60     	; 0xb90 <LCD_u8Init+0x206>
		}
		break;
	case 8:
		if( LCD_u8WriteCommand(0x01))
     b54:	81 e0       	ldi	r24, 0x01	; 1
     b56:	0e 94 98 03 	call	0x730	; 0x730 <LCD_u8WriteCommand>
     b5a:	88 23       	and	r24, r24
     b5c:	c9 f0       	breq	.+50     	; 0xb90 <LCD_u8Init+0x206>
		{
		u8LCD_init_state++;
     b5e:	80 91 af 00 	lds	r24, 0x00AF
     b62:	8f 5f       	subi	r24, 0xFF	; 255
     b64:	80 93 af 00 	sts	0x00AF, r24
     b68:	13 c0       	rjmp	.+38     	; 0xb90 <LCD_u8Init+0x206>
		}
		break;
	case 9:								//Delay 40 ms
		if (++u8LCDinittime > 10)
     b6a:	80 91 ae 00 	lds	r24, 0x00AE
     b6e:	8f 5f       	subi	r24, 0xFF	; 255
     b70:	80 93 ae 00 	sts	0x00AE, r24
     b74:	80 91 ae 00 	lds	r24, 0x00AE
     b78:	8b 30       	cpi	r24, 0x0B	; 11
     b7a:	50 f0       	brcs	.+20     	; 0xb90 <LCD_u8Init+0x206>
		{
			u8LCDinittime=0;
     b7c:	10 92 ae 00 	sts	0x00AE, r1
			u8LCD_init_state++;
     b80:	80 91 af 00 	lds	r24, 0x00AF
     b84:	8f 5f       	subi	r24, 0xFF	; 255
     b86:	80 93 af 00 	sts	0x00AF, r24
     b8a:	02 c0       	rjmp	.+4      	; 0xb90 <LCD_u8Init+0x206>
		}
		break;
	default:
		u8LCD_init_state=0;
     b8c:	10 92 af 00 	sts	0x00AF, r1
		break;

	}
return (u8LCD_init_state==0);
     b90:	80 91 af 00 	lds	r24, 0x00AF
     b94:	19 82       	std	Y+1, r1	; 0x01
     b96:	88 23       	and	r24, r24
     b98:	11 f4       	brne	.+4      	; 0xb9e <LCD_u8Init+0x214>
     b9a:	91 e0       	ldi	r25, 0x01	; 1
     b9c:	99 83       	std	Y+1, r25	; 0x01
     b9e:	89 81       	ldd	r24, Y+1	; 0x01

}
     ba0:	0f 90       	pop	r0
     ba2:	0f 90       	pop	r0
     ba4:	0f 90       	pop	r0
     ba6:	cf 91       	pop	r28
     ba8:	df 91       	pop	r29
     baa:	08 95       	ret

00000bac <LCD_u8WriteData>:

static uint8 LCD_u8WriteData( uint8 u8Data)
{
     bac:	df 93       	push	r29
     bae:	cf 93       	push	r28
     bb0:	00 d0       	rcall	.+0      	; 0xbb2 <LCD_u8WriteData+0x6>
     bb2:	00 d0       	rcall	.+0      	; 0xbb4 <LCD_u8WriteData+0x8>
     bb4:	cd b7       	in	r28, 0x3d	; 61
     bb6:	de b7       	in	r29, 0x3e	; 62
     bb8:	89 83       	std	Y+1, r24	; 0x01
	static uint8 u8LCDdatatime=0;
	static uint8 LCD_Data_State=0;

	switch(LCD_Data_State){
     bba:	80 91 b0 00 	lds	r24, 0x00B0
     bbe:	28 2f       	mov	r18, r24
     bc0:	30 e0       	ldi	r19, 0x00	; 0
     bc2:	3c 83       	std	Y+4, r19	; 0x04
     bc4:	2b 83       	std	Y+3, r18	; 0x03
     bc6:	8b 81       	ldd	r24, Y+3	; 0x03
     bc8:	9c 81       	ldd	r25, Y+4	; 0x04
     bca:	82 30       	cpi	r24, 0x02	; 2
     bcc:	91 05       	cpc	r25, r1
     bce:	09 f4       	brne	.+2      	; 0xbd2 <LCD_u8WriteData+0x26>
     bd0:	68 c0       	rjmp	.+208    	; 0xca2 <LCD_u8WriteData+0xf6>
     bd2:	2b 81       	ldd	r18, Y+3	; 0x03
     bd4:	3c 81       	ldd	r19, Y+4	; 0x04
     bd6:	23 30       	cpi	r18, 0x03	; 3
     bd8:	31 05       	cpc	r19, r1
     bda:	5c f4       	brge	.+22     	; 0xbf2 <LCD_u8WriteData+0x46>
     bdc:	8b 81       	ldd	r24, Y+3	; 0x03
     bde:	9c 81       	ldd	r25, Y+4	; 0x04
     be0:	00 97       	sbiw	r24, 0x00	; 0
     be2:	a1 f0       	breq	.+40     	; 0xc0c <LCD_u8WriteData+0x60>
     be4:	2b 81       	ldd	r18, Y+3	; 0x03
     be6:	3c 81       	ldd	r19, Y+4	; 0x04
     be8:	21 30       	cpi	r18, 0x01	; 1
     bea:	31 05       	cpc	r19, r1
     bec:	09 f4       	brne	.+2      	; 0xbf0 <LCD_u8WriteData+0x44>
     bee:	49 c0       	rjmp	.+146    	; 0xc82 <LCD_u8WriteData+0xd6>
     bf0:	a9 c0       	rjmp	.+338    	; 0xd44 <LCD_u8WriteData+0x198>
     bf2:	8b 81       	ldd	r24, Y+3	; 0x03
     bf4:	9c 81       	ldd	r25, Y+4	; 0x04
     bf6:	83 30       	cpi	r24, 0x03	; 3
     bf8:	91 05       	cpc	r25, r1
     bfa:	09 f4       	brne	.+2      	; 0xbfe <LCD_u8WriteData+0x52>
     bfc:	84 c0       	rjmp	.+264    	; 0xd06 <LCD_u8WriteData+0x15a>
     bfe:	2b 81       	ldd	r18, Y+3	; 0x03
     c00:	3c 81       	ldd	r19, Y+4	; 0x04
     c02:	24 30       	cpi	r18, 0x04	; 4
     c04:	31 05       	cpc	r19, r1
     c06:	09 f4       	brne	.+2      	; 0xc0a <LCD_u8WriteData+0x5e>
     c08:	91 c0       	rjmp	.+290    	; 0xd2c <LCD_u8WriteData+0x180>
     c0a:	9c c0       	rjmp	.+312    	; 0xd44 <LCD_u8WriteData+0x198>

	case 0:
		//RS 	= 1
			DIO_u8WritePin(LCD_RS,HIGH);
     c0c:	89 e0       	ldi	r24, 0x09	; 9
     c0e:	61 e0       	ldi	r22, 0x01	; 1
     c10:	0e 94 c9 09 	call	0x1392	; 0x1392 <DIO_u8WritePin>

			//R/W 	= 0
			DIO_u8WritePin(LCD_RW,LOW);
     c14:	8a e0       	ldi	r24, 0x0A	; 10
     c16:	60 e0       	ldi	r22, 0x00	; 0
     c18:	0e 94 c9 09 	call	0x1392	; 0x1392 <DIO_u8WritePin>

			//Send data

			//Write High Niple
			DIO_u8WritePin(LCD_D7,Get_Bit(u8Data,7));
     c1c:	89 81       	ldd	r24, Y+1	; 0x01
     c1e:	98 2f       	mov	r25, r24
     c20:	99 1f       	adc	r25, r25
     c22:	99 27       	eor	r25, r25
     c24:	99 1f       	adc	r25, r25
     c26:	87 e0       	ldi	r24, 0x07	; 7
     c28:	69 2f       	mov	r22, r25
     c2a:	0e 94 c9 09 	call	0x1392	; 0x1392 <DIO_u8WritePin>
			DIO_u8WritePin(LCD_D6,Get_Bit(u8Data,6));
     c2e:	89 81       	ldd	r24, Y+1	; 0x01
     c30:	82 95       	swap	r24
     c32:	86 95       	lsr	r24
     c34:	86 95       	lsr	r24
     c36:	83 70       	andi	r24, 0x03	; 3
     c38:	98 2f       	mov	r25, r24
     c3a:	91 70       	andi	r25, 0x01	; 1
     c3c:	86 e0       	ldi	r24, 0x06	; 6
     c3e:	69 2f       	mov	r22, r25
     c40:	0e 94 c9 09 	call	0x1392	; 0x1392 <DIO_u8WritePin>
			DIO_u8WritePin(LCD_D5,Get_Bit(u8Data,5));
     c44:	89 81       	ldd	r24, Y+1	; 0x01
     c46:	82 95       	swap	r24
     c48:	86 95       	lsr	r24
     c4a:	87 70       	andi	r24, 0x07	; 7
     c4c:	98 2f       	mov	r25, r24
     c4e:	91 70       	andi	r25, 0x01	; 1
     c50:	85 e0       	ldi	r24, 0x05	; 5
     c52:	69 2f       	mov	r22, r25
     c54:	0e 94 c9 09 	call	0x1392	; 0x1392 <DIO_u8WritePin>
			DIO_u8WritePin(LCD_D4,Get_Bit(u8Data,4));
     c58:	89 81       	ldd	r24, Y+1	; 0x01
     c5a:	82 95       	swap	r24
     c5c:	8f 70       	andi	r24, 0x0F	; 15
     c5e:	98 2f       	mov	r25, r24
     c60:	91 70       	andi	r25, 0x01	; 1
     c62:	84 e0       	ldi	r24, 0x04	; 4
     c64:	69 2f       	mov	r22, r25
     c66:	0e 94 c9 09 	call	0x1392	; 0x1392 <DIO_u8WritePin>

			//E		: Falling edge
			DIO_u8WritePin(LCD_E,HIGH);
     c6a:	8b e0       	ldi	r24, 0x0B	; 11
     c6c:	61 e0       	ldi	r22, 0x01	; 1
     c6e:	0e 94 c9 09 	call	0x1392	; 0x1392 <DIO_u8WritePin>
			LCD_Data_State++;
     c72:	80 91 b0 00 	lds	r24, 0x00B0
     c76:	8f 5f       	subi	r24, 0xFF	; 255
     c78:	80 93 b0 00 	sts	0x00B0, r24
			u8LCDdatatime = 0;
     c7c:	10 92 b1 00 	sts	0x00B1, r1
     c80:	66 c0       	rjmp	.+204    	; 0xd4e <LCD_u8WriteData+0x1a2>
		break;

	case 1:
		if(++u8LCDdatatime > 5){
     c82:	80 91 b1 00 	lds	r24, 0x00B1
     c86:	8f 5f       	subi	r24, 0xFF	; 255
     c88:	80 93 b1 00 	sts	0x00B1, r24
     c8c:	80 91 b1 00 	lds	r24, 0x00B1
     c90:	86 30       	cpi	r24, 0x06	; 6
     c92:	08 f4       	brcc	.+2      	; 0xc96 <LCD_u8WriteData+0xea>
     c94:	5c c0       	rjmp	.+184    	; 0xd4e <LCD_u8WriteData+0x1a2>
			LCD_Data_State++;
     c96:	80 91 b0 00 	lds	r24, 0x00B0
     c9a:	8f 5f       	subi	r24, 0xFF	; 255
     c9c:	80 93 b0 00 	sts	0x00B0, r24
     ca0:	56 c0       	rjmp	.+172    	; 0xd4e <LCD_u8WriteData+0x1a2>
		}
		break;
	case 2:
		u8LCDdatatime =0;
     ca2:	10 92 b1 00 	sts	0x00B1, r1
		DIO_u8WritePin(LCD_E,LOW);
     ca6:	8b e0       	ldi	r24, 0x0B	; 11
     ca8:	60 e0       	ldi	r22, 0x00	; 0
     caa:	0e 94 c9 09 	call	0x1392	; 0x1392 <DIO_u8WritePin>

			//Write High Niple
			DIO_u8WritePin(LCD_D7,Get_Bit(u8Data,3));
     cae:	89 81       	ldd	r24, Y+1	; 0x01
     cb0:	86 95       	lsr	r24
     cb2:	86 95       	lsr	r24
     cb4:	86 95       	lsr	r24
     cb6:	98 2f       	mov	r25, r24
     cb8:	91 70       	andi	r25, 0x01	; 1
     cba:	87 e0       	ldi	r24, 0x07	; 7
     cbc:	69 2f       	mov	r22, r25
     cbe:	0e 94 c9 09 	call	0x1392	; 0x1392 <DIO_u8WritePin>
			DIO_u8WritePin(LCD_D6,Get_Bit(u8Data,2));
     cc2:	89 81       	ldd	r24, Y+1	; 0x01
     cc4:	86 95       	lsr	r24
     cc6:	86 95       	lsr	r24
     cc8:	98 2f       	mov	r25, r24
     cca:	91 70       	andi	r25, 0x01	; 1
     ccc:	86 e0       	ldi	r24, 0x06	; 6
     cce:	69 2f       	mov	r22, r25
     cd0:	0e 94 c9 09 	call	0x1392	; 0x1392 <DIO_u8WritePin>
			DIO_u8WritePin(LCD_D5,Get_Bit(u8Data,1));
     cd4:	89 81       	ldd	r24, Y+1	; 0x01
     cd6:	86 95       	lsr	r24
     cd8:	98 2f       	mov	r25, r24
     cda:	91 70       	andi	r25, 0x01	; 1
     cdc:	85 e0       	ldi	r24, 0x05	; 5
     cde:	69 2f       	mov	r22, r25
     ce0:	0e 94 c9 09 	call	0x1392	; 0x1392 <DIO_u8WritePin>
			DIO_u8WritePin(LCD_D4,Get_Bit(u8Data,0));
     ce4:	89 81       	ldd	r24, Y+1	; 0x01
     ce6:	98 2f       	mov	r25, r24
     ce8:	91 70       	andi	r25, 0x01	; 1
     cea:	84 e0       	ldi	r24, 0x04	; 4
     cec:	69 2f       	mov	r22, r25
     cee:	0e 94 c9 09 	call	0x1392	; 0x1392 <DIO_u8WritePin>

			//E		: Falling edge
			DIO_u8WritePin(LCD_E,HIGH);
     cf2:	8b e0       	ldi	r24, 0x0B	; 11
     cf4:	61 e0       	ldi	r22, 0x01	; 1
     cf6:	0e 94 c9 09 	call	0x1392	; 0x1392 <DIO_u8WritePin>
			LCD_Data_State++;
     cfa:	80 91 b0 00 	lds	r24, 0x00B0
     cfe:	8f 5f       	subi	r24, 0xFF	; 255
     d00:	80 93 b0 00 	sts	0x00B0, r24
     d04:	24 c0       	rjmp	.+72     	; 0xd4e <LCD_u8WriteData+0x1a2>

		break;
	case 3:DIO_u8WritePin(0,LOW);
     d06:	80 e0       	ldi	r24, 0x00	; 0
     d08:	60 e0       	ldi	r22, 0x00	; 0
     d0a:	0e 94 c9 09 	call	0x1392	; 0x1392 <DIO_u8WritePin>
			if(++u8LCDdatatime > 5){
     d0e:	80 91 b1 00 	lds	r24, 0x00B1
     d12:	8f 5f       	subi	r24, 0xFF	; 255
     d14:	80 93 b1 00 	sts	0x00B1, r24
     d18:	80 91 b1 00 	lds	r24, 0x00B1
     d1c:	86 30       	cpi	r24, 0x06	; 6
     d1e:	b8 f0       	brcs	.+46     	; 0xd4e <LCD_u8WriteData+0x1a2>
				LCD_Data_State++;
     d20:	80 91 b0 00 	lds	r24, 0x00B0
     d24:	8f 5f       	subi	r24, 0xFF	; 255
     d26:	80 93 b0 00 	sts	0x00B0, r24
     d2a:	11 c0       	rjmp	.+34     	; 0xd4e <LCD_u8WriteData+0x1a2>
			}
			break;


	case 4:
		u8LCDdatatime = 0;
     d2c:	10 92 b1 00 	sts	0x00B1, r1
		DIO_u8WritePin(LCD_E,LOW);
     d30:	8b e0       	ldi	r24, 0x0B	; 11
     d32:	60 e0       	ldi	r22, 0x00	; 0
     d34:	0e 94 c9 09 	call	0x1392	; 0x1392 <DIO_u8WritePin>
		LCD_Data_State++;
     d38:	80 91 b0 00 	lds	r24, 0x00B0
     d3c:	8f 5f       	subi	r24, 0xFF	; 255
     d3e:	80 93 b0 00 	sts	0x00B0, r24
     d42:	05 c0       	rjmp	.+10     	; 0xd4e <LCD_u8WriteData+0x1a2>
		break;

	default :
		LCD_Data_State = 0;
     d44:	10 92 b0 00 	sts	0x00B0, r1
		return 1;
     d48:	31 e0       	ldi	r19, 0x01	; 1
     d4a:	3a 83       	std	Y+2, r19	; 0x02
     d4c:	01 c0       	rjmp	.+2      	; 0xd50 <LCD_u8WriteData+0x1a4>
		break;
	}

	return 0;
     d4e:	1a 82       	std	Y+2, r1	; 0x02
     d50:	8a 81       	ldd	r24, Y+2	; 0x02

}
     d52:	0f 90       	pop	r0
     d54:	0f 90       	pop	r0
     d56:	0f 90       	pop	r0
     d58:	0f 90       	pop	r0
     d5a:	cf 91       	pop	r28
     d5c:	df 91       	pop	r29
     d5e:	08 95       	ret

00000d60 <LCD_u8GotoXY>:

static uint8 LCD_u8GotoXY (uint8 x , uint8 y)
{
     d60:	df 93       	push	r29
     d62:	cf 93       	push	r28
     d64:	00 d0       	rcall	.+0      	; 0xd66 <LCD_u8GotoXY+0x6>
     d66:	0f 92       	push	r0
     d68:	cd b7       	in	r28, 0x3d	; 61
     d6a:	de b7       	in	r29, 0x3e	; 62
     d6c:	89 83       	std	Y+1, r24	; 0x01
     d6e:	6a 83       	std	Y+2, r22	; 0x02
	if (LCD_u8WriteCommand(0x80|(((y)&1)<<6)|((x) & 0x3f)))
     d70:	8a 81       	ldd	r24, Y+2	; 0x02
     d72:	88 2f       	mov	r24, r24
     d74:	90 e0       	ldi	r25, 0x00	; 0
     d76:	81 70       	andi	r24, 0x01	; 1
     d78:	90 70       	andi	r25, 0x00	; 0
     d7a:	00 24       	eor	r0, r0
     d7c:	96 95       	lsr	r25
     d7e:	87 95       	ror	r24
     d80:	07 94       	ror	r0
     d82:	96 95       	lsr	r25
     d84:	87 95       	ror	r24
     d86:	07 94       	ror	r0
     d88:	98 2f       	mov	r25, r24
     d8a:	80 2d       	mov	r24, r0
     d8c:	98 2f       	mov	r25, r24
     d8e:	90 68       	ori	r25, 0x80	; 128
     d90:	89 81       	ldd	r24, Y+1	; 0x01
     d92:	8f 73       	andi	r24, 0x3F	; 63
     d94:	89 2b       	or	r24, r25
     d96:	0e 94 98 03 	call	0x730	; 0x730 <LCD_u8WriteCommand>
     d9a:	88 23       	and	r24, r24
     d9c:	19 f0       	breq	.+6      	; 0xda4 <LCD_u8GotoXY+0x44>
	{
		return 1;
     d9e:	81 e0       	ldi	r24, 0x01	; 1
     da0:	8b 83       	std	Y+3, r24	; 0x03
     da2:	01 c0       	rjmp	.+2      	; 0xda6 <LCD_u8GotoXY+0x46>
	}
	return 0;
     da4:	1b 82       	std	Y+3, r1	; 0x03
     da6:	8b 81       	ldd	r24, Y+3	; 0x03
}
     da8:	0f 90       	pop	r0
     daa:	0f 90       	pop	r0
     dac:	0f 90       	pop	r0
     dae:	cf 91       	pop	r28
     db0:	df 91       	pop	r29
     db2:	08 95       	ret

00000db4 <LCD_vidTask>:


void LCD_vidTask (void)
{
     db4:	df 93       	push	r29
     db6:	cf 93       	push	r28
     db8:	00 d0       	rcall	.+0      	; 0xdba <LCD_vidTask+0x6>
     dba:	cd b7       	in	r28, 0x3d	; 61
     dbc:	de b7       	in	r29, 0x3e	; 62
	static uint8 LCDx=0,LCDy=0;
	switch(u8LCDState)
     dbe:	80 91 ab 00 	lds	r24, 0x00AB
     dc2:	28 2f       	mov	r18, r24
     dc4:	30 e0       	ldi	r19, 0x00	; 0
     dc6:	3a 83       	std	Y+2, r19	; 0x02
     dc8:	29 83       	std	Y+1, r18	; 0x01
     dca:	89 81       	ldd	r24, Y+1	; 0x01
     dcc:	9a 81       	ldd	r25, Y+2	; 0x02
     dce:	82 30       	cpi	r24, 0x02	; 2
     dd0:	91 05       	cpc	r25, r1
     dd2:	39 f1       	breq	.+78     	; 0xe22 <LCD_vidTask+0x6e>
     dd4:	29 81       	ldd	r18, Y+1	; 0x01
     dd6:	3a 81       	ldd	r19, Y+2	; 0x02
     dd8:	23 30       	cpi	r18, 0x03	; 3
     dda:	31 05       	cpc	r19, r1
     ddc:	5c f4       	brge	.+22     	; 0xdf4 <LCD_vidTask+0x40>
     dde:	89 81       	ldd	r24, Y+1	; 0x01
     de0:	9a 81       	ldd	r25, Y+2	; 0x02
     de2:	00 97       	sbiw	r24, 0x00	; 0
     de4:	09 f4       	brne	.+2      	; 0xde8 <LCD_vidTask+0x34>
     de6:	6c c0       	rjmp	.+216    	; 0xec0 <LCD_vidTask+0x10c>
     de8:	29 81       	ldd	r18, Y+1	; 0x01
     dea:	3a 81       	ldd	r19, Y+2	; 0x02
     dec:	21 30       	cpi	r18, 0x01	; 1
     dee:	31 05       	cpc	r19, r1
     df0:	69 f0       	breq	.+26     	; 0xe0c <LCD_vidTask+0x58>
     df2:	66 c0       	rjmp	.+204    	; 0xec0 <LCD_vidTask+0x10c>
     df4:	89 81       	ldd	r24, Y+1	; 0x01
     df6:	9a 81       	ldd	r25, Y+2	; 0x02
     df8:	83 30       	cpi	r24, 0x03	; 3
     dfa:	91 05       	cpc	r25, r1
     dfc:	f1 f0       	breq	.+60     	; 0xe3a <LCD_vidTask+0x86>
     dfe:	29 81       	ldd	r18, Y+1	; 0x01
     e00:	3a 81       	ldd	r19, Y+2	; 0x02
     e02:	24 30       	cpi	r18, 0x04	; 4
     e04:	31 05       	cpc	r19, r1
     e06:	09 f4       	brne	.+2      	; 0xe0a <LCD_vidTask+0x56>
     e08:	4f c0       	rjmp	.+158    	; 0xea8 <LCD_vidTask+0xf4>
     e0a:	5a c0       	rjmp	.+180    	; 0xec0 <LCD_vidTask+0x10c>
	{
	case 0:
		break;
	case 1:
		if(LCD_u8Init())
     e0c:	0e 94 c5 04 	call	0x98a	; 0x98a <LCD_u8Init>
     e10:	88 23       	and	r24, r24
     e12:	09 f4       	brne	.+2      	; 0xe16 <LCD_vidTask+0x62>
     e14:	55 c0       	rjmp	.+170    	; 0xec0 <LCD_vidTask+0x10c>
		{
			u8LCDState++;
     e16:	80 91 ab 00 	lds	r24, 0x00AB
     e1a:	8f 5f       	subi	r24, 0xFF	; 255
     e1c:	80 93 ab 00 	sts	0x00AB, r24
     e20:	4f c0       	rjmp	.+158    	; 0xec0 <LCD_vidTask+0x10c>
		}
		break;
	case 2:
		if(LCD_u8WriteCommand(1))
     e22:	81 e0       	ldi	r24, 0x01	; 1
     e24:	0e 94 98 03 	call	0x730	; 0x730 <LCD_u8WriteCommand>
     e28:	88 23       	and	r24, r24
     e2a:	09 f4       	brne	.+2      	; 0xe2e <LCD_vidTask+0x7a>
     e2c:	49 c0       	rjmp	.+146    	; 0xec0 <LCD_vidTask+0x10c>
		{
			u8LCDState++;
     e2e:	80 91 ab 00 	lds	r24, 0x00AB
     e32:	8f 5f       	subi	r24, 0xFF	; 255
     e34:	80 93 ab 00 	sts	0x00AB, r24
     e38:	43 c0       	rjmp	.+134    	; 0xec0 <LCD_vidTask+0x10c>
		}
		break;
	case 3:
		if(LCD_u8WriteData(LCD_LINE[LCDy][LCDx]))
     e3a:	80 91 b2 00 	lds	r24, 0x00B2
     e3e:	28 2f       	mov	r18, r24
     e40:	30 e0       	ldi	r19, 0x00	; 0
     e42:	80 91 b3 00 	lds	r24, 0x00B3
     e46:	48 2f       	mov	r20, r24
     e48:	50 e0       	ldi	r21, 0x00	; 0
     e4a:	c9 01       	movw	r24, r18
     e4c:	82 95       	swap	r24
     e4e:	92 95       	swap	r25
     e50:	90 7f       	andi	r25, 0xF0	; 240
     e52:	98 27       	eor	r25, r24
     e54:	80 7f       	andi	r24, 0xF0	; 240
     e56:	98 27       	eor	r25, r24
     e58:	82 0f       	add	r24, r18
     e5a:	93 1f       	adc	r25, r19
     e5c:	84 0f       	add	r24, r20
     e5e:	95 1f       	adc	r25, r21
     e60:	fc 01       	movw	r30, r24
     e62:	e6 58       	subi	r30, 0x86	; 134
     e64:	ff 4f       	sbci	r31, 0xFF	; 255
     e66:	80 81       	ld	r24, Z
     e68:	0e 94 d6 05 	call	0xbac	; 0xbac <LCD_u8WriteData>
     e6c:	88 23       	and	r24, r24
     e6e:	41 f1       	breq	.+80     	; 0xec0 <LCD_vidTask+0x10c>
		{
			if(++LCDx>15)
     e70:	80 91 b3 00 	lds	r24, 0x00B3
     e74:	8f 5f       	subi	r24, 0xFF	; 255
     e76:	80 93 b3 00 	sts	0x00B3, r24
     e7a:	80 91 b3 00 	lds	r24, 0x00B3
     e7e:	80 31       	cpi	r24, 0x10	; 16
     e80:	f8 f0       	brcs	.+62     	; 0xec0 <LCD_vidTask+0x10c>
			{
				LCDx=0;
     e82:	10 92 b3 00 	sts	0x00B3, r1
				if(++LCDy>1)
     e86:	80 91 b2 00 	lds	r24, 0x00B2
     e8a:	8f 5f       	subi	r24, 0xFF	; 255
     e8c:	80 93 b2 00 	sts	0x00B2, r24
     e90:	80 91 b2 00 	lds	r24, 0x00B2
     e94:	82 30       	cpi	r24, 0x02	; 2
     e96:	10 f0       	brcs	.+4      	; 0xe9c <LCD_vidTask+0xe8>
				{
					LCDy=0;
     e98:	10 92 b2 00 	sts	0x00B2, r1
				}
				u8LCDState++;
     e9c:	80 91 ab 00 	lds	r24, 0x00AB
     ea0:	8f 5f       	subi	r24, 0xFF	; 255
     ea2:	80 93 ab 00 	sts	0x00AB, r24
     ea6:	0c c0       	rjmp	.+24     	; 0xec0 <LCD_vidTask+0x10c>
			}
		}
		break;
	case 4:
		if(LCD_u8GotoXY(LCDx,LCDy))
     ea8:	80 91 b3 00 	lds	r24, 0x00B3
     eac:	90 91 b2 00 	lds	r25, 0x00B2
     eb0:	69 2f       	mov	r22, r25
     eb2:	0e 94 b0 06 	call	0xd60	; 0xd60 <LCD_u8GotoXY>
     eb6:	88 23       	and	r24, r24
     eb8:	19 f0       	breq	.+6      	; 0xec0 <LCD_vidTask+0x10c>
		{
			u8LCDState=3;
     eba:	83 e0       	ldi	r24, 0x03	; 3
     ebc:	80 93 ab 00 	sts	0x00AB, r24
	default:

		break;
	}

}
     ec0:	0f 90       	pop	r0
     ec2:	0f 90       	pop	r0
     ec4:	cf 91       	pop	r28
     ec6:	df 91       	pop	r29
     ec8:	08 95       	ret

00000eca <LCD_vidGotoXY>:

void LCD_vidGotoXY(uint8 x,uint8 y)
{
     eca:	df 93       	push	r29
     ecc:	cf 93       	push	r28
     ece:	00 d0       	rcall	.+0      	; 0xed0 <LCD_vidGotoXY+0x6>
     ed0:	cd b7       	in	r28, 0x3d	; 61
     ed2:	de b7       	in	r29, 0x3e	; 62
     ed4:	89 83       	std	Y+1, r24	; 0x01
     ed6:	6a 83       	std	Y+2, r22	; 0x02
	u8x =x;u8y=y;
     ed8:	89 81       	ldd	r24, Y+1	; 0x01
     eda:	80 93 a9 00 	sts	0x00A9, r24
     ede:	8a 81       	ldd	r24, Y+2	; 0x02
     ee0:	80 93 aa 00 	sts	0x00AA, r24
}
     ee4:	0f 90       	pop	r0
     ee6:	0f 90       	pop	r0
     ee8:	cf 91       	pop	r28
     eea:	df 91       	pop	r29
     eec:	08 95       	ret

00000eee <LCD_vidWrite>:
void LCD_vidWrite(uint8 u8data)
{
     eee:	df 93       	push	r29
     ef0:	cf 93       	push	r28
     ef2:	0f 92       	push	r0
     ef4:	cd b7       	in	r28, 0x3d	; 61
     ef6:	de b7       	in	r29, 0x3e	; 62
     ef8:	89 83       	std	Y+1, r24	; 0x01
	if (u8data != '\n')
     efa:	89 81       	ldd	r24, Y+1	; 0x01
     efc:	8a 30       	cpi	r24, 0x0A	; 10
     efe:	71 f1       	breq	.+92     	; 0xf5c <LCD_vidWrite+0x6e>
	{
		LCD_LINE[u8y][u8x++]=u8data;
     f00:	80 91 aa 00 	lds	r24, 0x00AA
     f04:	28 2f       	mov	r18, r24
     f06:	30 e0       	ldi	r19, 0x00	; 0
     f08:	60 91 a9 00 	lds	r22, 0x00A9
     f0c:	46 2f       	mov	r20, r22
     f0e:	50 e0       	ldi	r21, 0x00	; 0
     f10:	c9 01       	movw	r24, r18
     f12:	82 95       	swap	r24
     f14:	92 95       	swap	r25
     f16:	90 7f       	andi	r25, 0xF0	; 240
     f18:	98 27       	eor	r25, r24
     f1a:	80 7f       	andi	r24, 0xF0	; 240
     f1c:	98 27       	eor	r25, r24
     f1e:	82 0f       	add	r24, r18
     f20:	93 1f       	adc	r25, r19
     f22:	84 0f       	add	r24, r20
     f24:	95 1f       	adc	r25, r21
     f26:	fc 01       	movw	r30, r24
     f28:	e6 58       	subi	r30, 0x86	; 134
     f2a:	ff 4f       	sbci	r31, 0xFF	; 255
     f2c:	89 81       	ldd	r24, Y+1	; 0x01
     f2e:	80 83       	st	Z, r24
     f30:	86 2f       	mov	r24, r22
     f32:	8f 5f       	subi	r24, 0xFF	; 255
     f34:	80 93 a9 00 	sts	0x00A9, r24
		if(u8x>15)
     f38:	80 91 a9 00 	lds	r24, 0x00A9
     f3c:	80 31       	cpi	r24, 0x10	; 16
     f3e:	d8 f0       	brcs	.+54     	; 0xf76 <LCD_vidWrite+0x88>
		{
			u8x=0;
     f40:	10 92 a9 00 	sts	0x00A9, r1
			if(++u8y>1)
     f44:	80 91 aa 00 	lds	r24, 0x00AA
     f48:	8f 5f       	subi	r24, 0xFF	; 255
     f4a:	80 93 aa 00 	sts	0x00AA, r24
     f4e:	80 91 aa 00 	lds	r24, 0x00AA
     f52:	82 30       	cpi	r24, 0x02	; 2
     f54:	80 f0       	brcs	.+32     	; 0xf76 <LCD_vidWrite+0x88>
			{
				u8y=0;
     f56:	10 92 aa 00 	sts	0x00AA, r1
     f5a:	0d c0       	rjmp	.+26     	; 0xf76 <LCD_vidWrite+0x88>
			}
		}
	}
	else
	{
		u8x=0;
     f5c:	10 92 a9 00 	sts	0x00A9, r1
		if(++u8y>1)
     f60:	80 91 aa 00 	lds	r24, 0x00AA
     f64:	8f 5f       	subi	r24, 0xFF	; 255
     f66:	80 93 aa 00 	sts	0x00AA, r24
     f6a:	80 91 aa 00 	lds	r24, 0x00AA
     f6e:	82 30       	cpi	r24, 0x02	; 2
     f70:	10 f0       	brcs	.+4      	; 0xf76 <LCD_vidWrite+0x88>
		{
			u8y=0;
     f72:	10 92 aa 00 	sts	0x00AA, r1
		}
	}

}
     f76:	0f 90       	pop	r0
     f78:	cf 91       	pop	r28
     f7a:	df 91       	pop	r29
     f7c:	08 95       	ret

00000f7e <LCD_vidInit>:
void LCD_vidInit(void)
{
     f7e:	df 93       	push	r29
     f80:	cf 93       	push	r28
     f82:	cd b7       	in	r28, 0x3d	; 61
     f84:	de b7       	in	r29, 0x3e	; 62
	u8LCDState=1;
     f86:	81 e0       	ldi	r24, 0x01	; 1
     f88:	80 93 ab 00 	sts	0x00AB, r24
}
     f8c:	cf 91       	pop	r28
     f8e:	df 91       	pop	r29
     f90:	08 95       	ret

00000f92 <LCD_vidString>:

void LCD_vidString (int8 I8String[])
{
     f92:	df 93       	push	r29
     f94:	cf 93       	push	r28
     f96:	00 d0       	rcall	.+0      	; 0xf98 <LCD_vidString+0x6>
     f98:	0f 92       	push	r0
     f9a:	cd b7       	in	r28, 0x3d	; 61
     f9c:	de b7       	in	r29, 0x3e	; 62
     f9e:	9b 83       	std	Y+3, r25	; 0x03
     fa0:	8a 83       	std	Y+2, r24	; 0x02

	uint8 u8i =0;
     fa2:	19 82       	std	Y+1, r1	; 0x01
     fa4:	0e c0       	rjmp	.+28     	; 0xfc2 <LCD_vidString+0x30>
	while (I8String[u8i])
	{
		LCD_vidWrite( I8String[u8i]);
     fa6:	89 81       	ldd	r24, Y+1	; 0x01
     fa8:	28 2f       	mov	r18, r24
     faa:	30 e0       	ldi	r19, 0x00	; 0
     fac:	8a 81       	ldd	r24, Y+2	; 0x02
     fae:	9b 81       	ldd	r25, Y+3	; 0x03
     fb0:	fc 01       	movw	r30, r24
     fb2:	e2 0f       	add	r30, r18
     fb4:	f3 1f       	adc	r31, r19
     fb6:	80 81       	ld	r24, Z
     fb8:	0e 94 77 07 	call	0xeee	; 0xeee <LCD_vidWrite>
		u8i++;
     fbc:	89 81       	ldd	r24, Y+1	; 0x01
     fbe:	8f 5f       	subi	r24, 0xFF	; 255
     fc0:	89 83       	std	Y+1, r24	; 0x01

void LCD_vidString (int8 I8String[])
{

	uint8 u8i =0;
	while (I8String[u8i])
     fc2:	89 81       	ldd	r24, Y+1	; 0x01
     fc4:	28 2f       	mov	r18, r24
     fc6:	30 e0       	ldi	r19, 0x00	; 0
     fc8:	8a 81       	ldd	r24, Y+2	; 0x02
     fca:	9b 81       	ldd	r25, Y+3	; 0x03
     fcc:	fc 01       	movw	r30, r24
     fce:	e2 0f       	add	r30, r18
     fd0:	f3 1f       	adc	r31, r19
     fd2:	80 81       	ld	r24, Z
     fd4:	88 23       	and	r24, r24
     fd6:	39 f7       	brne	.-50     	; 0xfa6 <LCD_vidString+0x14>
	{
		LCD_vidWrite( I8String[u8i]);
		u8i++;
	}
}
     fd8:	0f 90       	pop	r0
     fda:	0f 90       	pop	r0
     fdc:	0f 90       	pop	r0
     fde:	cf 91       	pop	r28
     fe0:	df 91       	pop	r29
     fe2:	08 95       	ret

00000fe4 <LCD_vidClear>:
void LCD_vidClear ()
{
     fe4:	df 93       	push	r29
     fe6:	cf 93       	push	r28
     fe8:	00 d0       	rcall	.+0      	; 0xfea <LCD_vidClear+0x6>
     fea:	cd b7       	in	r28, 0x3d	; 61
     fec:	de b7       	in	r29, 0x3e	; 62
	for (uint8 y =0;y<2;y++)
     fee:	1a 82       	std	Y+2, r1	; 0x02
     ff0:	21 c0       	rjmp	.+66     	; 0x1034 <LCD_vidClear+0x50>
	{
		for(uint8 x =0 ;x<16;x++)
     ff2:	19 82       	std	Y+1, r1	; 0x01
     ff4:	19 c0       	rjmp	.+50     	; 0x1028 <LCD_vidClear+0x44>
		{
			LCD_LINE[y][x]=' ';
     ff6:	8a 81       	ldd	r24, Y+2	; 0x02
     ff8:	28 2f       	mov	r18, r24
     ffa:	30 e0       	ldi	r19, 0x00	; 0
     ffc:	89 81       	ldd	r24, Y+1	; 0x01
     ffe:	48 2f       	mov	r20, r24
    1000:	50 e0       	ldi	r21, 0x00	; 0
    1002:	c9 01       	movw	r24, r18
    1004:	82 95       	swap	r24
    1006:	92 95       	swap	r25
    1008:	90 7f       	andi	r25, 0xF0	; 240
    100a:	98 27       	eor	r25, r24
    100c:	80 7f       	andi	r24, 0xF0	; 240
    100e:	98 27       	eor	r25, r24
    1010:	82 0f       	add	r24, r18
    1012:	93 1f       	adc	r25, r19
    1014:	84 0f       	add	r24, r20
    1016:	95 1f       	adc	r25, r21
    1018:	fc 01       	movw	r30, r24
    101a:	e6 58       	subi	r30, 0x86	; 134
    101c:	ff 4f       	sbci	r31, 0xFF	; 255
    101e:	80 e2       	ldi	r24, 0x20	; 32
    1020:	80 83       	st	Z, r24
}
void LCD_vidClear ()
{
	for (uint8 y =0;y<2;y++)
	{
		for(uint8 x =0 ;x<16;x++)
    1022:	89 81       	ldd	r24, Y+1	; 0x01
    1024:	8f 5f       	subi	r24, 0xFF	; 255
    1026:	89 83       	std	Y+1, r24	; 0x01
    1028:	89 81       	ldd	r24, Y+1	; 0x01
    102a:	80 31       	cpi	r24, 0x10	; 16
    102c:	20 f3       	brcs	.-56     	; 0xff6 <LCD_vidClear+0x12>
		u8i++;
	}
}
void LCD_vidClear ()
{
	for (uint8 y =0;y<2;y++)
    102e:	8a 81       	ldd	r24, Y+2	; 0x02
    1030:	8f 5f       	subi	r24, 0xFF	; 255
    1032:	8a 83       	std	Y+2, r24	; 0x02
    1034:	8a 81       	ldd	r24, Y+2	; 0x02
    1036:	82 30       	cpi	r24, 0x02	; 2
    1038:	e0 f2       	brcs	.-72     	; 0xff2 <LCD_vidClear+0xe>
		for(uint8 x =0 ;x<16;x++)
		{
			LCD_LINE[y][x]=' ';
		}
	}
	u8x=0;
    103a:	10 92 a9 00 	sts	0x00A9, r1
	u8y=0;
    103e:	10 92 aa 00 	sts	0x00AA, r1
}
    1042:	0f 90       	pop	r0
    1044:	0f 90       	pop	r0
    1046:	cf 91       	pop	r28
    1048:	df 91       	pop	r29
    104a:	08 95       	ret

0000104c <DIO_vidInit>:


#include "DIO_LOCAL.h"

void DIO_vidInit (void)
{
    104c:	df 93       	push	r29
    104e:	cf 93       	push	r28
    1050:	cd b7       	in	r28, 0x3d	; 61
    1052:	de b7       	in	r29, 0x3e	; 62
	//DIO Initialization function

}
    1054:	cf 91       	pop	r28
    1056:	df 91       	pop	r29
    1058:	08 95       	ret

0000105a <DIO_u8SetPinDir>:

uint8 DIO_u8SetPinDir (uint8 u8PinNum , uint8 u8Dir)
{
    105a:	df 93       	push	r29
    105c:	cf 93       	push	r28
    105e:	00 d0       	rcall	.+0      	; 0x1060 <DIO_u8SetPinDir+0x6>
    1060:	00 d0       	rcall	.+0      	; 0x1062 <DIO_u8SetPinDir+0x8>
    1062:	0f 92       	push	r0
    1064:	cd b7       	in	r28, 0x3d	; 61
    1066:	de b7       	in	r29, 0x3e	; 62
    1068:	8a 83       	std	Y+2, r24	; 0x02
    106a:	6b 83       	std	Y+3, r22	; 0x03
	 * 		Pin number 		: 	PORTx_n 	n= 	0:7		x=	A:D
	 *		Pin Direction	:	OUTPUT	/	INPUT 	/ INPUT_PULLUP
	 *
	 */
	// initializing the status of the functions
	uint8 u8Status=ERROR;
    106c:	19 82       	std	Y+1, r1	; 0x01
	// checking the inputs of the functions
	if ((u8PinNum<DIO_PINS_MAX)&&(u8Dir<DIO_PIN_DIR_MAX))
    106e:	8a 81       	ldd	r24, Y+2	; 0x02
    1070:	80 32       	cpi	r24, 0x20	; 32
    1072:	08 f0       	brcs	.+2      	; 0x1076 <DIO_u8SetPinDir+0x1c>
    1074:	85 c1       	rjmp	.+778    	; 0x1380 <DIO_u8SetPinDir+0x326>
    1076:	8b 81       	ldd	r24, Y+3	; 0x03
    1078:	83 30       	cpi	r24, 0x03	; 3
    107a:	08 f0       	brcs	.+2      	; 0x107e <DIO_u8SetPinDir+0x24>
    107c:	81 c1       	rjmp	.+770    	; 0x1380 <DIO_u8SetPinDir+0x326>
	{
		u8Status = SUCCESS;
    107e:	81 e0       	ldi	r24, 0x01	; 1
    1080:	89 83       	std	Y+1, r24	; 0x01
		// calculating the port no.
		switch(u8PinNum/8)
    1082:	8a 81       	ldd	r24, Y+2	; 0x02
    1084:	86 95       	lsr	r24
    1086:	86 95       	lsr	r24
    1088:	86 95       	lsr	r24
    108a:	28 2f       	mov	r18, r24
    108c:	30 e0       	ldi	r19, 0x00	; 0
    108e:	3d 83       	std	Y+5, r19	; 0x05
    1090:	2c 83       	std	Y+4, r18	; 0x04
    1092:	6c 81       	ldd	r22, Y+4	; 0x04
    1094:	7d 81       	ldd	r23, Y+5	; 0x05
    1096:	61 30       	cpi	r22, 0x01	; 1
    1098:	71 05       	cpc	r23, r1
    109a:	09 f4       	brne	.+2      	; 0x109e <DIO_u8SetPinDir+0x44>
    109c:	6e c0       	rjmp	.+220    	; 0x117a <DIO_u8SetPinDir+0x120>
    109e:	8c 81       	ldd	r24, Y+4	; 0x04
    10a0:	9d 81       	ldd	r25, Y+5	; 0x05
    10a2:	82 30       	cpi	r24, 0x02	; 2
    10a4:	91 05       	cpc	r25, r1
    10a6:	34 f4       	brge	.+12     	; 0x10b4 <DIO_u8SetPinDir+0x5a>
    10a8:	2c 81       	ldd	r18, Y+4	; 0x04
    10aa:	3d 81       	ldd	r19, Y+5	; 0x05
    10ac:	21 15       	cp	r18, r1
    10ae:	31 05       	cpc	r19, r1
    10b0:	71 f0       	breq	.+28     	; 0x10ce <DIO_u8SetPinDir+0x74>
    10b2:	65 c1       	rjmp	.+714    	; 0x137e <DIO_u8SetPinDir+0x324>
    10b4:	6c 81       	ldd	r22, Y+4	; 0x04
    10b6:	7d 81       	ldd	r23, Y+5	; 0x05
    10b8:	62 30       	cpi	r22, 0x02	; 2
    10ba:	71 05       	cpc	r23, r1
    10bc:	09 f4       	brne	.+2      	; 0x10c0 <DIO_u8SetPinDir+0x66>
    10be:	b3 c0       	rjmp	.+358    	; 0x1226 <DIO_u8SetPinDir+0x1cc>
    10c0:	8c 81       	ldd	r24, Y+4	; 0x04
    10c2:	9d 81       	ldd	r25, Y+5	; 0x05
    10c4:	83 30       	cpi	r24, 0x03	; 3
    10c6:	91 05       	cpc	r25, r1
    10c8:	09 f4       	brne	.+2      	; 0x10cc <DIO_u8SetPinDir+0x72>
    10ca:	03 c1       	rjmp	.+518    	; 0x12d2 <DIO_u8SetPinDir+0x278>
    10cc:	58 c1       	rjmp	.+688    	; 0x137e <DIO_u8SetPinDir+0x324>
		{
		case PORT_A : //PORTA
			// Write pin direction
			Assign_Bit(DDRA ,u8PinNum % 8, Get_Bit(u8Dir,0) );
    10ce:	aa e3       	ldi	r26, 0x3A	; 58
    10d0:	b0 e0       	ldi	r27, 0x00	; 0
    10d2:	8a 81       	ldd	r24, Y+2	; 0x02
    10d4:	88 2f       	mov	r24, r24
    10d6:	90 e0       	ldi	r25, 0x00	; 0
    10d8:	9c 01       	movw	r18, r24
    10da:	27 70       	andi	r18, 0x07	; 7
    10dc:	30 70       	andi	r19, 0x00	; 0
    10de:	81 e0       	ldi	r24, 0x01	; 1
    10e0:	90 e0       	ldi	r25, 0x00	; 0
    10e2:	02 c0       	rjmp	.+4      	; 0x10e8 <DIO_u8SetPinDir+0x8e>
    10e4:	88 0f       	add	r24, r24
    10e6:	99 1f       	adc	r25, r25
    10e8:	2a 95       	dec	r18
    10ea:	e2 f7       	brpl	.-8      	; 0x10e4 <DIO_u8SetPinDir+0x8a>
    10ec:	98 2f       	mov	r25, r24
    10ee:	90 95       	com	r25
    10f0:	ea e3       	ldi	r30, 0x3A	; 58
    10f2:	f0 e0       	ldi	r31, 0x00	; 0
    10f4:	80 81       	ld	r24, Z
    10f6:	49 2f       	mov	r20, r25
    10f8:	48 23       	and	r20, r24
    10fa:	8b 81       	ldd	r24, Y+3	; 0x03
    10fc:	88 2f       	mov	r24, r24
    10fe:	90 e0       	ldi	r25, 0x00	; 0
    1100:	9c 01       	movw	r18, r24
    1102:	21 70       	andi	r18, 0x01	; 1
    1104:	30 70       	andi	r19, 0x00	; 0
    1106:	8a 81       	ldd	r24, Y+2	; 0x02
    1108:	88 2f       	mov	r24, r24
    110a:	90 e0       	ldi	r25, 0x00	; 0
    110c:	87 70       	andi	r24, 0x07	; 7
    110e:	90 70       	andi	r25, 0x00	; 0
    1110:	b9 01       	movw	r22, r18
    1112:	02 c0       	rjmp	.+4      	; 0x1118 <DIO_u8SetPinDir+0xbe>
    1114:	66 0f       	add	r22, r22
    1116:	77 1f       	adc	r23, r23
    1118:	8a 95       	dec	r24
    111a:	e2 f7       	brpl	.-8      	; 0x1114 <DIO_u8SetPinDir+0xba>
    111c:	cb 01       	movw	r24, r22
    111e:	84 2b       	or	r24, r20
    1120:	8c 93       	st	X, r24
			// Write pin pullup state
			Assign_Bit(PORTA,u8PinNum % 8, Get_Bit(u8Dir,1) );
    1122:	ab e3       	ldi	r26, 0x3B	; 59
    1124:	b0 e0       	ldi	r27, 0x00	; 0
    1126:	8a 81       	ldd	r24, Y+2	; 0x02
    1128:	88 2f       	mov	r24, r24
    112a:	90 e0       	ldi	r25, 0x00	; 0
    112c:	9c 01       	movw	r18, r24
    112e:	27 70       	andi	r18, 0x07	; 7
    1130:	30 70       	andi	r19, 0x00	; 0
    1132:	81 e0       	ldi	r24, 0x01	; 1
    1134:	90 e0       	ldi	r25, 0x00	; 0
    1136:	02 c0       	rjmp	.+4      	; 0x113c <DIO_u8SetPinDir+0xe2>
    1138:	88 0f       	add	r24, r24
    113a:	99 1f       	adc	r25, r25
    113c:	2a 95       	dec	r18
    113e:	e2 f7       	brpl	.-8      	; 0x1138 <DIO_u8SetPinDir+0xde>
    1140:	98 2f       	mov	r25, r24
    1142:	90 95       	com	r25
    1144:	eb e3       	ldi	r30, 0x3B	; 59
    1146:	f0 e0       	ldi	r31, 0x00	; 0
    1148:	80 81       	ld	r24, Z
    114a:	49 2f       	mov	r20, r25
    114c:	48 23       	and	r20, r24
    114e:	8b 81       	ldd	r24, Y+3	; 0x03
    1150:	86 95       	lsr	r24
    1152:	88 2f       	mov	r24, r24
    1154:	90 e0       	ldi	r25, 0x00	; 0
    1156:	9c 01       	movw	r18, r24
    1158:	21 70       	andi	r18, 0x01	; 1
    115a:	30 70       	andi	r19, 0x00	; 0
    115c:	8a 81       	ldd	r24, Y+2	; 0x02
    115e:	88 2f       	mov	r24, r24
    1160:	90 e0       	ldi	r25, 0x00	; 0
    1162:	87 70       	andi	r24, 0x07	; 7
    1164:	90 70       	andi	r25, 0x00	; 0
    1166:	b9 01       	movw	r22, r18
    1168:	02 c0       	rjmp	.+4      	; 0x116e <DIO_u8SetPinDir+0x114>
    116a:	66 0f       	add	r22, r22
    116c:	77 1f       	adc	r23, r23
    116e:	8a 95       	dec	r24
    1170:	e2 f7       	brpl	.-8      	; 0x116a <DIO_u8SetPinDir+0x110>
    1172:	cb 01       	movw	r24, r22
    1174:	84 2b       	or	r24, r20
    1176:	8c 93       	st	X, r24
    1178:	03 c1       	rjmp	.+518    	; 0x1380 <DIO_u8SetPinDir+0x326>
			break;
		case PORT_B : //PORTB
			// Write pin direction
			Assign_Bit(DDRB ,u8PinNum % 8, Get_Bit(u8Dir,0) );
    117a:	a7 e3       	ldi	r26, 0x37	; 55
    117c:	b0 e0       	ldi	r27, 0x00	; 0
    117e:	8a 81       	ldd	r24, Y+2	; 0x02
    1180:	88 2f       	mov	r24, r24
    1182:	90 e0       	ldi	r25, 0x00	; 0
    1184:	9c 01       	movw	r18, r24
    1186:	27 70       	andi	r18, 0x07	; 7
    1188:	30 70       	andi	r19, 0x00	; 0
    118a:	81 e0       	ldi	r24, 0x01	; 1
    118c:	90 e0       	ldi	r25, 0x00	; 0
    118e:	02 c0       	rjmp	.+4      	; 0x1194 <DIO_u8SetPinDir+0x13a>
    1190:	88 0f       	add	r24, r24
    1192:	99 1f       	adc	r25, r25
    1194:	2a 95       	dec	r18
    1196:	e2 f7       	brpl	.-8      	; 0x1190 <DIO_u8SetPinDir+0x136>
    1198:	98 2f       	mov	r25, r24
    119a:	90 95       	com	r25
    119c:	e7 e3       	ldi	r30, 0x37	; 55
    119e:	f0 e0       	ldi	r31, 0x00	; 0
    11a0:	80 81       	ld	r24, Z
    11a2:	49 2f       	mov	r20, r25
    11a4:	48 23       	and	r20, r24
    11a6:	8b 81       	ldd	r24, Y+3	; 0x03
    11a8:	88 2f       	mov	r24, r24
    11aa:	90 e0       	ldi	r25, 0x00	; 0
    11ac:	9c 01       	movw	r18, r24
    11ae:	21 70       	andi	r18, 0x01	; 1
    11b0:	30 70       	andi	r19, 0x00	; 0
    11b2:	8a 81       	ldd	r24, Y+2	; 0x02
    11b4:	88 2f       	mov	r24, r24
    11b6:	90 e0       	ldi	r25, 0x00	; 0
    11b8:	87 70       	andi	r24, 0x07	; 7
    11ba:	90 70       	andi	r25, 0x00	; 0
    11bc:	b9 01       	movw	r22, r18
    11be:	02 c0       	rjmp	.+4      	; 0x11c4 <DIO_u8SetPinDir+0x16a>
    11c0:	66 0f       	add	r22, r22
    11c2:	77 1f       	adc	r23, r23
    11c4:	8a 95       	dec	r24
    11c6:	e2 f7       	brpl	.-8      	; 0x11c0 <DIO_u8SetPinDir+0x166>
    11c8:	cb 01       	movw	r24, r22
    11ca:	84 2b       	or	r24, r20
    11cc:	8c 93       	st	X, r24
			// Write pin pullup state
			Assign_Bit(PORTB,u8PinNum % 8, Get_Bit(u8Dir,1) );
    11ce:	a8 e3       	ldi	r26, 0x38	; 56
    11d0:	b0 e0       	ldi	r27, 0x00	; 0
    11d2:	8a 81       	ldd	r24, Y+2	; 0x02
    11d4:	88 2f       	mov	r24, r24
    11d6:	90 e0       	ldi	r25, 0x00	; 0
    11d8:	9c 01       	movw	r18, r24
    11da:	27 70       	andi	r18, 0x07	; 7
    11dc:	30 70       	andi	r19, 0x00	; 0
    11de:	81 e0       	ldi	r24, 0x01	; 1
    11e0:	90 e0       	ldi	r25, 0x00	; 0
    11e2:	02 c0       	rjmp	.+4      	; 0x11e8 <DIO_u8SetPinDir+0x18e>
    11e4:	88 0f       	add	r24, r24
    11e6:	99 1f       	adc	r25, r25
    11e8:	2a 95       	dec	r18
    11ea:	e2 f7       	brpl	.-8      	; 0x11e4 <DIO_u8SetPinDir+0x18a>
    11ec:	98 2f       	mov	r25, r24
    11ee:	90 95       	com	r25
    11f0:	e8 e3       	ldi	r30, 0x38	; 56
    11f2:	f0 e0       	ldi	r31, 0x00	; 0
    11f4:	80 81       	ld	r24, Z
    11f6:	49 2f       	mov	r20, r25
    11f8:	48 23       	and	r20, r24
    11fa:	8b 81       	ldd	r24, Y+3	; 0x03
    11fc:	86 95       	lsr	r24
    11fe:	88 2f       	mov	r24, r24
    1200:	90 e0       	ldi	r25, 0x00	; 0
    1202:	9c 01       	movw	r18, r24
    1204:	21 70       	andi	r18, 0x01	; 1
    1206:	30 70       	andi	r19, 0x00	; 0
    1208:	8a 81       	ldd	r24, Y+2	; 0x02
    120a:	88 2f       	mov	r24, r24
    120c:	90 e0       	ldi	r25, 0x00	; 0
    120e:	87 70       	andi	r24, 0x07	; 7
    1210:	90 70       	andi	r25, 0x00	; 0
    1212:	b9 01       	movw	r22, r18
    1214:	02 c0       	rjmp	.+4      	; 0x121a <DIO_u8SetPinDir+0x1c0>
    1216:	66 0f       	add	r22, r22
    1218:	77 1f       	adc	r23, r23
    121a:	8a 95       	dec	r24
    121c:	e2 f7       	brpl	.-8      	; 0x1216 <DIO_u8SetPinDir+0x1bc>
    121e:	cb 01       	movw	r24, r22
    1220:	84 2b       	or	r24, r20
    1222:	8c 93       	st	X, r24
    1224:	ad c0       	rjmp	.+346    	; 0x1380 <DIO_u8SetPinDir+0x326>
			break;
		case PORT_C : //PORTC
			// Write pin direction
			Assign_Bit(DDRC ,u8PinNum % 8, Get_Bit(u8Dir,0) );
    1226:	a4 e3       	ldi	r26, 0x34	; 52
    1228:	b0 e0       	ldi	r27, 0x00	; 0
    122a:	8a 81       	ldd	r24, Y+2	; 0x02
    122c:	88 2f       	mov	r24, r24
    122e:	90 e0       	ldi	r25, 0x00	; 0
    1230:	9c 01       	movw	r18, r24
    1232:	27 70       	andi	r18, 0x07	; 7
    1234:	30 70       	andi	r19, 0x00	; 0
    1236:	81 e0       	ldi	r24, 0x01	; 1
    1238:	90 e0       	ldi	r25, 0x00	; 0
    123a:	02 c0       	rjmp	.+4      	; 0x1240 <DIO_u8SetPinDir+0x1e6>
    123c:	88 0f       	add	r24, r24
    123e:	99 1f       	adc	r25, r25
    1240:	2a 95       	dec	r18
    1242:	e2 f7       	brpl	.-8      	; 0x123c <DIO_u8SetPinDir+0x1e2>
    1244:	98 2f       	mov	r25, r24
    1246:	90 95       	com	r25
    1248:	e4 e3       	ldi	r30, 0x34	; 52
    124a:	f0 e0       	ldi	r31, 0x00	; 0
    124c:	80 81       	ld	r24, Z
    124e:	49 2f       	mov	r20, r25
    1250:	48 23       	and	r20, r24
    1252:	8b 81       	ldd	r24, Y+3	; 0x03
    1254:	88 2f       	mov	r24, r24
    1256:	90 e0       	ldi	r25, 0x00	; 0
    1258:	9c 01       	movw	r18, r24
    125a:	21 70       	andi	r18, 0x01	; 1
    125c:	30 70       	andi	r19, 0x00	; 0
    125e:	8a 81       	ldd	r24, Y+2	; 0x02
    1260:	88 2f       	mov	r24, r24
    1262:	90 e0       	ldi	r25, 0x00	; 0
    1264:	87 70       	andi	r24, 0x07	; 7
    1266:	90 70       	andi	r25, 0x00	; 0
    1268:	b9 01       	movw	r22, r18
    126a:	02 c0       	rjmp	.+4      	; 0x1270 <DIO_u8SetPinDir+0x216>
    126c:	66 0f       	add	r22, r22
    126e:	77 1f       	adc	r23, r23
    1270:	8a 95       	dec	r24
    1272:	e2 f7       	brpl	.-8      	; 0x126c <DIO_u8SetPinDir+0x212>
    1274:	cb 01       	movw	r24, r22
    1276:	84 2b       	or	r24, r20
    1278:	8c 93       	st	X, r24
			// Write pin pullup state
			Assign_Bit(PORTC,u8PinNum % 8, Get_Bit(u8Dir,1) );
    127a:	a5 e3       	ldi	r26, 0x35	; 53
    127c:	b0 e0       	ldi	r27, 0x00	; 0
    127e:	8a 81       	ldd	r24, Y+2	; 0x02
    1280:	88 2f       	mov	r24, r24
    1282:	90 e0       	ldi	r25, 0x00	; 0
    1284:	9c 01       	movw	r18, r24
    1286:	27 70       	andi	r18, 0x07	; 7
    1288:	30 70       	andi	r19, 0x00	; 0
    128a:	81 e0       	ldi	r24, 0x01	; 1
    128c:	90 e0       	ldi	r25, 0x00	; 0
    128e:	02 c0       	rjmp	.+4      	; 0x1294 <DIO_u8SetPinDir+0x23a>
    1290:	88 0f       	add	r24, r24
    1292:	99 1f       	adc	r25, r25
    1294:	2a 95       	dec	r18
    1296:	e2 f7       	brpl	.-8      	; 0x1290 <DIO_u8SetPinDir+0x236>
    1298:	98 2f       	mov	r25, r24
    129a:	90 95       	com	r25
    129c:	e5 e3       	ldi	r30, 0x35	; 53
    129e:	f0 e0       	ldi	r31, 0x00	; 0
    12a0:	80 81       	ld	r24, Z
    12a2:	49 2f       	mov	r20, r25
    12a4:	48 23       	and	r20, r24
    12a6:	8b 81       	ldd	r24, Y+3	; 0x03
    12a8:	86 95       	lsr	r24
    12aa:	88 2f       	mov	r24, r24
    12ac:	90 e0       	ldi	r25, 0x00	; 0
    12ae:	9c 01       	movw	r18, r24
    12b0:	21 70       	andi	r18, 0x01	; 1
    12b2:	30 70       	andi	r19, 0x00	; 0
    12b4:	8a 81       	ldd	r24, Y+2	; 0x02
    12b6:	88 2f       	mov	r24, r24
    12b8:	90 e0       	ldi	r25, 0x00	; 0
    12ba:	87 70       	andi	r24, 0x07	; 7
    12bc:	90 70       	andi	r25, 0x00	; 0
    12be:	b9 01       	movw	r22, r18
    12c0:	02 c0       	rjmp	.+4      	; 0x12c6 <DIO_u8SetPinDir+0x26c>
    12c2:	66 0f       	add	r22, r22
    12c4:	77 1f       	adc	r23, r23
    12c6:	8a 95       	dec	r24
    12c8:	e2 f7       	brpl	.-8      	; 0x12c2 <DIO_u8SetPinDir+0x268>
    12ca:	cb 01       	movw	r24, r22
    12cc:	84 2b       	or	r24, r20
    12ce:	8c 93       	st	X, r24
    12d0:	57 c0       	rjmp	.+174    	; 0x1380 <DIO_u8SetPinDir+0x326>
			break;
		case PORT_D : //PORTD
			// Write pin direction
			Assign_Bit(DDRD ,u8PinNum % 8, Get_Bit(u8Dir,0) );
    12d2:	a1 e3       	ldi	r26, 0x31	; 49
    12d4:	b0 e0       	ldi	r27, 0x00	; 0
    12d6:	8a 81       	ldd	r24, Y+2	; 0x02
    12d8:	88 2f       	mov	r24, r24
    12da:	90 e0       	ldi	r25, 0x00	; 0
    12dc:	9c 01       	movw	r18, r24
    12de:	27 70       	andi	r18, 0x07	; 7
    12e0:	30 70       	andi	r19, 0x00	; 0
    12e2:	81 e0       	ldi	r24, 0x01	; 1
    12e4:	90 e0       	ldi	r25, 0x00	; 0
    12e6:	02 c0       	rjmp	.+4      	; 0x12ec <DIO_u8SetPinDir+0x292>
    12e8:	88 0f       	add	r24, r24
    12ea:	99 1f       	adc	r25, r25
    12ec:	2a 95       	dec	r18
    12ee:	e2 f7       	brpl	.-8      	; 0x12e8 <DIO_u8SetPinDir+0x28e>
    12f0:	98 2f       	mov	r25, r24
    12f2:	90 95       	com	r25
    12f4:	e1 e3       	ldi	r30, 0x31	; 49
    12f6:	f0 e0       	ldi	r31, 0x00	; 0
    12f8:	80 81       	ld	r24, Z
    12fa:	49 2f       	mov	r20, r25
    12fc:	48 23       	and	r20, r24
    12fe:	8b 81       	ldd	r24, Y+3	; 0x03
    1300:	88 2f       	mov	r24, r24
    1302:	90 e0       	ldi	r25, 0x00	; 0
    1304:	9c 01       	movw	r18, r24
    1306:	21 70       	andi	r18, 0x01	; 1
    1308:	30 70       	andi	r19, 0x00	; 0
    130a:	8a 81       	ldd	r24, Y+2	; 0x02
    130c:	88 2f       	mov	r24, r24
    130e:	90 e0       	ldi	r25, 0x00	; 0
    1310:	87 70       	andi	r24, 0x07	; 7
    1312:	90 70       	andi	r25, 0x00	; 0
    1314:	b9 01       	movw	r22, r18
    1316:	02 c0       	rjmp	.+4      	; 0x131c <DIO_u8SetPinDir+0x2c2>
    1318:	66 0f       	add	r22, r22
    131a:	77 1f       	adc	r23, r23
    131c:	8a 95       	dec	r24
    131e:	e2 f7       	brpl	.-8      	; 0x1318 <DIO_u8SetPinDir+0x2be>
    1320:	cb 01       	movw	r24, r22
    1322:	84 2b       	or	r24, r20
    1324:	8c 93       	st	X, r24
			// Write pin pullup state
			Assign_Bit(PORTD,u8PinNum % 8, Get_Bit(u8Dir,1) );
    1326:	a2 e3       	ldi	r26, 0x32	; 50
    1328:	b0 e0       	ldi	r27, 0x00	; 0
    132a:	8a 81       	ldd	r24, Y+2	; 0x02
    132c:	88 2f       	mov	r24, r24
    132e:	90 e0       	ldi	r25, 0x00	; 0
    1330:	9c 01       	movw	r18, r24
    1332:	27 70       	andi	r18, 0x07	; 7
    1334:	30 70       	andi	r19, 0x00	; 0
    1336:	81 e0       	ldi	r24, 0x01	; 1
    1338:	90 e0       	ldi	r25, 0x00	; 0
    133a:	02 c0       	rjmp	.+4      	; 0x1340 <DIO_u8SetPinDir+0x2e6>
    133c:	88 0f       	add	r24, r24
    133e:	99 1f       	adc	r25, r25
    1340:	2a 95       	dec	r18
    1342:	e2 f7       	brpl	.-8      	; 0x133c <DIO_u8SetPinDir+0x2e2>
    1344:	98 2f       	mov	r25, r24
    1346:	90 95       	com	r25
    1348:	e2 e3       	ldi	r30, 0x32	; 50
    134a:	f0 e0       	ldi	r31, 0x00	; 0
    134c:	80 81       	ld	r24, Z
    134e:	49 2f       	mov	r20, r25
    1350:	48 23       	and	r20, r24
    1352:	8b 81       	ldd	r24, Y+3	; 0x03
    1354:	86 95       	lsr	r24
    1356:	88 2f       	mov	r24, r24
    1358:	90 e0       	ldi	r25, 0x00	; 0
    135a:	9c 01       	movw	r18, r24
    135c:	21 70       	andi	r18, 0x01	; 1
    135e:	30 70       	andi	r19, 0x00	; 0
    1360:	8a 81       	ldd	r24, Y+2	; 0x02
    1362:	88 2f       	mov	r24, r24
    1364:	90 e0       	ldi	r25, 0x00	; 0
    1366:	87 70       	andi	r24, 0x07	; 7
    1368:	90 70       	andi	r25, 0x00	; 0
    136a:	b9 01       	movw	r22, r18
    136c:	02 c0       	rjmp	.+4      	; 0x1372 <DIO_u8SetPinDir+0x318>
    136e:	66 0f       	add	r22, r22
    1370:	77 1f       	adc	r23, r23
    1372:	8a 95       	dec	r24
    1374:	e2 f7       	brpl	.-8      	; 0x136e <DIO_u8SetPinDir+0x314>
    1376:	cb 01       	movw	r24, r22
    1378:	84 2b       	or	r24, r20
    137a:	8c 93       	st	X, r24
    137c:	01 c0       	rjmp	.+2      	; 0x1380 <DIO_u8SetPinDir+0x326>
			break;
		default:
			u8Status=ERROR;
    137e:	19 82       	std	Y+1, r1	; 0x01
			break;
		}

	}
	return u8Status;
    1380:	89 81       	ldd	r24, Y+1	; 0x01

}
    1382:	0f 90       	pop	r0
    1384:	0f 90       	pop	r0
    1386:	0f 90       	pop	r0
    1388:	0f 90       	pop	r0
    138a:	0f 90       	pop	r0
    138c:	cf 91       	pop	r28
    138e:	df 91       	pop	r29
    1390:	08 95       	ret

00001392 <DIO_u8WritePin>:

uint8 DIO_u8WritePin (uint8 u8PinNum , uint8 u8Data)
{
    1392:	df 93       	push	r29
    1394:	cf 93       	push	r28
    1396:	00 d0       	rcall	.+0      	; 0x1398 <DIO_u8WritePin+0x6>
    1398:	00 d0       	rcall	.+0      	; 0x139a <DIO_u8WritePin+0x8>
    139a:	0f 92       	push	r0
    139c:	cd b7       	in	r28, 0x3d	; 61
    139e:	de b7       	in	r29, 0x3e	; 62
    13a0:	8a 83       	std	Y+2, r24	; 0x02
    13a2:	6b 83       	std	Y+3, r22	; 0x03
	 * 		Pin number 		: 	PORTx_n 	n= 	0:7		x=	A:D
	 *		Pin Data		:	HIGH	/	LOW
	 *
	 */
	// initializing the status of the functions
	uint8 u8Status=ERROR;
    13a4:	19 82       	std	Y+1, r1	; 0x01
	// checking the inputs of the functions
	if ((u8PinNum<DIO_PINS_MAX)&&(u8Data<DIO_DATA_ERROR))
    13a6:	8a 81       	ldd	r24, Y+2	; 0x02
    13a8:	80 32       	cpi	r24, 0x20	; 32
    13aa:	08 f0       	brcs	.+2      	; 0x13ae <DIO_u8WritePin+0x1c>
    13ac:	d9 c0       	rjmp	.+434    	; 0x1560 <DIO_u8WritePin+0x1ce>
    13ae:	8b 81       	ldd	r24, Y+3	; 0x03
    13b0:	82 30       	cpi	r24, 0x02	; 2
    13b2:	08 f0       	brcs	.+2      	; 0x13b6 <DIO_u8WritePin+0x24>
    13b4:	d5 c0       	rjmp	.+426    	; 0x1560 <DIO_u8WritePin+0x1ce>
	{
		u8Status=SUCCESS;
    13b6:	81 e0       	ldi	r24, 0x01	; 1
    13b8:	89 83       	std	Y+1, r24	; 0x01
		// calculating the port no.
		switch(u8PinNum/8)
    13ba:	8a 81       	ldd	r24, Y+2	; 0x02
    13bc:	86 95       	lsr	r24
    13be:	86 95       	lsr	r24
    13c0:	86 95       	lsr	r24
    13c2:	28 2f       	mov	r18, r24
    13c4:	30 e0       	ldi	r19, 0x00	; 0
    13c6:	3d 83       	std	Y+5, r19	; 0x05
    13c8:	2c 83       	std	Y+4, r18	; 0x04
    13ca:	6c 81       	ldd	r22, Y+4	; 0x04
    13cc:	7d 81       	ldd	r23, Y+5	; 0x05
    13ce:	61 30       	cpi	r22, 0x01	; 1
    13d0:	71 05       	cpc	r23, r1
    13d2:	09 f4       	brne	.+2      	; 0x13d6 <DIO_u8WritePin+0x44>
    13d4:	43 c0       	rjmp	.+134    	; 0x145c <DIO_u8WritePin+0xca>
    13d6:	8c 81       	ldd	r24, Y+4	; 0x04
    13d8:	9d 81       	ldd	r25, Y+5	; 0x05
    13da:	82 30       	cpi	r24, 0x02	; 2
    13dc:	91 05       	cpc	r25, r1
    13de:	34 f4       	brge	.+12     	; 0x13ec <DIO_u8WritePin+0x5a>
    13e0:	2c 81       	ldd	r18, Y+4	; 0x04
    13e2:	3d 81       	ldd	r19, Y+5	; 0x05
    13e4:	21 15       	cp	r18, r1
    13e6:	31 05       	cpc	r19, r1
    13e8:	71 f0       	breq	.+28     	; 0x1406 <DIO_u8WritePin+0x74>
    13ea:	b9 c0       	rjmp	.+370    	; 0x155e <DIO_u8WritePin+0x1cc>
    13ec:	6c 81       	ldd	r22, Y+4	; 0x04
    13ee:	7d 81       	ldd	r23, Y+5	; 0x05
    13f0:	62 30       	cpi	r22, 0x02	; 2
    13f2:	71 05       	cpc	r23, r1
    13f4:	09 f4       	brne	.+2      	; 0x13f8 <DIO_u8WritePin+0x66>
    13f6:	5d c0       	rjmp	.+186    	; 0x14b2 <DIO_u8WritePin+0x120>
    13f8:	8c 81       	ldd	r24, Y+4	; 0x04
    13fa:	9d 81       	ldd	r25, Y+5	; 0x05
    13fc:	83 30       	cpi	r24, 0x03	; 3
    13fe:	91 05       	cpc	r25, r1
    1400:	09 f4       	brne	.+2      	; 0x1404 <DIO_u8WritePin+0x72>
    1402:	82 c0       	rjmp	.+260    	; 0x1508 <DIO_u8WritePin+0x176>
    1404:	ac c0       	rjmp	.+344    	; 0x155e <DIO_u8WritePin+0x1cc>
		{
		case PORT_A : //PORTA
			// Write pin values
			Assign_Bit(PORTA ,u8PinNum % 8, u8Data );
    1406:	ab e3       	ldi	r26, 0x3B	; 59
    1408:	b0 e0       	ldi	r27, 0x00	; 0
    140a:	8a 81       	ldd	r24, Y+2	; 0x02
    140c:	88 2f       	mov	r24, r24
    140e:	90 e0       	ldi	r25, 0x00	; 0
    1410:	9c 01       	movw	r18, r24
    1412:	27 70       	andi	r18, 0x07	; 7
    1414:	30 70       	andi	r19, 0x00	; 0
    1416:	81 e0       	ldi	r24, 0x01	; 1
    1418:	90 e0       	ldi	r25, 0x00	; 0
    141a:	02 c0       	rjmp	.+4      	; 0x1420 <DIO_u8WritePin+0x8e>
    141c:	88 0f       	add	r24, r24
    141e:	99 1f       	adc	r25, r25
    1420:	2a 95       	dec	r18
    1422:	e2 f7       	brpl	.-8      	; 0x141c <DIO_u8WritePin+0x8a>
    1424:	98 2f       	mov	r25, r24
    1426:	90 95       	com	r25
    1428:	eb e3       	ldi	r30, 0x3B	; 59
    142a:	f0 e0       	ldi	r31, 0x00	; 0
    142c:	80 81       	ld	r24, Z
    142e:	49 2f       	mov	r20, r25
    1430:	48 23       	and	r20, r24
    1432:	8b 81       	ldd	r24, Y+3	; 0x03
    1434:	88 2f       	mov	r24, r24
    1436:	90 e0       	ldi	r25, 0x00	; 0
    1438:	9c 01       	movw	r18, r24
    143a:	21 70       	andi	r18, 0x01	; 1
    143c:	30 70       	andi	r19, 0x00	; 0
    143e:	8a 81       	ldd	r24, Y+2	; 0x02
    1440:	88 2f       	mov	r24, r24
    1442:	90 e0       	ldi	r25, 0x00	; 0
    1444:	87 70       	andi	r24, 0x07	; 7
    1446:	90 70       	andi	r25, 0x00	; 0
    1448:	b9 01       	movw	r22, r18
    144a:	02 c0       	rjmp	.+4      	; 0x1450 <DIO_u8WritePin+0xbe>
    144c:	66 0f       	add	r22, r22
    144e:	77 1f       	adc	r23, r23
    1450:	8a 95       	dec	r24
    1452:	e2 f7       	brpl	.-8      	; 0x144c <DIO_u8WritePin+0xba>
    1454:	cb 01       	movw	r24, r22
    1456:	84 2b       	or	r24, r20
    1458:	8c 93       	st	X, r24
    145a:	82 c0       	rjmp	.+260    	; 0x1560 <DIO_u8WritePin+0x1ce>
			break;
		case PORT_B : //PORTB
			// Write pin values
			Assign_Bit(PORTB ,u8PinNum % 8, u8Data );
    145c:	a8 e3       	ldi	r26, 0x38	; 56
    145e:	b0 e0       	ldi	r27, 0x00	; 0
    1460:	8a 81       	ldd	r24, Y+2	; 0x02
    1462:	88 2f       	mov	r24, r24
    1464:	90 e0       	ldi	r25, 0x00	; 0
    1466:	9c 01       	movw	r18, r24
    1468:	27 70       	andi	r18, 0x07	; 7
    146a:	30 70       	andi	r19, 0x00	; 0
    146c:	81 e0       	ldi	r24, 0x01	; 1
    146e:	90 e0       	ldi	r25, 0x00	; 0
    1470:	02 c0       	rjmp	.+4      	; 0x1476 <DIO_u8WritePin+0xe4>
    1472:	88 0f       	add	r24, r24
    1474:	99 1f       	adc	r25, r25
    1476:	2a 95       	dec	r18
    1478:	e2 f7       	brpl	.-8      	; 0x1472 <DIO_u8WritePin+0xe0>
    147a:	98 2f       	mov	r25, r24
    147c:	90 95       	com	r25
    147e:	e8 e3       	ldi	r30, 0x38	; 56
    1480:	f0 e0       	ldi	r31, 0x00	; 0
    1482:	80 81       	ld	r24, Z
    1484:	49 2f       	mov	r20, r25
    1486:	48 23       	and	r20, r24
    1488:	8b 81       	ldd	r24, Y+3	; 0x03
    148a:	88 2f       	mov	r24, r24
    148c:	90 e0       	ldi	r25, 0x00	; 0
    148e:	9c 01       	movw	r18, r24
    1490:	21 70       	andi	r18, 0x01	; 1
    1492:	30 70       	andi	r19, 0x00	; 0
    1494:	8a 81       	ldd	r24, Y+2	; 0x02
    1496:	88 2f       	mov	r24, r24
    1498:	90 e0       	ldi	r25, 0x00	; 0
    149a:	87 70       	andi	r24, 0x07	; 7
    149c:	90 70       	andi	r25, 0x00	; 0
    149e:	b9 01       	movw	r22, r18
    14a0:	02 c0       	rjmp	.+4      	; 0x14a6 <DIO_u8WritePin+0x114>
    14a2:	66 0f       	add	r22, r22
    14a4:	77 1f       	adc	r23, r23
    14a6:	8a 95       	dec	r24
    14a8:	e2 f7       	brpl	.-8      	; 0x14a2 <DIO_u8WritePin+0x110>
    14aa:	cb 01       	movw	r24, r22
    14ac:	84 2b       	or	r24, r20
    14ae:	8c 93       	st	X, r24
    14b0:	57 c0       	rjmp	.+174    	; 0x1560 <DIO_u8WritePin+0x1ce>
			break;
		case PORT_C : //PORTC
			// Write pin values
			Assign_Bit(PORTC ,u8PinNum % 8, u8Data );
    14b2:	a5 e3       	ldi	r26, 0x35	; 53
    14b4:	b0 e0       	ldi	r27, 0x00	; 0
    14b6:	8a 81       	ldd	r24, Y+2	; 0x02
    14b8:	88 2f       	mov	r24, r24
    14ba:	90 e0       	ldi	r25, 0x00	; 0
    14bc:	9c 01       	movw	r18, r24
    14be:	27 70       	andi	r18, 0x07	; 7
    14c0:	30 70       	andi	r19, 0x00	; 0
    14c2:	81 e0       	ldi	r24, 0x01	; 1
    14c4:	90 e0       	ldi	r25, 0x00	; 0
    14c6:	02 c0       	rjmp	.+4      	; 0x14cc <DIO_u8WritePin+0x13a>
    14c8:	88 0f       	add	r24, r24
    14ca:	99 1f       	adc	r25, r25
    14cc:	2a 95       	dec	r18
    14ce:	e2 f7       	brpl	.-8      	; 0x14c8 <DIO_u8WritePin+0x136>
    14d0:	98 2f       	mov	r25, r24
    14d2:	90 95       	com	r25
    14d4:	e5 e3       	ldi	r30, 0x35	; 53
    14d6:	f0 e0       	ldi	r31, 0x00	; 0
    14d8:	80 81       	ld	r24, Z
    14da:	49 2f       	mov	r20, r25
    14dc:	48 23       	and	r20, r24
    14de:	8b 81       	ldd	r24, Y+3	; 0x03
    14e0:	88 2f       	mov	r24, r24
    14e2:	90 e0       	ldi	r25, 0x00	; 0
    14e4:	9c 01       	movw	r18, r24
    14e6:	21 70       	andi	r18, 0x01	; 1
    14e8:	30 70       	andi	r19, 0x00	; 0
    14ea:	8a 81       	ldd	r24, Y+2	; 0x02
    14ec:	88 2f       	mov	r24, r24
    14ee:	90 e0       	ldi	r25, 0x00	; 0
    14f0:	87 70       	andi	r24, 0x07	; 7
    14f2:	90 70       	andi	r25, 0x00	; 0
    14f4:	b9 01       	movw	r22, r18
    14f6:	02 c0       	rjmp	.+4      	; 0x14fc <DIO_u8WritePin+0x16a>
    14f8:	66 0f       	add	r22, r22
    14fa:	77 1f       	adc	r23, r23
    14fc:	8a 95       	dec	r24
    14fe:	e2 f7       	brpl	.-8      	; 0x14f8 <DIO_u8WritePin+0x166>
    1500:	cb 01       	movw	r24, r22
    1502:	84 2b       	or	r24, r20
    1504:	8c 93       	st	X, r24
    1506:	2c c0       	rjmp	.+88     	; 0x1560 <DIO_u8WritePin+0x1ce>
			break;
		case PORT_D : //PORTD
			// Write pin values
			Assign_Bit(PORTD ,u8PinNum % 8, u8Data );
    1508:	a2 e3       	ldi	r26, 0x32	; 50
    150a:	b0 e0       	ldi	r27, 0x00	; 0
    150c:	8a 81       	ldd	r24, Y+2	; 0x02
    150e:	88 2f       	mov	r24, r24
    1510:	90 e0       	ldi	r25, 0x00	; 0
    1512:	9c 01       	movw	r18, r24
    1514:	27 70       	andi	r18, 0x07	; 7
    1516:	30 70       	andi	r19, 0x00	; 0
    1518:	81 e0       	ldi	r24, 0x01	; 1
    151a:	90 e0       	ldi	r25, 0x00	; 0
    151c:	02 c0       	rjmp	.+4      	; 0x1522 <DIO_u8WritePin+0x190>
    151e:	88 0f       	add	r24, r24
    1520:	99 1f       	adc	r25, r25
    1522:	2a 95       	dec	r18
    1524:	e2 f7       	brpl	.-8      	; 0x151e <DIO_u8WritePin+0x18c>
    1526:	98 2f       	mov	r25, r24
    1528:	90 95       	com	r25
    152a:	e2 e3       	ldi	r30, 0x32	; 50
    152c:	f0 e0       	ldi	r31, 0x00	; 0
    152e:	80 81       	ld	r24, Z
    1530:	49 2f       	mov	r20, r25
    1532:	48 23       	and	r20, r24
    1534:	8b 81       	ldd	r24, Y+3	; 0x03
    1536:	88 2f       	mov	r24, r24
    1538:	90 e0       	ldi	r25, 0x00	; 0
    153a:	9c 01       	movw	r18, r24
    153c:	21 70       	andi	r18, 0x01	; 1
    153e:	30 70       	andi	r19, 0x00	; 0
    1540:	8a 81       	ldd	r24, Y+2	; 0x02
    1542:	88 2f       	mov	r24, r24
    1544:	90 e0       	ldi	r25, 0x00	; 0
    1546:	87 70       	andi	r24, 0x07	; 7
    1548:	90 70       	andi	r25, 0x00	; 0
    154a:	b9 01       	movw	r22, r18
    154c:	02 c0       	rjmp	.+4      	; 0x1552 <DIO_u8WritePin+0x1c0>
    154e:	66 0f       	add	r22, r22
    1550:	77 1f       	adc	r23, r23
    1552:	8a 95       	dec	r24
    1554:	e2 f7       	brpl	.-8      	; 0x154e <DIO_u8WritePin+0x1bc>
    1556:	cb 01       	movw	r24, r22
    1558:	84 2b       	or	r24, r20
    155a:	8c 93       	st	X, r24
    155c:	01 c0       	rjmp	.+2      	; 0x1560 <DIO_u8WritePin+0x1ce>
			break;
		default:
			u8Status=ERROR;
    155e:	19 82       	std	Y+1, r1	; 0x01
			break;
		}

	}
	return u8Status;
    1560:	89 81       	ldd	r24, Y+1	; 0x01
}
    1562:	0f 90       	pop	r0
    1564:	0f 90       	pop	r0
    1566:	0f 90       	pop	r0
    1568:	0f 90       	pop	r0
    156a:	0f 90       	pop	r0
    156c:	cf 91       	pop	r28
    156e:	df 91       	pop	r29
    1570:	08 95       	ret

00001572 <DIO_u8ReadPin>:

uint8 DIO_u8ReadPin (uint8 u8PinNum )
{
    1572:	df 93       	push	r29
    1574:	cf 93       	push	r28
    1576:	00 d0       	rcall	.+0      	; 0x1578 <DIO_u8ReadPin+0x6>
    1578:	00 d0       	rcall	.+0      	; 0x157a <DIO_u8ReadPin+0x8>
    157a:	cd b7       	in	r28, 0x3d	; 61
    157c:	de b7       	in	r29, 0x3e	; 62
    157e:	8a 83       	std	Y+2, r24	; 0x02
	/*
	 * Reading from pin
	 * 		Pin number 		: 	PORTx_n 	n= 	0:7		x=	A:D
	 */
	// initializing the status of the functions
	uint8 u8Data=DIO_DATA_ERROR;
    1580:	82 e0       	ldi	r24, 0x02	; 2
    1582:	89 83       	std	Y+1, r24	; 0x01
	// checking the inputs of the functions
	if (u8PinNum<DIO_PINS_MAX)
    1584:	8a 81       	ldd	r24, Y+2	; 0x02
    1586:	80 32       	cpi	r24, 0x20	; 32
    1588:	08 f0       	brcs	.+2      	; 0x158c <DIO_u8ReadPin+0x1a>
    158a:	76 c0       	rjmp	.+236    	; 0x1678 <DIO_u8ReadPin+0x106>
	{
		// calculating the port no.
		switch(u8PinNum/8)
    158c:	8a 81       	ldd	r24, Y+2	; 0x02
    158e:	86 95       	lsr	r24
    1590:	86 95       	lsr	r24
    1592:	86 95       	lsr	r24
    1594:	28 2f       	mov	r18, r24
    1596:	30 e0       	ldi	r19, 0x00	; 0
    1598:	3c 83       	std	Y+4, r19	; 0x04
    159a:	2b 83       	std	Y+3, r18	; 0x03
    159c:	4b 81       	ldd	r20, Y+3	; 0x03
    159e:	5c 81       	ldd	r21, Y+4	; 0x04
    15a0:	41 30       	cpi	r20, 0x01	; 1
    15a2:	51 05       	cpc	r21, r1
    15a4:	59 f1       	breq	.+86     	; 0x15fc <DIO_u8ReadPin+0x8a>
    15a6:	8b 81       	ldd	r24, Y+3	; 0x03
    15a8:	9c 81       	ldd	r25, Y+4	; 0x04
    15aa:	82 30       	cpi	r24, 0x02	; 2
    15ac:	91 05       	cpc	r25, r1
    15ae:	34 f4       	brge	.+12     	; 0x15bc <DIO_u8ReadPin+0x4a>
    15b0:	2b 81       	ldd	r18, Y+3	; 0x03
    15b2:	3c 81       	ldd	r19, Y+4	; 0x04
    15b4:	21 15       	cp	r18, r1
    15b6:	31 05       	cpc	r19, r1
    15b8:	69 f0       	breq	.+26     	; 0x15d4 <DIO_u8ReadPin+0x62>
    15ba:	5c c0       	rjmp	.+184    	; 0x1674 <DIO_u8ReadPin+0x102>
    15bc:	4b 81       	ldd	r20, Y+3	; 0x03
    15be:	5c 81       	ldd	r21, Y+4	; 0x04
    15c0:	42 30       	cpi	r20, 0x02	; 2
    15c2:	51 05       	cpc	r21, r1
    15c4:	79 f1       	breq	.+94     	; 0x1624 <DIO_u8ReadPin+0xb2>
    15c6:	8b 81       	ldd	r24, Y+3	; 0x03
    15c8:	9c 81       	ldd	r25, Y+4	; 0x04
    15ca:	83 30       	cpi	r24, 0x03	; 3
    15cc:	91 05       	cpc	r25, r1
    15ce:	09 f4       	brne	.+2      	; 0x15d2 <DIO_u8ReadPin+0x60>
    15d0:	3d c0       	rjmp	.+122    	; 0x164c <DIO_u8ReadPin+0xda>
    15d2:	50 c0       	rjmp	.+160    	; 0x1674 <DIO_u8ReadPin+0x102>
		{
		case PORT_A : //PORTA
			//Read from pin
			u8Data= Get_Bit(PINA ,u8PinNum % 8);
    15d4:	e9 e3       	ldi	r30, 0x39	; 57
    15d6:	f0 e0       	ldi	r31, 0x00	; 0
    15d8:	80 81       	ld	r24, Z
    15da:	28 2f       	mov	r18, r24
    15dc:	30 e0       	ldi	r19, 0x00	; 0
    15de:	8a 81       	ldd	r24, Y+2	; 0x02
    15e0:	88 2f       	mov	r24, r24
    15e2:	90 e0       	ldi	r25, 0x00	; 0
    15e4:	87 70       	andi	r24, 0x07	; 7
    15e6:	90 70       	andi	r25, 0x00	; 0
    15e8:	a9 01       	movw	r20, r18
    15ea:	02 c0       	rjmp	.+4      	; 0x15f0 <DIO_u8ReadPin+0x7e>
    15ec:	55 95       	asr	r21
    15ee:	47 95       	ror	r20
    15f0:	8a 95       	dec	r24
    15f2:	e2 f7       	brpl	.-8      	; 0x15ec <DIO_u8ReadPin+0x7a>
    15f4:	ca 01       	movw	r24, r20
    15f6:	81 70       	andi	r24, 0x01	; 1
    15f8:	89 83       	std	Y+1, r24	; 0x01
    15fa:	3e c0       	rjmp	.+124    	; 0x1678 <DIO_u8ReadPin+0x106>
			break;
		case PORT_B : //PORTB
			//Read from pin
			u8Data= Get_Bit(PINB ,u8PinNum % 8);
    15fc:	e6 e3       	ldi	r30, 0x36	; 54
    15fe:	f0 e0       	ldi	r31, 0x00	; 0
    1600:	80 81       	ld	r24, Z
    1602:	28 2f       	mov	r18, r24
    1604:	30 e0       	ldi	r19, 0x00	; 0
    1606:	8a 81       	ldd	r24, Y+2	; 0x02
    1608:	88 2f       	mov	r24, r24
    160a:	90 e0       	ldi	r25, 0x00	; 0
    160c:	87 70       	andi	r24, 0x07	; 7
    160e:	90 70       	andi	r25, 0x00	; 0
    1610:	a9 01       	movw	r20, r18
    1612:	02 c0       	rjmp	.+4      	; 0x1618 <DIO_u8ReadPin+0xa6>
    1614:	55 95       	asr	r21
    1616:	47 95       	ror	r20
    1618:	8a 95       	dec	r24
    161a:	e2 f7       	brpl	.-8      	; 0x1614 <DIO_u8ReadPin+0xa2>
    161c:	ca 01       	movw	r24, r20
    161e:	81 70       	andi	r24, 0x01	; 1
    1620:	89 83       	std	Y+1, r24	; 0x01
    1622:	2a c0       	rjmp	.+84     	; 0x1678 <DIO_u8ReadPin+0x106>
			break;
		case PORT_C : //PORTC
			//Read from pin
			u8Data= Get_Bit(PINC ,u8PinNum % 8);
    1624:	e3 e3       	ldi	r30, 0x33	; 51
    1626:	f0 e0       	ldi	r31, 0x00	; 0
    1628:	80 81       	ld	r24, Z
    162a:	28 2f       	mov	r18, r24
    162c:	30 e0       	ldi	r19, 0x00	; 0
    162e:	8a 81       	ldd	r24, Y+2	; 0x02
    1630:	88 2f       	mov	r24, r24
    1632:	90 e0       	ldi	r25, 0x00	; 0
    1634:	87 70       	andi	r24, 0x07	; 7
    1636:	90 70       	andi	r25, 0x00	; 0
    1638:	a9 01       	movw	r20, r18
    163a:	02 c0       	rjmp	.+4      	; 0x1640 <DIO_u8ReadPin+0xce>
    163c:	55 95       	asr	r21
    163e:	47 95       	ror	r20
    1640:	8a 95       	dec	r24
    1642:	e2 f7       	brpl	.-8      	; 0x163c <DIO_u8ReadPin+0xca>
    1644:	ca 01       	movw	r24, r20
    1646:	81 70       	andi	r24, 0x01	; 1
    1648:	89 83       	std	Y+1, r24	; 0x01
    164a:	16 c0       	rjmp	.+44     	; 0x1678 <DIO_u8ReadPin+0x106>
			break;
		case PORT_D : //PORTD
			//Read from pin
			u8Data= Get_Bit(PIND ,u8PinNum % 8);
    164c:	e0 e3       	ldi	r30, 0x30	; 48
    164e:	f0 e0       	ldi	r31, 0x00	; 0
    1650:	80 81       	ld	r24, Z
    1652:	28 2f       	mov	r18, r24
    1654:	30 e0       	ldi	r19, 0x00	; 0
    1656:	8a 81       	ldd	r24, Y+2	; 0x02
    1658:	88 2f       	mov	r24, r24
    165a:	90 e0       	ldi	r25, 0x00	; 0
    165c:	87 70       	andi	r24, 0x07	; 7
    165e:	90 70       	andi	r25, 0x00	; 0
    1660:	a9 01       	movw	r20, r18
    1662:	02 c0       	rjmp	.+4      	; 0x1668 <DIO_u8ReadPin+0xf6>
    1664:	55 95       	asr	r21
    1666:	47 95       	ror	r20
    1668:	8a 95       	dec	r24
    166a:	e2 f7       	brpl	.-8      	; 0x1664 <DIO_u8ReadPin+0xf2>
    166c:	ca 01       	movw	r24, r20
    166e:	81 70       	andi	r24, 0x01	; 1
    1670:	89 83       	std	Y+1, r24	; 0x01
    1672:	02 c0       	rjmp	.+4      	; 0x1678 <DIO_u8ReadPin+0x106>
			break;
		default:
			u8Data= DIO_DATA_ERROR;
    1674:	82 e0       	ldi	r24, 0x02	; 2
    1676:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}
	return u8Data;
    1678:	89 81       	ldd	r24, Y+1	; 0x01
}
    167a:	0f 90       	pop	r0
    167c:	0f 90       	pop	r0
    167e:	0f 90       	pop	r0
    1680:	0f 90       	pop	r0
    1682:	cf 91       	pop	r28
    1684:	df 91       	pop	r29
    1686:	08 95       	ret

00001688 <ADC_vidInit>:

#include "ADC_LOCAL.h"


void ADC_vidInit()
{
    1688:	df 93       	push	r29
    168a:	cf 93       	push	r28
    168c:	cd b7       	in	r28, 0x3d	; 61
    168e:	de b7       	in	r29, 0x3e	; 62
	ADMUX_R =((ADC_REFRENCE		<< ADMUX_REFS_S 	)& ADMUX_REFS_M)
    1690:	e7 e2       	ldi	r30, 0x27	; 39
    1692:	f0 e0       	ldi	r31, 0x00	; 0
    1694:	80 e6       	ldi	r24, 0x60	; 96
    1696:	80 83       	st	Z, r24
			|( ADC_ADLAR		<< ADMUX_ADLAR	);
//	ADMUX_R=0x60;
	ADCSRA_R=(1					<< ADCSRA_ADEN)
    1698:	e6 e2       	ldi	r30, 0x26	; 38
    169a:	f0 e0       	ldi	r31, 0x00	; 0
    169c:	87 e8       	ldi	r24, 0x87	; 135
    169e:	80 83       	st	Z, r24
			|( ADC_AUTO_TRIGGER	<< ADCSRA_ADATE)
			|( ADC_INTERRUPT 	<< ADCSRA_ADIE)
			|((ADC_PRESCALAR 	<< ADCSRA_ADPS_S)&ADCSRA_ADPS_M);
	SFIOR_R|=((ADC_TRIGGER << SFIOR_ADTS_S)&SFIOR_ADTS_M);
    16a0:	a0 e5       	ldi	r26, 0x50	; 80
    16a2:	b0 e0       	ldi	r27, 0x00	; 0
    16a4:	e0 e5       	ldi	r30, 0x50	; 80
    16a6:	f0 e0       	ldi	r31, 0x00	; 0
    16a8:	80 81       	ld	r24, Z
    16aa:	8c 93       	st	X, r24
}
    16ac:	cf 91       	pop	r28
    16ae:	df 91       	pop	r29
    16b0:	08 95       	ret

000016b2 <ADC_Select>:
void ADC_Select(uint8 ADC)
{
    16b2:	df 93       	push	r29
    16b4:	cf 93       	push	r28
    16b6:	0f 92       	push	r0
    16b8:	cd b7       	in	r28, 0x3d	; 61
    16ba:	de b7       	in	r29, 0x3e	; 62
    16bc:	89 83       	std	Y+1, r24	; 0x01
	ADMUX_R |= (ADC<<ADMUX_MUX_S)&ADMUX_MUX_M;
    16be:	a7 e2       	ldi	r26, 0x27	; 39
    16c0:	b0 e0       	ldi	r27, 0x00	; 0
    16c2:	e7 e2       	ldi	r30, 0x27	; 39
    16c4:	f0 e0       	ldi	r31, 0x00	; 0
    16c6:	80 81       	ld	r24, Z
    16c8:	98 2f       	mov	r25, r24
    16ca:	89 81       	ldd	r24, Y+1	; 0x01
    16cc:	8f 71       	andi	r24, 0x1F	; 31
    16ce:	89 2b       	or	r24, r25
    16d0:	8c 93       	st	X, r24
}
    16d2:	0f 90       	pop	r0
    16d4:	cf 91       	pop	r28
    16d6:	df 91       	pop	r29
    16d8:	08 95       	ret

000016da <ADC_vidStartConversion>:
void ADC_vidStartConversion ()
{
    16da:	df 93       	push	r29
    16dc:	cf 93       	push	r28
    16de:	cd b7       	in	r28, 0x3d	; 61
    16e0:	de b7       	in	r29, 0x3e	; 62
	Set_Bit(ADCSRA_R,ADCSRA_ADSC);
    16e2:	a6 e2       	ldi	r26, 0x26	; 38
    16e4:	b0 e0       	ldi	r27, 0x00	; 0
    16e6:	e6 e2       	ldi	r30, 0x26	; 38
    16e8:	f0 e0       	ldi	r31, 0x00	; 0
    16ea:	80 81       	ld	r24, Z
    16ec:	80 64       	ori	r24, 0x40	; 64
    16ee:	8c 93       	st	X, r24
}
    16f0:	cf 91       	pop	r28
    16f2:	df 91       	pop	r29
    16f4:	08 95       	ret

000016f6 <ADC_u8ConvFinshed>:
uint8 ADC_u8ConvFinshed()
{
    16f6:	df 93       	push	r29
    16f8:	cf 93       	push	r28
    16fa:	cd b7       	in	r28, 0x3d	; 61
    16fc:	de b7       	in	r29, 0x3e	; 62
	return Get_Bit(ADCSRA_R,ADCSRA_ADIF);
    16fe:	e6 e2       	ldi	r30, 0x26	; 38
    1700:	f0 e0       	ldi	r31, 0x00	; 0
    1702:	80 81       	ld	r24, Z
    1704:	82 95       	swap	r24
    1706:	8f 70       	andi	r24, 0x0F	; 15
    1708:	81 70       	andi	r24, 0x01	; 1
}
    170a:	cf 91       	pop	r28
    170c:	df 91       	pop	r29
    170e:	08 95       	ret

00001710 <ADC_u16GetData>:
uint16 ADC_u16GetData(void)
{
    1710:	df 93       	push	r29
    1712:	cf 93       	push	r28
    1714:	00 d0       	rcall	.+0      	; 0x1716 <ADC_u16GetData+0x6>
    1716:	cd b7       	in	r28, 0x3d	; 61
    1718:	de b7       	in	r29, 0x3e	; 62
	uint16 u16Data;

	u16Data =ADCL_R>>ADCL_S;
    171a:	e4 e2       	ldi	r30, 0x24	; 36
    171c:	f0 e0       	ldi	r31, 0x00	; 0
    171e:	80 81       	ld	r24, Z
    1720:	82 95       	swap	r24
    1722:	86 95       	lsr	r24
    1724:	86 95       	lsr	r24
    1726:	83 70       	andi	r24, 0x03	; 3
    1728:	88 2f       	mov	r24, r24
    172a:	90 e0       	ldi	r25, 0x00	; 0
    172c:	9a 83       	std	Y+2, r25	; 0x02
    172e:	89 83       	std	Y+1, r24	; 0x01
	u16Data|=ADCH_R<<ADCH_S;
    1730:	e5 e2       	ldi	r30, 0x25	; 37
    1732:	f0 e0       	ldi	r31, 0x00	; 0
    1734:	80 81       	ld	r24, Z
    1736:	88 2f       	mov	r24, r24
    1738:	90 e0       	ldi	r25, 0x00	; 0
    173a:	88 0f       	add	r24, r24
    173c:	99 1f       	adc	r25, r25
    173e:	88 0f       	add	r24, r24
    1740:	99 1f       	adc	r25, r25
    1742:	9c 01       	movw	r18, r24
    1744:	89 81       	ldd	r24, Y+1	; 0x01
    1746:	9a 81       	ldd	r25, Y+2	; 0x02
    1748:	82 2b       	or	r24, r18
    174a:	93 2b       	or	r25, r19
    174c:	9a 83       	std	Y+2, r25	; 0x02
    174e:	89 83       	std	Y+1, r24	; 0x01
	Set_Bit(ADCSRA_R,ADCSRA_ADIF);
    1750:	a6 e2       	ldi	r26, 0x26	; 38
    1752:	b0 e0       	ldi	r27, 0x00	; 0
    1754:	e6 e2       	ldi	r30, 0x26	; 38
    1756:	f0 e0       	ldi	r31, 0x00	; 0
    1758:	80 81       	ld	r24, Z
    175a:	80 61       	ori	r24, 0x10	; 16
    175c:	8c 93       	st	X, r24

	return (u16Data);
    175e:	89 81       	ldd	r24, Y+1	; 0x01
    1760:	9a 81       	ldd	r25, Y+2	; 0x02
}
    1762:	0f 90       	pop	r0
    1764:	0f 90       	pop	r0
    1766:	cf 91       	pop	r28
    1768:	df 91       	pop	r29
    176a:	08 95       	ret

0000176c <ADC_u16Read>:


extern uint16 ADC_u16Read( uint8 ADC)
{
    176c:	df 93       	push	r29
    176e:	cf 93       	push	r28
    1770:	0f 92       	push	r0
    1772:	cd b7       	in	r28, 0x3d	; 61
    1774:	de b7       	in	r29, 0x3e	; 62
    1776:	89 83       	std	Y+1, r24	; 0x01
	ADC_Select(ADC);
    1778:	89 81       	ldd	r24, Y+1	; 0x01
    177a:	0e 94 59 0b 	call	0x16b2	; 0x16b2 <ADC_Select>
	ADC_vidStartConversion();
    177e:	0e 94 6d 0b 	call	0x16da	; 0x16da <ADC_vidStartConversion>
	while(!ADC_u8ConvFinshed());
    1782:	0e 94 7b 0b 	call	0x16f6	; 0x16f6 <ADC_u8ConvFinshed>
    1786:	88 23       	and	r24, r24
    1788:	e1 f3       	breq	.-8      	; 0x1782 <ADC_u16Read+0x16>
	return (ADC_u16GetData());
    178a:	0e 94 88 0b 	call	0x1710	; 0x1710 <ADC_u16GetData>
}
    178e:	0f 90       	pop	r0
    1790:	cf 91       	pop	r28
    1792:	df 91       	pop	r29
    1794:	08 95       	ret

00001796 <main>:
 */

#include "TEST/TEST.h"

int main(void)
{
    1796:	df 93       	push	r29
    1798:	cf 93       	push	r28
    179a:	cd b7       	in	r28, 0x3d	; 61
    179c:	de b7       	in	r29, 0x3e	; 62
	TEST_DIO();
    179e:	0e 94 ee 01 	call	0x3dc	; 0x3dc <TEST_DIO>
    17a2:	ff cf       	rjmp	.-2      	; 0x17a2 <main+0xc>

000017a4 <__udivmodsi4>:
    17a4:	a1 e2       	ldi	r26, 0x21	; 33
    17a6:	1a 2e       	mov	r1, r26
    17a8:	aa 1b       	sub	r26, r26
    17aa:	bb 1b       	sub	r27, r27
    17ac:	fd 01       	movw	r30, r26
    17ae:	0d c0       	rjmp	.+26     	; 0x17ca <__udivmodsi4_ep>

000017b0 <__udivmodsi4_loop>:
    17b0:	aa 1f       	adc	r26, r26
    17b2:	bb 1f       	adc	r27, r27
    17b4:	ee 1f       	adc	r30, r30
    17b6:	ff 1f       	adc	r31, r31
    17b8:	a2 17       	cp	r26, r18
    17ba:	b3 07       	cpc	r27, r19
    17bc:	e4 07       	cpc	r30, r20
    17be:	f5 07       	cpc	r31, r21
    17c0:	20 f0       	brcs	.+8      	; 0x17ca <__udivmodsi4_ep>
    17c2:	a2 1b       	sub	r26, r18
    17c4:	b3 0b       	sbc	r27, r19
    17c6:	e4 0b       	sbc	r30, r20
    17c8:	f5 0b       	sbc	r31, r21

000017ca <__udivmodsi4_ep>:
    17ca:	66 1f       	adc	r22, r22
    17cc:	77 1f       	adc	r23, r23
    17ce:	88 1f       	adc	r24, r24
    17d0:	99 1f       	adc	r25, r25
    17d2:	1a 94       	dec	r1
    17d4:	69 f7       	brne	.-38     	; 0x17b0 <__udivmodsi4_loop>
    17d6:	60 95       	com	r22
    17d8:	70 95       	com	r23
    17da:	80 95       	com	r24
    17dc:	90 95       	com	r25
    17de:	9b 01       	movw	r18, r22
    17e0:	ac 01       	movw	r20, r24
    17e2:	bd 01       	movw	r22, r26
    17e4:	cf 01       	movw	r24, r30
    17e6:	08 95       	ret

000017e8 <_exit>:
    17e8:	f8 94       	cli

000017ea <__stop_program>:
    17ea:	ff cf       	rjmp	.-2      	; 0x17ea <__stop_program>
